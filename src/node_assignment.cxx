#include "TIdentificatorCLAS12.h"
int TIdentificatorCLAS12::InitNodes()
{
  BMT__adc_ADC  =  fReader->getBranch<int32_t>("BMT::adc","ADC");
  BMT__adc_component  =  fReader->getBranch<int16_t>("BMT::adc","component");
  BMT__adc_integral  =  fReader->getBranch<int32_t>("BMT::adc","integral");
  BMT__adc_layer  =  fReader->getBranch<int8_t>("BMT::adc","layer");
  BMT__adc_order  =  fReader->getBranch<int8_t>("BMT::adc","order");
  BMT__adc_ped  =  fReader->getBranch<int16_t>("BMT::adc","ped");
  BMT__adc_sector  =  fReader->getBranch<int8_t>("BMT::adc","sector");
  BMT__adc_time  =  fReader->getBranch<float>("BMT::adc","time");
  BMT__adc_timestamp  =  fReader->getBranch<int64_t>("BMT::adc","timestamp");
  BMTRec__Clusters_ETot  =  fReader->getBranch<float>("BMTRec::Clusters","ETot");
  BMTRec__Clusters_Hit1_ID  =  fReader->getBranch<int16_t>("BMTRec::Clusters","Hit1_ID");
  BMTRec__Clusters_Hit2_ID  =  fReader->getBranch<int16_t>("BMTRec::Clusters","Hit2_ID");
  BMTRec__Clusters_Hit3_ID  =  fReader->getBranch<int16_t>("BMTRec::Clusters","Hit3_ID");
  BMTRec__Clusters_Hit4_ID  =  fReader->getBranch<int16_t>("BMTRec::Clusters","Hit4_ID");
  BMTRec__Clusters_Hit5_ID  =  fReader->getBranch<int16_t>("BMTRec::Clusters","Hit5_ID");
  BMTRec__Clusters_ID  =  fReader->getBranch<int16_t>("BMTRec::Clusters","ID");
  BMTRec__Clusters_centroid  =  fReader->getBranch<float>("BMTRec::Clusters","centroid");
  BMTRec__Clusters_centroidResidual  =  fReader->getBranch<float>("BMTRec::Clusters","centroidResidual");
  BMTRec__Clusters_layer  =  fReader->getBranch<int8_t>("BMTRec::Clusters","layer");
  BMTRec__Clusters_sector  =  fReader->getBranch<int8_t>("BMTRec::Clusters","sector");
  BMTRec__Clusters_seedE  =  fReader->getBranch<float>("BMTRec::Clusters","seedE");
  BMTRec__Clusters_seedResidual  =  fReader->getBranch<float>("BMTRec::Clusters","seedResidual");
  BMTRec__Clusters_seedStrip  =  fReader->getBranch<int32_t>("BMTRec::Clusters","seedStrip");
  BMTRec__Clusters_size  =  fReader->getBranch<int16_t>("BMTRec::Clusters","size");
  BMTRec__Clusters_trkID  =  fReader->getBranch<int16_t>("BMTRec::Clusters","trkID");
  BMTRec__Crosses_Cluster1_ID  =  fReader->getBranch<int16_t>("BMTRec::Crosses","Cluster1_ID");
  BMTRec__Crosses_Cluster2_ID  =  fReader->getBranch<int16_t>("BMTRec::Crosses","Cluster2_ID");
  BMTRec__Crosses_ID  =  fReader->getBranch<int16_t>("BMTRec::Crosses","ID");
  BMTRec__Crosses_err_x  =  fReader->getBranch<float>("BMTRec::Crosses","err_x");
  BMTRec__Crosses_err_y  =  fReader->getBranch<float>("BMTRec::Crosses","err_y");
  BMTRec__Crosses_err_z  =  fReader->getBranch<float>("BMTRec::Crosses","err_z");
  BMTRec__Crosses_region  =  fReader->getBranch<int8_t>("BMTRec::Crosses","region");
  BMTRec__Crosses_sector  =  fReader->getBranch<int8_t>("BMTRec::Crosses","sector");
  BMTRec__Crosses_trkID  =  fReader->getBranch<int16_t>("BMTRec::Crosses","trkID");
  BMTRec__Crosses_ux  =  fReader->getBranch<float>("BMTRec::Crosses","ux");
  BMTRec__Crosses_uy  =  fReader->getBranch<float>("BMTRec::Crosses","uy");
  BMTRec__Crosses_uz  =  fReader->getBranch<float>("BMTRec::Crosses","uz");
  BMTRec__Crosses_x  =  fReader->getBranch<float>("BMTRec::Crosses","x");
  BMTRec__Crosses_y  =  fReader->getBranch<float>("BMTRec::Crosses","y");
  BMTRec__Crosses_z  =  fReader->getBranch<float>("BMTRec::Crosses","z");
  BMTRec__Hits_ID  =  fReader->getBranch<int16_t>("BMTRec::Hits","ID");
  BMTRec__Hits_clusterID  =  fReader->getBranch<int16_t>("BMTRec::Hits","clusterID");
  BMTRec__Hits_fitResidual  =  fReader->getBranch<float>("BMTRec::Hits","fitResidual");
  BMTRec__Hits_layer  =  fReader->getBranch<int8_t>("BMTRec::Hits","layer");
  BMTRec__Hits_sector  =  fReader->getBranch<int8_t>("BMTRec::Hits","sector");
  BMTRec__Hits_strip  =  fReader->getBranch<int32_t>("BMTRec::Hits","strip");
  BMTRec__Hits_trkID  =  fReader->getBranch<int16_t>("BMTRec::Hits","trkID");
  BMTRec__Hits_trkingStat  =  fReader->getBranch<int32_t>("BMTRec::Hits","trkingStat");
  BMTRec__LayerEffs_layer  =  fReader->getBranch<int8_t>("BMTRec::LayerEffs","layer");
  BMTRec__LayerEffs_residual  =  fReader->getBranch<float>("BMTRec::LayerEffs","residual");
  BMTRec__LayerEffs_sector  =  fReader->getBranch<int8_t>("BMTRec::LayerEffs","sector");
  BMTRec__LayerEffs_status  =  fReader->getBranch<int8_t>("BMTRec::LayerEffs","status");
  BST__adc_ADC  =  fReader->getBranch<int32_t>("BST::adc","ADC");
  BST__adc_component  =  fReader->getBranch<int16_t>("BST::adc","component");
  BST__adc_layer  =  fReader->getBranch<int8_t>("BST::adc","layer");
  BST__adc_order  =  fReader->getBranch<int8_t>("BST::adc","order");
  BST__adc_ped  =  fReader->getBranch<int16_t>("BST::adc","ped");
  BST__adc_sector  =  fReader->getBranch<int8_t>("BST::adc","sector");
  BST__adc_time  =  fReader->getBranch<float>("BST::adc","time");
  BST__adc_timestamp  =  fReader->getBranch<int64_t>("BST::adc","timestamp");
  BSTRec__Clusters_ETot  =  fReader->getBranch<float>("BSTRec::Clusters","ETot");
  BSTRec__Clusters_Hit1_ID  =  fReader->getBranch<int16_t>("BSTRec::Clusters","Hit1_ID");
  BSTRec__Clusters_Hit2_ID  =  fReader->getBranch<int16_t>("BSTRec::Clusters","Hit2_ID");
  BSTRec__Clusters_Hit3_ID  =  fReader->getBranch<int16_t>("BSTRec::Clusters","Hit3_ID");
  BSTRec__Clusters_Hit4_ID  =  fReader->getBranch<int16_t>("BSTRec::Clusters","Hit4_ID");
  BSTRec__Clusters_Hit5_ID  =  fReader->getBranch<int16_t>("BSTRec::Clusters","Hit5_ID");
  BSTRec__Clusters_ID  =  fReader->getBranch<int16_t>("BSTRec::Clusters","ID");
  BSTRec__Clusters_centroid  =  fReader->getBranch<float>("BSTRec::Clusters","centroid");
  BSTRec__Clusters_centroidResidual  =  fReader->getBranch<float>("BSTRec::Clusters","centroidResidual");
  BSTRec__Clusters_layer  =  fReader->getBranch<int8_t>("BSTRec::Clusters","layer");
  BSTRec__Clusters_sector  =  fReader->getBranch<int8_t>("BSTRec::Clusters","sector");
  BSTRec__Clusters_seedE  =  fReader->getBranch<float>("BSTRec::Clusters","seedE");
  BSTRec__Clusters_seedResidual  =  fReader->getBranch<float>("BSTRec::Clusters","seedResidual");
  BSTRec__Clusters_seedStrip  =  fReader->getBranch<int32_t>("BSTRec::Clusters","seedStrip");
  BSTRec__Clusters_size  =  fReader->getBranch<int16_t>("BSTRec::Clusters","size");
  BSTRec__Clusters_trkID  =  fReader->getBranch<int16_t>("BSTRec::Clusters","trkID");
  BSTRec__Crosses_Cluster1_ID  =  fReader->getBranch<int16_t>("BSTRec::Crosses","Cluster1_ID");
  BSTRec__Crosses_Cluster2_ID  =  fReader->getBranch<int16_t>("BSTRec::Crosses","Cluster2_ID");
  BSTRec__Crosses_ID  =  fReader->getBranch<int16_t>("BSTRec::Crosses","ID");
  BSTRec__Crosses_err_x  =  fReader->getBranch<float>("BSTRec::Crosses","err_x");
  BSTRec__Crosses_err_y  =  fReader->getBranch<float>("BSTRec::Crosses","err_y");
  BSTRec__Crosses_err_z  =  fReader->getBranch<float>("BSTRec::Crosses","err_z");
  BSTRec__Crosses_region  =  fReader->getBranch<int8_t>("BSTRec::Crosses","region");
  BSTRec__Crosses_sector  =  fReader->getBranch<int8_t>("BSTRec::Crosses","sector");
  BSTRec__Crosses_trkID  =  fReader->getBranch<int16_t>("BSTRec::Crosses","trkID");
  BSTRec__Crosses_ux  =  fReader->getBranch<float>("BSTRec::Crosses","ux");
  BSTRec__Crosses_uy  =  fReader->getBranch<float>("BSTRec::Crosses","uy");
  BSTRec__Crosses_uz  =  fReader->getBranch<float>("BSTRec::Crosses","uz");
  BSTRec__Crosses_x  =  fReader->getBranch<float>("BSTRec::Crosses","x");
  BSTRec__Crosses_y  =  fReader->getBranch<float>("BSTRec::Crosses","y");
  BSTRec__Crosses_z  =  fReader->getBranch<float>("BSTRec::Crosses","z");
  BSTRec__Hits_ID  =  fReader->getBranch<int16_t>("BSTRec::Hits","ID");
  BSTRec__Hits_clusterID  =  fReader->getBranch<int16_t>("BSTRec::Hits","clusterID");
  BSTRec__Hits_fitResidual  =  fReader->getBranch<float>("BSTRec::Hits","fitResidual");
  BSTRec__Hits_layer  =  fReader->getBranch<int8_t>("BSTRec::Hits","layer");
  BSTRec__Hits_sector  =  fReader->getBranch<int8_t>("BSTRec::Hits","sector");
  BSTRec__Hits_strip  =  fReader->getBranch<int32_t>("BSTRec::Hits","strip");
  BSTRec__Hits_trkID  =  fReader->getBranch<int16_t>("BSTRec::Hits","trkID");
  BSTRec__Hits_trkingStat  =  fReader->getBranch<int32_t>("BSTRec::Hits","trkingStat");
  BSTRec__LayerEffs_layer  =  fReader->getBranch<int8_t>("BSTRec::LayerEffs","layer");
  BSTRec__LayerEffs_residual  =  fReader->getBranch<float>("BSTRec::LayerEffs","residual");
  BSTRec__LayerEffs_sector  =  fReader->getBranch<int8_t>("BSTRec::LayerEffs","sector");
  BSTRec__LayerEffs_status  =  fReader->getBranch<int8_t>("BSTRec::LayerEffs","status");
  CND__adc_ADC  =  fReader->getBranch<int32_t>("CND::adc","ADC");
  CND__adc_component  =  fReader->getBranch<int16_t>("CND::adc","component");
  CND__adc_layer  =  fReader->getBranch<int8_t>("CND::adc","layer");
  CND__adc_order  =  fReader->getBranch<int8_t>("CND::adc","order");
  CND__adc_ped  =  fReader->getBranch<int16_t>("CND::adc","ped");
  CND__adc_sector  =  fReader->getBranch<int8_t>("CND::adc","sector");
  CND__adc_time  =  fReader->getBranch<float>("CND::adc","time");
  CND__clusters_component  =  fReader->getBranch<int16_t>("CND::clusters","component");
  CND__clusters_energy  =  fReader->getBranch<float>("CND::clusters","energy");
  CND__clusters_id  =  fReader->getBranch<int16_t>("CND::clusters","id");
  CND__clusters_layer  =  fReader->getBranch<int8_t>("CND::clusters","layer");
  CND__clusters_nhits  =  fReader->getBranch<int16_t>("CND::clusters","nhits");
  CND__clusters_sector  =  fReader->getBranch<int8_t>("CND::clusters","sector");
  CND__clusters_status  =  fReader->getBranch<int16_t>("CND::clusters","status");
  CND__clusters_time  =  fReader->getBranch<float>("CND::clusters","time");
  CND__clusters_x  =  fReader->getBranch<float>("CND::clusters","x");
  CND__clusters_y  =  fReader->getBranch<float>("CND::clusters","y");
  CND__clusters_z  =  fReader->getBranch<float>("CND::clusters","z");
  CND__hits_component  =  fReader->getBranch<int16_t>("CND::hits","component");
  CND__hits_energy  =  fReader->getBranch<float>("CND::hits","energy");
  CND__hits_energy_unc  =  fReader->getBranch<float>("CND::hits","energy_unc");
  CND__hits_id  =  fReader->getBranch<int16_t>("CND::hits","id");
  CND__hits_indexLadc  =  fReader->getBranch<int16_t>("CND::hits","indexLadc");
  CND__hits_indexLtdc  =  fReader->getBranch<int16_t>("CND::hits","indexLtdc");
  CND__hits_indexRadc  =  fReader->getBranch<int16_t>("CND::hits","indexRadc");
  CND__hits_indexRtdc  =  fReader->getBranch<int16_t>("CND::hits","indexRtdc");
  CND__hits_layer  =  fReader->getBranch<int8_t>("CND::hits","layer");
  CND__hits_pathlength  =  fReader->getBranch<float>("CND::hits","pathlength");
  CND__hits_sector  =  fReader->getBranch<int8_t>("CND::hits","sector");
  CND__hits_status  =  fReader->getBranch<int16_t>("CND::hits","status");
  CND__hits_time  =  fReader->getBranch<float>("CND::hits","time");
  CND__hits_time_unc  =  fReader->getBranch<float>("CND::hits","time_unc");
  CND__hits_tlength  =  fReader->getBranch<float>("CND::hits","tlength");
  CND__hits_trkID  =  fReader->getBranch<int16_t>("CND::hits","trkID");
  CND__hits_tx  =  fReader->getBranch<float>("CND::hits","tx");
  CND__hits_ty  =  fReader->getBranch<float>("CND::hits","ty");
  CND__hits_tz  =  fReader->getBranch<float>("CND::hits","tz");
  CND__hits_x  =  fReader->getBranch<float>("CND::hits","x");
  CND__hits_x_unc  =  fReader->getBranch<float>("CND::hits","x_unc");
  CND__hits_y  =  fReader->getBranch<float>("CND::hits","y");
  CND__hits_y_unc  =  fReader->getBranch<float>("CND::hits","y_unc");
  CND__hits_z  =  fReader->getBranch<float>("CND::hits","z");
  CND__hits_z_unc  =  fReader->getBranch<float>("CND::hits","z_unc");
  CND__tdc_TDC  =  fReader->getBranch<int32_t>("CND::tdc","TDC");
  CND__tdc_component  =  fReader->getBranch<int16_t>("CND::tdc","component");
  CND__tdc_layer  =  fReader->getBranch<int8_t>("CND::tdc","layer");
  CND__tdc_order  =  fReader->getBranch<int8_t>("CND::tdc","order");
  CND__tdc_sector  =  fReader->getBranch<int8_t>("CND::tdc","sector");
  CTOF__adc_ADC  =  fReader->getBranch<int32_t>("CTOF::adc","ADC");
  CTOF__adc_component  =  fReader->getBranch<int16_t>("CTOF::adc","component");
  CTOF__adc_layer  =  fReader->getBranch<int8_t>("CTOF::adc","layer");
  CTOF__adc_order  =  fReader->getBranch<int8_t>("CTOF::adc","order");
  CTOF__adc_ped  =  fReader->getBranch<int16_t>("CTOF::adc","ped");
  CTOF__adc_sector  =  fReader->getBranch<int8_t>("CTOF::adc","sector");
  CTOF__adc_time  =  fReader->getBranch<float>("CTOF::adc","time");
  CTOF__hits_adc_idx1  =  fReader->getBranch<int16_t>("CTOF::hits","adc_idx1");
  CTOF__hits_adc_idx2  =  fReader->getBranch<int16_t>("CTOF::hits","adc_idx2");
  CTOF__hits_component  =  fReader->getBranch<int16_t>("CTOF::hits","component");
  CTOF__hits_energy  =  fReader->getBranch<float>("CTOF::hits","energy");
  CTOF__hits_energy_unc  =  fReader->getBranch<float>("CTOF::hits","energy_unc");
  CTOF__hits_id  =  fReader->getBranch<int16_t>("CTOF::hits","id");
  CTOF__hits_layer  =  fReader->getBranch<int8_t>("CTOF::hits","layer");
  CTOF__hits_pathLength  =  fReader->getBranch<float>("CTOF::hits","pathLength");
  CTOF__hits_pathLengthThruBar  =  fReader->getBranch<float>("CTOF::hits","pathLengthThruBar");
  CTOF__hits_sector  =  fReader->getBranch<int8_t>("CTOF::hits","sector");
  CTOF__hits_status  =  fReader->getBranch<int16_t>("CTOF::hits","status");
  CTOF__hits_tdc_idx1  =  fReader->getBranch<int16_t>("CTOF::hits","tdc_idx1");
  CTOF__hits_tdc_idx2  =  fReader->getBranch<int16_t>("CTOF::hits","tdc_idx2");
  CTOF__hits_time  =  fReader->getBranch<float>("CTOF::hits","time");
  CTOF__hits_time_unc  =  fReader->getBranch<float>("CTOF::hits","time_unc");
  CTOF__hits_trkID  =  fReader->getBranch<int16_t>("CTOF::hits","trkID");
  CTOF__hits_tx  =  fReader->getBranch<float>("CTOF::hits","tx");
  CTOF__hits_ty  =  fReader->getBranch<float>("CTOF::hits","ty");
  CTOF__hits_tz  =  fReader->getBranch<float>("CTOF::hits","tz");
  CTOF__hits_x  =  fReader->getBranch<float>("CTOF::hits","x");
  CTOF__hits_x_unc  =  fReader->getBranch<float>("CTOF::hits","x_unc");
  CTOF__hits_y  =  fReader->getBranch<float>("CTOF::hits","y");
  CTOF__hits_y_unc  =  fReader->getBranch<float>("CTOF::hits","y_unc");
  CTOF__hits_z  =  fReader->getBranch<float>("CTOF::hits","z");
  CTOF__hits_z_unc  =  fReader->getBranch<float>("CTOF::hits","z_unc");
  CTOF__rawhits_component  =  fReader->getBranch<int16_t>("CTOF::rawhits","component");
  CTOF__rawhits_energy_down  =  fReader->getBranch<float>("CTOF::rawhits","energy_down");
  CTOF__rawhits_energy_down_unc  =  fReader->getBranch<float>("CTOF::rawhits","energy_down_unc");
  CTOF__rawhits_energy_up  =  fReader->getBranch<float>("CTOF::rawhits","energy_up");
  CTOF__rawhits_energy_up_unc  =  fReader->getBranch<float>("CTOF::rawhits","energy_up_unc");
  CTOF__rawhits_id  =  fReader->getBranch<int16_t>("CTOF::rawhits","id");
  CTOF__rawhits_status  =  fReader->getBranch<int16_t>("CTOF::rawhits","status");
  CTOF__rawhits_time_down  =  fReader->getBranch<float>("CTOF::rawhits","time_down");
  CTOF__rawhits_time_down_unc  =  fReader->getBranch<float>("CTOF::rawhits","time_down_unc");
  CTOF__rawhits_time_up  =  fReader->getBranch<float>("CTOF::rawhits","time_up");
  CTOF__rawhits_time_up_unc  =  fReader->getBranch<float>("CTOF::rawhits","time_up_unc");
  CTOF__tdc_TDC  =  fReader->getBranch<int32_t>("CTOF::tdc","TDC");
  CTOF__tdc_component  =  fReader->getBranch<int16_t>("CTOF::tdc","component");
  CTOF__tdc_layer  =  fReader->getBranch<int8_t>("CTOF::tdc","layer");
  CTOF__tdc_order  =  fReader->getBranch<int8_t>("CTOF::tdc","order");
  CTOF__tdc_sector  =  fReader->getBranch<int8_t>("CTOF::tdc","sector");
  CVTRec__Cosmics_Cross10_ID  =  fReader->getBranch<int16_t>("CVTRec::Cosmics","Cross10_ID");
  CVTRec__Cosmics_Cross11_ID  =  fReader->getBranch<int16_t>("CVTRec::Cosmics","Cross11_ID");
  CVTRec__Cosmics_Cross12_ID  =  fReader->getBranch<int16_t>("CVTRec::Cosmics","Cross12_ID");
  CVTRec__Cosmics_Cross13_ID  =  fReader->getBranch<int16_t>("CVTRec::Cosmics","Cross13_ID");
  CVTRec__Cosmics_Cross14_ID  =  fReader->getBranch<int16_t>("CVTRec::Cosmics","Cross14_ID");
  CVTRec__Cosmics_Cross15_ID  =  fReader->getBranch<int16_t>("CVTRec::Cosmics","Cross15_ID");
  CVTRec__Cosmics_Cross16_ID  =  fReader->getBranch<int16_t>("CVTRec::Cosmics","Cross16_ID");
  CVTRec__Cosmics_Cross17_ID  =  fReader->getBranch<int16_t>("CVTRec::Cosmics","Cross17_ID");
  CVTRec__Cosmics_Cross18_ID  =  fReader->getBranch<int16_t>("CVTRec::Cosmics","Cross18_ID");
  CVTRec__Cosmics_Cross1_ID  =  fReader->getBranch<int16_t>("CVTRec::Cosmics","Cross1_ID");
  CVTRec__Cosmics_Cross2_ID  =  fReader->getBranch<int16_t>("CVTRec::Cosmics","Cross2_ID");
  CVTRec__Cosmics_Cross3_ID  =  fReader->getBranch<int16_t>("CVTRec::Cosmics","Cross3_ID");
  CVTRec__Cosmics_Cross4_ID  =  fReader->getBranch<int16_t>("CVTRec::Cosmics","Cross4_ID");
  CVTRec__Cosmics_Cross5_ID  =  fReader->getBranch<int16_t>("CVTRec::Cosmics","Cross5_ID");
  CVTRec__Cosmics_Cross6_ID  =  fReader->getBranch<int16_t>("CVTRec::Cosmics","Cross6_ID");
  CVTRec__Cosmics_Cross7_ID  =  fReader->getBranch<int16_t>("CVTRec::Cosmics","Cross7_ID");
  CVTRec__Cosmics_Cross8_ID  =  fReader->getBranch<int16_t>("CVTRec::Cosmics","Cross8_ID");
  CVTRec__Cosmics_Cross9_ID  =  fReader->getBranch<int16_t>("CVTRec::Cosmics","Cross9_ID");
  CVTRec__Cosmics_ID  =  fReader->getBranch<int16_t>("CVTRec::Cosmics","ID");
  CVTRec__Cosmics_chi2  =  fReader->getBranch<float>("CVTRec::Cosmics","chi2");
  CVTRec__Cosmics_ndf  =  fReader->getBranch<int16_t>("CVTRec::Cosmics","ndf");
  CVTRec__Cosmics_phi  =  fReader->getBranch<float>("CVTRec::Cosmics","phi");
  CVTRec__Cosmics_theta  =  fReader->getBranch<float>("CVTRec::Cosmics","theta");
  CVTRec__Cosmics_trkline_yx_interc  =  fReader->getBranch<float>("CVTRec::Cosmics","trkline_yx_interc");
  CVTRec__Cosmics_trkline_yx_slope  =  fReader->getBranch<float>("CVTRec::Cosmics","trkline_yx_slope");
  CVTRec__Cosmics_trkline_yz_interc  =  fReader->getBranch<float>("CVTRec::Cosmics","trkline_yz_interc");
  CVTRec__Cosmics_trkline_yz_slope  =  fReader->getBranch<float>("CVTRec::Cosmics","trkline_yz_slope");
  CVTRec__Tracks_Cross1_ID  =  fReader->getBranch<int16_t>("CVTRec::Tracks","Cross1_ID");
  CVTRec__Tracks_Cross2_ID  =  fReader->getBranch<int16_t>("CVTRec::Tracks","Cross2_ID");
  CVTRec__Tracks_Cross3_ID  =  fReader->getBranch<int16_t>("CVTRec::Tracks","Cross3_ID");
  CVTRec__Tracks_Cross4_ID  =  fReader->getBranch<int16_t>("CVTRec::Tracks","Cross4_ID");
  CVTRec__Tracks_Cross5_ID  =  fReader->getBranch<int16_t>("CVTRec::Tracks","Cross5_ID");
  CVTRec__Tracks_Cross6_ID  =  fReader->getBranch<int16_t>("CVTRec::Tracks","Cross6_ID");
  CVTRec__Tracks_Cross7_ID  =  fReader->getBranch<int16_t>("CVTRec::Tracks","Cross7_ID");
  CVTRec__Tracks_Cross8_ID  =  fReader->getBranch<int16_t>("CVTRec::Tracks","Cross8_ID");
  CVTRec__Tracks_Cross9_ID  =  fReader->getBranch<int16_t>("CVTRec::Tracks","Cross9_ID");
  CVTRec__Tracks_ID  =  fReader->getBranch<int16_t>("CVTRec::Tracks","ID");
  CVTRec__Tracks_c_ux  =  fReader->getBranch<float>("CVTRec::Tracks","c_ux");
  CVTRec__Tracks_c_uy  =  fReader->getBranch<float>("CVTRec::Tracks","c_uy");
  CVTRec__Tracks_c_uz  =  fReader->getBranch<float>("CVTRec::Tracks","c_uz");
  CVTRec__Tracks_c_x  =  fReader->getBranch<float>("CVTRec::Tracks","c_x");
  CVTRec__Tracks_c_y  =  fReader->getBranch<float>("CVTRec::Tracks","c_y");
  CVTRec__Tracks_c_z  =  fReader->getBranch<float>("CVTRec::Tracks","c_z");
  CVTRec__Tracks_chi2  =  fReader->getBranch<float>("CVTRec::Tracks","chi2");
  CVTRec__Tracks_circlefit_chi2_per_ndf  =  fReader->getBranch<float>("CVTRec::Tracks","circlefit_chi2_per_ndf");
  CVTRec__Tracks_cov_d02  =  fReader->getBranch<float>("CVTRec::Tracks","cov_d02");
  CVTRec__Tracks_cov_d0phi0  =  fReader->getBranch<float>("CVTRec::Tracks","cov_d0phi0");
  CVTRec__Tracks_cov_d0rho  =  fReader->getBranch<float>("CVTRec::Tracks","cov_d0rho");
  CVTRec__Tracks_cov_phi02  =  fReader->getBranch<float>("CVTRec::Tracks","cov_phi02");
  CVTRec__Tracks_cov_phi0rho  =  fReader->getBranch<float>("CVTRec::Tracks","cov_phi0rho");
  CVTRec__Tracks_cov_rho2  =  fReader->getBranch<float>("CVTRec::Tracks","cov_rho2");
  CVTRec__Tracks_cov_tandip2  =  fReader->getBranch<float>("CVTRec::Tracks","cov_tandip2");
  CVTRec__Tracks_cov_z02  =  fReader->getBranch<float>("CVTRec::Tracks","cov_z02");
  CVTRec__Tracks_d0  =  fReader->getBranch<float>("CVTRec::Tracks","d0");
  CVTRec__Tracks_fittingMethod  =  fReader->getBranch<int8_t>("CVTRec::Tracks","fittingMethod");
  CVTRec__Tracks_linefit_chi2_per_ndf  =  fReader->getBranch<float>("CVTRec::Tracks","linefit_chi2_per_ndf");
  CVTRec__Tracks_ndf  =  fReader->getBranch<int16_t>("CVTRec::Tracks","ndf");
  CVTRec__Tracks_p  =  fReader->getBranch<float>("CVTRec::Tracks","p");
  CVTRec__Tracks_pathlength  =  fReader->getBranch<float>("CVTRec::Tracks","pathlength");
  CVTRec__Tracks_phi0  =  fReader->getBranch<float>("CVTRec::Tracks","phi0");
  CVTRec__Tracks_pt  =  fReader->getBranch<float>("CVTRec::Tracks","pt");
  CVTRec__Tracks_q  =  fReader->getBranch<int8_t>("CVTRec::Tracks","q");
  CVTRec__Tracks_tandip  =  fReader->getBranch<float>("CVTRec::Tracks","tandip");
  CVTRec__Tracks_z0  =  fReader->getBranch<float>("CVTRec::Tracks","z0");
  CVTRec__Trajectory_CalcCentroidStrip  =  fReader->getBranch<float>("CVTRec::Trajectory","CalcCentroidStrip");
  CVTRec__Trajectory_ID  =  fReader->getBranch<int16_t>("CVTRec::Trajectory","ID");
  CVTRec__Trajectory_LayerTrackIntersPlane  =  fReader->getBranch<int8_t>("CVTRec::Trajectory","LayerTrackIntersPlane");
  CVTRec__Trajectory_PhiTrackIntersPlane  =  fReader->getBranch<float>("CVTRec::Trajectory","PhiTrackIntersPlane");
  CVTRec__Trajectory_SectorTrackIntersPlane  =  fReader->getBranch<int8_t>("CVTRec::Trajectory","SectorTrackIntersPlane");
  CVTRec__Trajectory_ThetaTrackIntersPlane  =  fReader->getBranch<float>("CVTRec::Trajectory","ThetaTrackIntersPlane");
  CVTRec__Trajectory_XtrackIntersPlane  =  fReader->getBranch<float>("CVTRec::Trajectory","XtrackIntersPlane");
  CVTRec__Trajectory_YtrackIntersPlane  =  fReader->getBranch<float>("CVTRec::Trajectory","YtrackIntersPlane");
  CVTRec__Trajectory_ZtrackIntersPlane  =  fReader->getBranch<float>("CVTRec::Trajectory","ZtrackIntersPlane");
  CVTRec__Trajectory_trkToMPlnAngl  =  fReader->getBranch<float>("CVTRec::Trajectory","trkToMPlnAngl");
  DC__doca_LR  =  fReader->getBranch<int8_t>("DC::doca","LR");
  DC__doca_doca  =  fReader->getBranch<float>("DC::doca","doca");
  DC__doca_sdoca  =  fReader->getBranch<float>("DC::doca","sdoca");
  DC__doca_stime  =  fReader->getBranch<float>("DC::doca","stime");
  DC__doca_time  =  fReader->getBranch<float>("DC::doca","time");
  DC__tdc_TDC  =  fReader->getBranch<int32_t>("DC::tdc","TDC");
  DC__tdc_component  =  fReader->getBranch<int16_t>("DC::tdc","component");
  DC__tdc_layer  =  fReader->getBranch<int8_t>("DC::tdc","layer");
  DC__tdc_order  =  fReader->getBranch<int8_t>("DC::tdc","order");
  DC__tdc_sector  =  fReader->getBranch<int8_t>("DC::tdc","sector");
  DETECTOR__Hits_component  =  fReader->getBranch<int16_t>("DETECTOR::Hits","component");
  DETECTOR__Hits_detector  =  fReader->getBranch<int16_t>("DETECTOR::Hits","detector");
  DETECTOR__Hits_energy  =  fReader->getBranch<float>("DETECTOR::Hits","energy");
  DETECTOR__Hits_layer  =  fReader->getBranch<int16_t>("DETECTOR::Hits","layer");
  DETECTOR__Hits_path  =  fReader->getBranch<float>("DETECTOR::Hits","path");
  DETECTOR__Hits_sector  =  fReader->getBranch<int16_t>("DETECTOR::Hits","sector");
  DETECTOR__Hits_time  =  fReader->getBranch<float>("DETECTOR::Hits","time");
  DETECTOR__ccpb_nphe  =  fReader->getBranch<float>("DETECTOR::ccpb","nphe");
  DETECTOR__ccpb_path  =  fReader->getBranch<float>("DETECTOR::ccpb","path");
  DETECTOR__ccpb_sector  =  fReader->getBranch<int8_t>("DETECTOR::ccpb","sector");
  DETECTOR__ccpb_time  =  fReader->getBranch<float>("DETECTOR::ccpb","time");
  DETECTOR__ecpb_ein  =  fReader->getBranch<float>("DETECTOR::ecpb","ein");
  DETECTOR__ecpb_eout  =  fReader->getBranch<float>("DETECTOR::ecpb","eout");
  DETECTOR__ecpb_etot  =  fReader->getBranch<float>("DETECTOR::ecpb","etot");
  DETECTOR__ecpb_path  =  fReader->getBranch<float>("DETECTOR::ecpb","path");
  DETECTOR__ecpb_sector  =  fReader->getBranch<int8_t>("DETECTOR::ecpb","sector");
  DETECTOR__ecpb_time  =  fReader->getBranch<float>("DETECTOR::ecpb","time");
  DETECTOR__ecpb_x  =  fReader->getBranch<float>("DETECTOR::ecpb","x");
  DETECTOR__ecpb_y  =  fReader->getBranch<float>("DETECTOR::ecpb","y");
  DETECTOR__ecpb_z  =  fReader->getBranch<float>("DETECTOR::ecpb","z");
  DETECTOR__icpb_ecc  =  fReader->getBranch<float>("DETECTOR::icpb","ecc");
  DETECTOR__icpb_etc  =  fReader->getBranch<float>("DETECTOR::icpb","etc");
  DETECTOR__icpb_tc  =  fReader->getBranch<float>("DETECTOR::icpb","tc");
  DETECTOR__icpb_xc  =  fReader->getBranch<float>("DETECTOR::icpb","xc");
  DETECTOR__icpb_yc  =  fReader->getBranch<float>("DETECTOR::icpb","yc");
  DETECTOR__lcpb_ein  =  fReader->getBranch<float>("DETECTOR::lcpb","ein");
  DETECTOR__lcpb_etot  =  fReader->getBranch<float>("DETECTOR::lcpb","etot");
  DETECTOR__lcpb_path  =  fReader->getBranch<float>("DETECTOR::lcpb","path");
  DETECTOR__lcpb_sector  =  fReader->getBranch<int8_t>("DETECTOR::lcpb","sector");
  DETECTOR__lcpb_time  =  fReader->getBranch<float>("DETECTOR::lcpb","time");
  DETECTOR__lcpb_x  =  fReader->getBranch<float>("DETECTOR::lcpb","x");
  DETECTOR__lcpb_y  =  fReader->getBranch<float>("DETECTOR::lcpb","y");
  DETECTOR__lcpb_z  =  fReader->getBranch<float>("DETECTOR::lcpb","z");
  DETECTOR__scpb_edep  =  fReader->getBranch<float>("DETECTOR::scpb","edep");
  DETECTOR__scpb_paddle  =  fReader->getBranch<int8_t>("DETECTOR::scpb","paddle");
  DETECTOR__scpb_path  =  fReader->getBranch<float>("DETECTOR::scpb","path");
  DETECTOR__scpb_sector  =  fReader->getBranch<int8_t>("DETECTOR::scpb","sector");
  DETECTOR__scpb_time  =  fReader->getBranch<float>("DETECTOR::scpb","time");
  ECAL__adc_ADC  =  fReader->getBranch<int32_t>("ECAL::adc","ADC");
  ECAL__adc_component  =  fReader->getBranch<int16_t>("ECAL::adc","component");
  ECAL__adc_layer  =  fReader->getBranch<int8_t>("ECAL::adc","layer");
  ECAL__adc_order  =  fReader->getBranch<int8_t>("ECAL::adc","order");
  ECAL__adc_ped  =  fReader->getBranch<int16_t>("ECAL::adc","ped");
  ECAL__adc_sector  =  fReader->getBranch<int8_t>("ECAL::adc","sector");
  ECAL__adc_time  =  fReader->getBranch<float>("ECAL::adc","time");
  ECAL__calib_energy  =  fReader->getBranch<float>("ECAL::calib","energy");
  ECAL__calib_layer  =  fReader->getBranch<int8_t>("ECAL::calib","layer");
  ECAL__calib_rawEU  =  fReader->getBranch<float>("ECAL::calib","rawEU");
  ECAL__calib_rawEV  =  fReader->getBranch<float>("ECAL::calib","rawEV");
  ECAL__calib_rawEW  =  fReader->getBranch<float>("ECAL::calib","rawEW");
  ECAL__calib_recEU  =  fReader->getBranch<float>("ECAL::calib","recEU");
  ECAL__calib_recEV  =  fReader->getBranch<float>("ECAL::calib","recEV");
  ECAL__calib_recEW  =  fReader->getBranch<float>("ECAL::calib","recEW");
  ECAL__calib_sector  =  fReader->getBranch<int8_t>("ECAL::calib","sector");
  ECAL__clusters_coordU  =  fReader->getBranch<int32_t>("ECAL::clusters","coordU");
  ECAL__clusters_coordV  =  fReader->getBranch<int32_t>("ECAL::clusters","coordV");
  ECAL__clusters_coordW  =  fReader->getBranch<int32_t>("ECAL::clusters","coordW");
  ECAL__clusters_energy  =  fReader->getBranch<float>("ECAL::clusters","energy");
  ECAL__clusters_id  =  fReader->getBranch<int16_t>("ECAL::clusters","id");
  ECAL__clusters_idU  =  fReader->getBranch<int8_t>("ECAL::clusters","idU");
  ECAL__clusters_idV  =  fReader->getBranch<int8_t>("ECAL::clusters","idV");
  ECAL__clusters_idW  =  fReader->getBranch<int8_t>("ECAL::clusters","idW");
  ECAL__clusters_layer  =  fReader->getBranch<int8_t>("ECAL::clusters","layer");
  ECAL__clusters_sector  =  fReader->getBranch<int8_t>("ECAL::clusters","sector");
  ECAL__clusters_status  =  fReader->getBranch<int16_t>("ECAL::clusters","status");
  ECAL__clusters_time  =  fReader->getBranch<float>("ECAL::clusters","time");
  ECAL__clusters_widthU  =  fReader->getBranch<float>("ECAL::clusters","widthU");
  ECAL__clusters_widthV  =  fReader->getBranch<float>("ECAL::clusters","widthV");
  ECAL__clusters_widthW  =  fReader->getBranch<float>("ECAL::clusters","widthW");
  ECAL__clusters_x  =  fReader->getBranch<float>("ECAL::clusters","x");
  ECAL__clusters_y  =  fReader->getBranch<float>("ECAL::clusters","y");
  ECAL__clusters_z  =  fReader->getBranch<float>("ECAL::clusters","z");
  ECAL__hits_energy  =  fReader->getBranch<float>("ECAL::hits","energy");
  ECAL__hits_id  =  fReader->getBranch<int16_t>("ECAL::hits","id");
  ECAL__hits_layer  =  fReader->getBranch<int8_t>("ECAL::hits","layer");
  ECAL__hits_peakid  =  fReader->getBranch<int8_t>("ECAL::hits","peakid");
  ECAL__hits_sector  =  fReader->getBranch<int8_t>("ECAL::hits","sector");
  ECAL__hits_status  =  fReader->getBranch<int16_t>("ECAL::hits","status");
  ECAL__hits_strip  =  fReader->getBranch<int8_t>("ECAL::hits","strip");
  ECAL__hits_time  =  fReader->getBranch<float>("ECAL::hits","time");
  ECAL__moments_distU  =  fReader->getBranch<float>("ECAL::moments","distU");
  ECAL__moments_distV  =  fReader->getBranch<float>("ECAL::moments","distV");
  ECAL__moments_distW  =  fReader->getBranch<float>("ECAL::moments","distW");
  ECAL__moments_m1u  =  fReader->getBranch<float>("ECAL::moments","m1u");
  ECAL__moments_m1v  =  fReader->getBranch<float>("ECAL::moments","m1v");
  ECAL__moments_m1w  =  fReader->getBranch<float>("ECAL::moments","m1w");
  ECAL__moments_m2u  =  fReader->getBranch<float>("ECAL::moments","m2u");
  ECAL__moments_m2v  =  fReader->getBranch<float>("ECAL::moments","m2v");
  ECAL__moments_m2w  =  fReader->getBranch<float>("ECAL::moments","m2w");
  ECAL__moments_m3u  =  fReader->getBranch<float>("ECAL::moments","m3u");
  ECAL__moments_m3v  =  fReader->getBranch<float>("ECAL::moments","m3v");
  ECAL__moments_m3w  =  fReader->getBranch<float>("ECAL::moments","m3w");
  ECAL__peaks_energy  =  fReader->getBranch<float>("ECAL::peaks","energy");
  ECAL__peaks_id  =  fReader->getBranch<int16_t>("ECAL::peaks","id");
  ECAL__peaks_layer  =  fReader->getBranch<int8_t>("ECAL::peaks","layer");
  ECAL__peaks_sector  =  fReader->getBranch<int8_t>("ECAL::peaks","sector");
  ECAL__peaks_status  =  fReader->getBranch<int16_t>("ECAL::peaks","status");
  ECAL__peaks_time  =  fReader->getBranch<float>("ECAL::peaks","time");
  ECAL__peaks_width  =  fReader->getBranch<float>("ECAL::peaks","width");
  ECAL__peaks_xe  =  fReader->getBranch<float>("ECAL::peaks","xe");
  ECAL__peaks_xo  =  fReader->getBranch<float>("ECAL::peaks","xo");
  ECAL__peaks_ye  =  fReader->getBranch<float>("ECAL::peaks","ye");
  ECAL__peaks_yo  =  fReader->getBranch<float>("ECAL::peaks","yo");
  ECAL__peaks_ze  =  fReader->getBranch<float>("ECAL::peaks","ze");
  ECAL__peaks_zo  =  fReader->getBranch<float>("ECAL::peaks","zo");
  ECAL__tdc_TDC  =  fReader->getBranch<int32_t>("ECAL::tdc","TDC");
  ECAL__tdc_component  =  fReader->getBranch<int16_t>("ECAL::tdc","component");
  ECAL__tdc_layer  =  fReader->getBranch<int8_t>("ECAL::tdc","layer");
  ECAL__tdc_order  =  fReader->getBranch<int8_t>("ECAL::tdc","order");
  ECAL__tdc_sector  =  fReader->getBranch<int8_t>("ECAL::tdc","sector");
  EVENT__detector_ccnphe  =  fReader->getBranch<float>("EVENT::detector","ccnphe");
  EVENT__detector_ecin  =  fReader->getBranch<float>("EVENT::detector","ecin");
  EVENT__detector_ecout  =  fReader->getBranch<float>("EVENT::detector","ecout");
  EVENT__detector_ecpath  =  fReader->getBranch<float>("EVENT::detector","ecpath");
  EVENT__detector_ecsector  =  fReader->getBranch<int32_t>("EVENT::detector","ecsector");
  EVENT__detector_ectime  =  fReader->getBranch<float>("EVENT::detector","ectime");
  EVENT__detector_ectot  =  fReader->getBranch<float>("EVENT::detector","ectot");
  EVENT__detector_ecu  =  fReader->getBranch<float>("EVENT::detector","ecu");
  EVENT__detector_ecv  =  fReader->getBranch<float>("EVENT::detector","ecv");
  EVENT__detector_ecw  =  fReader->getBranch<float>("EVENT::detector","ecw");
  EVENT__detector_scpaddle  =  fReader->getBranch<int32_t>("EVENT::detector","scpaddle");
  EVENT__detector_scpath  =  fReader->getBranch<float>("EVENT::detector","scpath");
  EVENT__detector_scsector  =  fReader->getBranch<int32_t>("EVENT::detector","scsector");
  EVENT__detector_sctime  =  fReader->getBranch<float>("EVENT::detector","sctime");
  EVENT__particle_ccstat  =  fReader->getBranch<int8_t>("EVENT::particle","ccstat");
  EVENT__particle_charge  =  fReader->getBranch<int8_t>("EVENT::particle","charge");
  EVENT__particle_dcstat  =  fReader->getBranch<int8_t>("EVENT::particle","dcstat");
  EVENT__particle_ecstat  =  fReader->getBranch<int8_t>("EVENT::particle","ecstat");
  EVENT__particle_lcstat  =  fReader->getBranch<int8_t>("EVENT::particle","lcstat");
  EVENT__particle_mass  =  fReader->getBranch<float>("EVENT::particle","mass");
  EVENT__particle_pid  =  fReader->getBranch<int32_t>("EVENT::particle","pid");
  EVENT__particle_px  =  fReader->getBranch<float>("EVENT::particle","px");
  EVENT__particle_py  =  fReader->getBranch<float>("EVENT::particle","py");
  EVENT__particle_pz  =  fReader->getBranch<float>("EVENT::particle","pz");
  EVENT__particle_scstat  =  fReader->getBranch<int8_t>("EVENT::particle","scstat");
  EVENT__particle_status  =  fReader->getBranch<int8_t>("EVENT::particle","status");
  EVENT__particle_vx  =  fReader->getBranch<float>("EVENT::particle","vx");
  EVENT__particle_vy  =  fReader->getBranch<float>("EVENT::particle","vy");
  EVENT__particle_vz  =  fReader->getBranch<float>("EVENT::particle","vz");
  FMT__adc_ADC  =  fReader->getBranch<int32_t>("FMT::adc","ADC");
  FMT__adc_component  =  fReader->getBranch<int16_t>("FMT::adc","component");
  FMT__adc_integral  =  fReader->getBranch<int32_t>("FMT::adc","integral");
  FMT__adc_layer  =  fReader->getBranch<int8_t>("FMT::adc","layer");
  FMT__adc_order  =  fReader->getBranch<int8_t>("FMT::adc","order");
  FMT__adc_ped  =  fReader->getBranch<int16_t>("FMT::adc","ped");
  FMT__adc_sector  =  fReader->getBranch<int8_t>("FMT::adc","sector");
  FMT__adc_time  =  fReader->getBranch<float>("FMT::adc","time");
  FMT__adc_timestamp  =  fReader->getBranch<int64_t>("FMT::adc","timestamp");
  FMTRec__Clusters_ETot  =  fReader->getBranch<float>("FMTRec::Clusters","ETot");
  FMTRec__Clusters_Hit1_ID  =  fReader->getBranch<int16_t>("FMTRec::Clusters","Hit1_ID");
  FMTRec__Clusters_Hit2_ID  =  fReader->getBranch<int16_t>("FMTRec::Clusters","Hit2_ID");
  FMTRec__Clusters_Hit3_ID  =  fReader->getBranch<int16_t>("FMTRec::Clusters","Hit3_ID");
  FMTRec__Clusters_Hit4_ID  =  fReader->getBranch<int16_t>("FMTRec::Clusters","Hit4_ID");
  FMTRec__Clusters_Hit5_ID  =  fReader->getBranch<int16_t>("FMTRec::Clusters","Hit5_ID");
  FMTRec__Clusters_ID  =  fReader->getBranch<int16_t>("FMTRec::Clusters","ID");
  FMTRec__Clusters_centroid  =  fReader->getBranch<float>("FMTRec::Clusters","centroid");
  FMTRec__Clusters_centroidResidual  =  fReader->getBranch<float>("FMTRec::Clusters","centroidResidual");
  FMTRec__Clusters_layer  =  fReader->getBranch<int8_t>("FMTRec::Clusters","layer");
  FMTRec__Clusters_sector  =  fReader->getBranch<int8_t>("FMTRec::Clusters","sector");
  FMTRec__Clusters_seedE  =  fReader->getBranch<float>("FMTRec::Clusters","seedE");
  FMTRec__Clusters_seedResidual  =  fReader->getBranch<float>("FMTRec::Clusters","seedResidual");
  FMTRec__Clusters_seedStrip  =  fReader->getBranch<int32_t>("FMTRec::Clusters","seedStrip");
  FMTRec__Clusters_size  =  fReader->getBranch<int16_t>("FMTRec::Clusters","size");
  FMTRec__Clusters_trkID  =  fReader->getBranch<int16_t>("FMTRec::Clusters","trkID");
  FMTRec__Crosses_Cluster1_ID  =  fReader->getBranch<int16_t>("FMTRec::Crosses","Cluster1_ID");
  FMTRec__Crosses_Cluster2_ID  =  fReader->getBranch<int16_t>("FMTRec::Crosses","Cluster2_ID");
  FMTRec__Crosses_ID  =  fReader->getBranch<int16_t>("FMTRec::Crosses","ID");
  FMTRec__Crosses_err_x  =  fReader->getBranch<float>("FMTRec::Crosses","err_x");
  FMTRec__Crosses_err_y  =  fReader->getBranch<float>("FMTRec::Crosses","err_y");
  FMTRec__Crosses_err_z  =  fReader->getBranch<float>("FMTRec::Crosses","err_z");
  FMTRec__Crosses_region  =  fReader->getBranch<int8_t>("FMTRec::Crosses","region");
  FMTRec__Crosses_sector  =  fReader->getBranch<int8_t>("FMTRec::Crosses","sector");
  FMTRec__Crosses_trkID  =  fReader->getBranch<int16_t>("FMTRec::Crosses","trkID");
  FMTRec__Crosses_ux  =  fReader->getBranch<float>("FMTRec::Crosses","ux");
  FMTRec__Crosses_uy  =  fReader->getBranch<float>("FMTRec::Crosses","uy");
  FMTRec__Crosses_uz  =  fReader->getBranch<float>("FMTRec::Crosses","uz");
  FMTRec__Crosses_x  =  fReader->getBranch<float>("FMTRec::Crosses","x");
  FMTRec__Crosses_y  =  fReader->getBranch<float>("FMTRec::Crosses","y");
  FMTRec__Crosses_z  =  fReader->getBranch<float>("FMTRec::Crosses","z");
  FMTRec__Hits_ID  =  fReader->getBranch<int16_t>("FMTRec::Hits","ID");
  FMTRec__Hits_clusterID  =  fReader->getBranch<int16_t>("FMTRec::Hits","clusterID");
  FMTRec__Hits_fitResidual  =  fReader->getBranch<float>("FMTRec::Hits","fitResidual");
  FMTRec__Hits_layer  =  fReader->getBranch<int8_t>("FMTRec::Hits","layer");
  FMTRec__Hits_sector  =  fReader->getBranch<int8_t>("FMTRec::Hits","sector");
  FMTRec__Hits_strip  =  fReader->getBranch<int32_t>("FMTRec::Hits","strip");
  FMTRec__Hits_trkID  =  fReader->getBranch<int16_t>("FMTRec::Hits","trkID");
  FMTRec__Hits_trkingStat  =  fReader->getBranch<int32_t>("FMTRec::Hits","trkingStat");
  FT__particles_calID  =  fReader->getBranch<int16_t>("FT::particles","calID");
  FT__particles_charge  =  fReader->getBranch<int8_t>("FT::particles","charge");
  FT__particles_cx  =  fReader->getBranch<float>("FT::particles","cx");
  FT__particles_cy  =  fReader->getBranch<float>("FT::particles","cy");
  FT__particles_cz  =  fReader->getBranch<float>("FT::particles","cz");
  FT__particles_energy  =  fReader->getBranch<float>("FT::particles","energy");
  FT__particles_hodoID  =  fReader->getBranch<int16_t>("FT::particles","hodoID");
  FT__particles_id  =  fReader->getBranch<int16_t>("FT::particles","id");
  FT__particles_time  =  fReader->getBranch<float>("FT::particles","time");
  FT__particles_trkID  =  fReader->getBranch<int16_t>("FT::particles","trkID");
  FTCAL__adc_ADC  =  fReader->getBranch<int32_t>("FTCAL::adc","ADC");
  FTCAL__adc_component  =  fReader->getBranch<int16_t>("FTCAL::adc","component");
  FTCAL__adc_layer  =  fReader->getBranch<int8_t>("FTCAL::adc","layer");
  FTCAL__adc_order  =  fReader->getBranch<int8_t>("FTCAL::adc","order");
  FTCAL__adc_ped  =  fReader->getBranch<int16_t>("FTCAL::adc","ped");
  FTCAL__adc_sector  =  fReader->getBranch<int8_t>("FTCAL::adc","sector");
  FTCAL__adc_time  =  fReader->getBranch<float>("FTCAL::adc","time");
  FTCAL__clusters_energy  =  fReader->getBranch<float>("FTCAL::clusters","energy");
  FTCAL__clusters_id  =  fReader->getBranch<int16_t>("FTCAL::clusters","id");
  FTCAL__clusters_maxEnergy  =  fReader->getBranch<float>("FTCAL::clusters","maxEnergy");
  FTCAL__clusters_radius  =  fReader->getBranch<float>("FTCAL::clusters","radius");
  FTCAL__clusters_recEnergy  =  fReader->getBranch<float>("FTCAL::clusters","recEnergy");
  FTCAL__clusters_size  =  fReader->getBranch<int16_t>("FTCAL::clusters","size");
  FTCAL__clusters_time  =  fReader->getBranch<float>("FTCAL::clusters","time");
  FTCAL__clusters_widthX  =  fReader->getBranch<float>("FTCAL::clusters","widthX");
  FTCAL__clusters_widthY  =  fReader->getBranch<float>("FTCAL::clusters","widthY");
  FTCAL__clusters_x  =  fReader->getBranch<float>("FTCAL::clusters","x");
  FTCAL__clusters_y  =  fReader->getBranch<float>("FTCAL::clusters","y");
  FTCAL__clusters_z  =  fReader->getBranch<float>("FTCAL::clusters","z");
  FTCAL__hits_clusterID  =  fReader->getBranch<int16_t>("FTCAL::hits","clusterID");
  FTCAL__hits_energy  =  fReader->getBranch<float>("FTCAL::hits","energy");
  FTCAL__hits_hitID  =  fReader->getBranch<int16_t>("FTCAL::hits","hitID");
  FTCAL__hits_idx  =  fReader->getBranch<int8_t>("FTCAL::hits","idx");
  FTCAL__hits_idy  =  fReader->getBranch<int8_t>("FTCAL::hits","idy");
  FTCAL__hits_time  =  fReader->getBranch<float>("FTCAL::hits","time");
  FTCAL__hits_x  =  fReader->getBranch<float>("FTCAL::hits","x");
  FTCAL__hits_y  =  fReader->getBranch<float>("FTCAL::hits","y");
  FTCAL__hits_z  =  fReader->getBranch<float>("FTCAL::hits","z");
  FTHODO__adc_ADC  =  fReader->getBranch<int32_t>("FTHODO::adc","ADC");
  FTHODO__adc_component  =  fReader->getBranch<int16_t>("FTHODO::adc","component");
  FTHODO__adc_layer  =  fReader->getBranch<int8_t>("FTHODO::adc","layer");
  FTHODO__adc_order  =  fReader->getBranch<int8_t>("FTHODO::adc","order");
  FTHODO__adc_ped  =  fReader->getBranch<int16_t>("FTHODO::adc","ped");
  FTHODO__adc_sector  =  fReader->getBranch<int8_t>("FTHODO::adc","sector");
  FTHODO__adc_time  =  fReader->getBranch<float>("FTHODO::adc","time");
  FTHODO__clusters_energy  =  fReader->getBranch<float>("FTHODO::clusters","energy");
  FTHODO__clusters_id  =  fReader->getBranch<int16_t>("FTHODO::clusters","id");
  FTHODO__clusters_radius  =  fReader->getBranch<float>("FTHODO::clusters","radius");
  FTHODO__clusters_size  =  fReader->getBranch<int16_t>("FTHODO::clusters","size");
  FTHODO__clusters_time  =  fReader->getBranch<float>("FTHODO::clusters","time");
  FTHODO__clusters_widthX  =  fReader->getBranch<float>("FTHODO::clusters","widthX");
  FTHODO__clusters_widthY  =  fReader->getBranch<float>("FTHODO::clusters","widthY");
  FTHODO__clusters_x  =  fReader->getBranch<float>("FTHODO::clusters","x");
  FTHODO__clusters_y  =  fReader->getBranch<float>("FTHODO::clusters","y");
  FTHODO__clusters_z  =  fReader->getBranch<float>("FTHODO::clusters","z");
  FTHODO__hits_clusterID  =  fReader->getBranch<int16_t>("FTHODO::hits","clusterID");
  FTHODO__hits_component  =  fReader->getBranch<int16_t>("FTHODO::hits","component");
  FTHODO__hits_energy  =  fReader->getBranch<float>("FTHODO::hits","energy");
  FTHODO__hits_hitID  =  fReader->getBranch<int16_t>("FTHODO::hits","hitID");
  FTHODO__hits_layer  =  fReader->getBranch<int8_t>("FTHODO::hits","layer");
  FTHODO__hits_sector  =  fReader->getBranch<int8_t>("FTHODO::hits","sector");
  FTHODO__hits_time  =  fReader->getBranch<float>("FTHODO::hits","time");
  FTHODO__hits_x  =  fReader->getBranch<float>("FTHODO::hits","x");
  FTHODO__hits_y  =  fReader->getBranch<float>("FTHODO::hits","y");
  FTHODO__hits_z  =  fReader->getBranch<float>("FTHODO::hits","z");
  FTOF__adc_ADC  =  fReader->getBranch<int32_t>("FTOF::adc","ADC");
  FTOF__adc_component  =  fReader->getBranch<int16_t>("FTOF::adc","component");
  FTOF__adc_layer  =  fReader->getBranch<int8_t>("FTOF::adc","layer");
  FTOF__adc_order  =  fReader->getBranch<int8_t>("FTOF::adc","order");
  FTOF__adc_ped  =  fReader->getBranch<int16_t>("FTOF::adc","ped");
  FTOF__adc_sector  =  fReader->getBranch<int8_t>("FTOF::adc","sector");
  FTOF__adc_time  =  fReader->getBranch<float>("FTOF::adc","time");
  FTOF__clusters_component  =  fReader->getBranch<int16_t>("FTOF::clusters","component");
  FTOF__clusters_energy  =  fReader->getBranch<float>("FTOF::clusters","energy");
  FTOF__clusters_energy_unc  =  fReader->getBranch<float>("FTOF::clusters","energy_unc");
  FTOF__clusters_id  =  fReader->getBranch<int16_t>("FTOF::clusters","id");
  FTOF__clusters_layer  =  fReader->getBranch<int8_t>("FTOF::clusters","layer");
  FTOF__clusters_sector  =  fReader->getBranch<int8_t>("FTOF::clusters","sector");
  FTOF__clusters_status  =  fReader->getBranch<int16_t>("FTOF::clusters","status");
  FTOF__clusters_time  =  fReader->getBranch<float>("FTOF::clusters","time");
  FTOF__clusters_time_unc  =  fReader->getBranch<float>("FTOF::clusters","time_unc");
  FTOF__clusters_trackid  =  fReader->getBranch<int16_t>("FTOF::clusters","trackid");
  FTOF__clusters_x  =  fReader->getBranch<float>("FTOF::clusters","x");
  FTOF__clusters_x_unc  =  fReader->getBranch<float>("FTOF::clusters","x_unc");
  FTOF__clusters_y  =  fReader->getBranch<float>("FTOF::clusters","y");
  FTOF__clusters_y_unc  =  fReader->getBranch<float>("FTOF::clusters","y_unc");
  FTOF__clusters_z  =  fReader->getBranch<float>("FTOF::clusters","z");
  FTOF__clusters_z_unc  =  fReader->getBranch<float>("FTOF::clusters","z_unc");
  FTOF__hits_adc_idx1  =  fReader->getBranch<int16_t>("FTOF::hits","adc_idx1");
  FTOF__hits_adc_idx2  =  fReader->getBranch<int16_t>("FTOF::hits","adc_idx2");
  FTOF__hits_component  =  fReader->getBranch<int16_t>("FTOF::hits","component");
  FTOF__hits_energy  =  fReader->getBranch<float>("FTOF::hits","energy");
  FTOF__hits_energy_unc  =  fReader->getBranch<float>("FTOF::hits","energy_unc");
  FTOF__hits_id  =  fReader->getBranch<int16_t>("FTOF::hits","id");
  FTOF__hits_layer  =  fReader->getBranch<int8_t>("FTOF::hits","layer");
  FTOF__hits_pathLength  =  fReader->getBranch<float>("FTOF::hits","pathLength");
  FTOF__hits_pathLengthThruBar  =  fReader->getBranch<float>("FTOF::hits","pathLengthThruBar");
  FTOF__hits_sector  =  fReader->getBranch<int8_t>("FTOF::hits","sector");
  FTOF__hits_status  =  fReader->getBranch<int16_t>("FTOF::hits","status");
  FTOF__hits_tdc_idx1  =  fReader->getBranch<int16_t>("FTOF::hits","tdc_idx1");
  FTOF__hits_tdc_idx2  =  fReader->getBranch<int16_t>("FTOF::hits","tdc_idx2");
  FTOF__hits_time  =  fReader->getBranch<float>("FTOF::hits","time");
  FTOF__hits_time_unc  =  fReader->getBranch<float>("FTOF::hits","time_unc");
  FTOF__hits_trackid  =  fReader->getBranch<int16_t>("FTOF::hits","trackid");
  FTOF__hits_tx  =  fReader->getBranch<float>("FTOF::hits","tx");
  FTOF__hits_ty  =  fReader->getBranch<float>("FTOF::hits","ty");
  FTOF__hits_tz  =  fReader->getBranch<float>("FTOF::hits","tz");
  FTOF__hits_x  =  fReader->getBranch<float>("FTOF::hits","x");
  FTOF__hits_x_unc  =  fReader->getBranch<float>("FTOF::hits","x_unc");
  FTOF__hits_y  =  fReader->getBranch<float>("FTOF::hits","y");
  FTOF__hits_y_unc  =  fReader->getBranch<float>("FTOF::hits","y_unc");
  FTOF__hits_z  =  fReader->getBranch<float>("FTOF::hits","z");
  FTOF__hits_z_unc  =  fReader->getBranch<float>("FTOF::hits","z_unc");
  FTOF__matchedclusters_EmaxAlgo_1B_tCorr  =  fReader->getBranch<float>("FTOF::matchedclusters","EmaxAlgo_1B_tCorr");
  FTOF__matchedclusters_clusSize_1A  =  fReader->getBranch<int16_t>("FTOF::matchedclusters","clusSize_1A");
  FTOF__matchedclusters_clusSize_1B  =  fReader->getBranch<int16_t>("FTOF::matchedclusters","clusSize_1B");
  FTOF__matchedclusters_clus_1Aid  =  fReader->getBranch<int16_t>("FTOF::matchedclusters","clus_1Aid");
  FTOF__matchedclusters_clus_1Bid  =  fReader->getBranch<int16_t>("FTOF::matchedclusters","clus_1Bid");
  FTOF__matchedclusters_midbarAlgo_1B_tCorr  =  fReader->getBranch<float>("FTOF::matchedclusters","midbarAlgo_1B_tCorr");
  FTOF__matchedclusters_paddle_id1A  =  fReader->getBranch<int16_t>("FTOF::matchedclusters","paddle_id1A");
  FTOF__matchedclusters_paddle_id1B  =  fReader->getBranch<int16_t>("FTOF::matchedclusters","paddle_id1B");
  FTOF__matchedclusters_sector  =  fReader->getBranch<int8_t>("FTOF::matchedclusters","sector");
  FTOF__matchedclusters_tminAlgo_1B_tCorr  =  fReader->getBranch<float>("FTOF::matchedclusters","tminAlgo_1B_tCorr");
  FTOF__rawhits_component  =  fReader->getBranch<int16_t>("FTOF::rawhits","component");
  FTOF__rawhits_energy_left  =  fReader->getBranch<float>("FTOF::rawhits","energy_left");
  FTOF__rawhits_energy_left_unc  =  fReader->getBranch<float>("FTOF::rawhits","energy_left_unc");
  FTOF__rawhits_energy_right  =  fReader->getBranch<float>("FTOF::rawhits","energy_right");
  FTOF__rawhits_energy_right_unc  =  fReader->getBranch<float>("FTOF::rawhits","energy_right_unc");
  FTOF__rawhits_id  =  fReader->getBranch<int16_t>("FTOF::rawhits","id");
  FTOF__rawhits_layer  =  fReader->getBranch<int8_t>("FTOF::rawhits","layer");
  FTOF__rawhits_sector  =  fReader->getBranch<int8_t>("FTOF::rawhits","sector");
  FTOF__rawhits_status  =  fReader->getBranch<int16_t>("FTOF::rawhits","status");
  FTOF__rawhits_time_left  =  fReader->getBranch<float>("FTOF::rawhits","time_left");
  FTOF__rawhits_time_left_unc  =  fReader->getBranch<float>("FTOF::rawhits","time_left_unc");
  FTOF__rawhits_time_right  =  fReader->getBranch<float>("FTOF::rawhits","time_right");
  FTOF__rawhits_time_right_unc  =  fReader->getBranch<float>("FTOF::rawhits","time_right_unc");
  FTOF__tdc_TDC  =  fReader->getBranch<int32_t>("FTOF::tdc","TDC");
  FTOF__tdc_component  =  fReader->getBranch<int16_t>("FTOF::tdc","component");
  FTOF__tdc_layer  =  fReader->getBranch<int8_t>("FTOF::tdc","layer");
  FTOF__tdc_order  =  fReader->getBranch<int8_t>("FTOF::tdc","order");
  FTOF__tdc_sector  =  fReader->getBranch<int8_t>("FTOF::tdc","sector");
  FTTRK__adc_ADC  =  fReader->getBranch<int32_t>("FTTRK::adc","ADC");
  FTTRK__adc_component  =  fReader->getBranch<int16_t>("FTTRK::adc","component");
  FTTRK__adc_integral  =  fReader->getBranch<int32_t>("FTTRK::adc","integral");
  FTTRK__adc_layer  =  fReader->getBranch<int8_t>("FTTRK::adc","layer");
  FTTRK__adc_order  =  fReader->getBranch<int8_t>("FTTRK::adc","order");
  FTTRK__adc_ped  =  fReader->getBranch<int16_t>("FTTRK::adc","ped");
  FTTRK__adc_sector  =  fReader->getBranch<int8_t>("FTTRK::adc","sector");
  FTTRK__adc_time  =  fReader->getBranch<float>("FTTRK::adc","time");
  FTTRK__adc_timestamp  =  fReader->getBranch<int64_t>("FTTRK::adc","timestamp");
  HEADER__info_fc  =  fReader->getBranch<float>("HEADER::info","fc");
  HEADER__info_fcg  =  fReader->getBranch<float>("HEADER::info","fcg");
  HEADER__info_helicity  =  fReader->getBranch<int8_t>("HEADER::info","helicity");
  HEADER__info_nevt  =  fReader->getBranch<int32_t>("HEADER::info","nevt");
  HEADER__info_nrun  =  fReader->getBranch<int32_t>("HEADER::info","nrun");
  HEADER__info_rastr1  =  fReader->getBranch<int16_t>("HEADER::info","rastr1");
  HEADER__info_rastr2  =  fReader->getBranch<int16_t>("HEADER::info","rastr2");
  HEADER__info_stt  =  fReader->getBranch<float>("HEADER::info","stt");
  HEADER__info_trigger  =  fReader->getBranch<int32_t>("HEADER::info","trigger");
  HEL__adc_ADC  =  fReader->getBranch<int32_t>("HEL::adc","ADC");
  HEL__adc_component  =  fReader->getBranch<int16_t>("HEL::adc","component");
  HEL__adc_layer  =  fReader->getBranch<int8_t>("HEL::adc","layer");
  HEL__adc_order  =  fReader->getBranch<int8_t>("HEL::adc","order");
  HEL__adc_ped  =  fReader->getBranch<int16_t>("HEL::adc","ped");
  HEL__adc_sector  =  fReader->getBranch<int8_t>("HEL::adc","sector");
  HEL__adc_time  =  fReader->getBranch<float>("HEL::adc","time");
  HTCC__adc_ADC  =  fReader->getBranch<int32_t>("HTCC::adc","ADC");
  HTCC__adc_component  =  fReader->getBranch<int16_t>("HTCC::adc","component");
  HTCC__adc_layer  =  fReader->getBranch<int8_t>("HTCC::adc","layer");
  HTCC__adc_order  =  fReader->getBranch<int8_t>("HTCC::adc","order");
  HTCC__adc_ped  =  fReader->getBranch<int16_t>("HTCC::adc","ped");
  HTCC__adc_sector  =  fReader->getBranch<int8_t>("HTCC::adc","sector");
  HTCC__adc_time  =  fReader->getBranch<float>("HTCC::adc","time");
  HTCC__rec_dphi  =  fReader->getBranch<float>("HTCC::rec","dphi");
  HTCC__rec_dtheta  =  fReader->getBranch<float>("HTCC::rec","dtheta");
  HTCC__rec_id  =  fReader->getBranch<int16_t>("HTCC::rec","id");
  HTCC__rec_maxphi  =  fReader->getBranch<int16_t>("HTCC::rec","maxphi");
  HTCC__rec_maxtheta  =  fReader->getBranch<int16_t>("HTCC::rec","maxtheta");
  HTCC__rec_minphi  =  fReader->getBranch<int16_t>("HTCC::rec","minphi");
  HTCC__rec_mintheta  =  fReader->getBranch<int16_t>("HTCC::rec","mintheta");
  HTCC__rec_nhits  =  fReader->getBranch<int16_t>("HTCC::rec","nhits");
  HTCC__rec_nphe  =  fReader->getBranch<float>("HTCC::rec","nphe");
  HTCC__rec_nphi  =  fReader->getBranch<int16_t>("HTCC::rec","nphi");
  HTCC__rec_ntheta  =  fReader->getBranch<int16_t>("HTCC::rec","ntheta");
  HTCC__rec_phi  =  fReader->getBranch<float>("HTCC::rec","phi");
  HTCC__rec_theta  =  fReader->getBranch<float>("HTCC::rec","theta");
  HTCC__rec_time  =  fReader->getBranch<float>("HTCC::rec","time");
  HTCC__rec_x  =  fReader->getBranch<float>("HTCC::rec","x");
  HTCC__rec_y  =  fReader->getBranch<float>("HTCC::rec","y");
  HTCC__rec_z  =  fReader->getBranch<float>("HTCC::rec","z");
  HTCC__tdc_TDC  =  fReader->getBranch<int32_t>("HTCC::tdc","TDC");
  HTCC__tdc_component  =  fReader->getBranch<int16_t>("HTCC::tdc","component");
  HTCC__tdc_layer  =  fReader->getBranch<int8_t>("HTCC::tdc","layer");
  HTCC__tdc_order  =  fReader->getBranch<int8_t>("HTCC::tdc","order");
  HTCC__tdc_sector  =  fReader->getBranch<int8_t>("HTCC::tdc","sector");
  HitBasedTrkg__HBClusters_Hit10_ID  =  fReader->getBranch<int16_t>("HitBasedTrkg::HBClusters","Hit10_ID");
  HitBasedTrkg__HBClusters_Hit11_ID  =  fReader->getBranch<int16_t>("HitBasedTrkg::HBClusters","Hit11_ID");
  HitBasedTrkg__HBClusters_Hit12_ID  =  fReader->getBranch<int16_t>("HitBasedTrkg::HBClusters","Hit12_ID");
  HitBasedTrkg__HBClusters_Hit1_ID  =  fReader->getBranch<int16_t>("HitBasedTrkg::HBClusters","Hit1_ID");
  HitBasedTrkg__HBClusters_Hit2_ID  =  fReader->getBranch<int16_t>("HitBasedTrkg::HBClusters","Hit2_ID");
  HitBasedTrkg__HBClusters_Hit3_ID  =  fReader->getBranch<int16_t>("HitBasedTrkg::HBClusters","Hit3_ID");
  HitBasedTrkg__HBClusters_Hit4_ID  =  fReader->getBranch<int16_t>("HitBasedTrkg::HBClusters","Hit4_ID");
  HitBasedTrkg__HBClusters_Hit5_ID  =  fReader->getBranch<int16_t>("HitBasedTrkg::HBClusters","Hit5_ID");
  HitBasedTrkg__HBClusters_Hit6_ID  =  fReader->getBranch<int16_t>("HitBasedTrkg::HBClusters","Hit6_ID");
  HitBasedTrkg__HBClusters_Hit7_ID  =  fReader->getBranch<int16_t>("HitBasedTrkg::HBClusters","Hit7_ID");
  HitBasedTrkg__HBClusters_Hit8_ID  =  fReader->getBranch<int16_t>("HitBasedTrkg::HBClusters","Hit8_ID");
  HitBasedTrkg__HBClusters_Hit9_ID  =  fReader->getBranch<int16_t>("HitBasedTrkg::HBClusters","Hit9_ID");
  HitBasedTrkg__HBClusters_avgWire  =  fReader->getBranch<float>("HitBasedTrkg::HBClusters","avgWire");
  HitBasedTrkg__HBClusters_fitChisqProb  =  fReader->getBranch<float>("HitBasedTrkg::HBClusters","fitChisqProb");
  HitBasedTrkg__HBClusters_fitInterc  =  fReader->getBranch<float>("HitBasedTrkg::HBClusters","fitInterc");
  HitBasedTrkg__HBClusters_fitIntercErr  =  fReader->getBranch<float>("HitBasedTrkg::HBClusters","fitIntercErr");
  HitBasedTrkg__HBClusters_fitSlope  =  fReader->getBranch<float>("HitBasedTrkg::HBClusters","fitSlope");
  HitBasedTrkg__HBClusters_fitSlopeErr  =  fReader->getBranch<float>("HitBasedTrkg::HBClusters","fitSlopeErr");
  HitBasedTrkg__HBClusters_id  =  fReader->getBranch<int16_t>("HitBasedTrkg::HBClusters","id");
  HitBasedTrkg__HBClusters_sector  =  fReader->getBranch<int8_t>("HitBasedTrkg::HBClusters","sector");
  HitBasedTrkg__HBClusters_size  =  fReader->getBranch<int8_t>("HitBasedTrkg::HBClusters","size");
  HitBasedTrkg__HBClusters_status  =  fReader->getBranch<int16_t>("HitBasedTrkg::HBClusters","status");
  HitBasedTrkg__HBClusters_superlayer  =  fReader->getBranch<int8_t>("HitBasedTrkg::HBClusters","superlayer");
  HitBasedTrkg__HBCrosses_Segment1_ID  =  fReader->getBranch<int16_t>("HitBasedTrkg::HBCrosses","Segment1_ID");
  HitBasedTrkg__HBCrosses_Segment2_ID  =  fReader->getBranch<int16_t>("HitBasedTrkg::HBCrosses","Segment2_ID");
  HitBasedTrkg__HBCrosses_err_ux  =  fReader->getBranch<float>("HitBasedTrkg::HBCrosses","err_ux");
  HitBasedTrkg__HBCrosses_err_uy  =  fReader->getBranch<float>("HitBasedTrkg::HBCrosses","err_uy");
  HitBasedTrkg__HBCrosses_err_uz  =  fReader->getBranch<float>("HitBasedTrkg::HBCrosses","err_uz");
  HitBasedTrkg__HBCrosses_err_x  =  fReader->getBranch<float>("HitBasedTrkg::HBCrosses","err_x");
  HitBasedTrkg__HBCrosses_err_y  =  fReader->getBranch<float>("HitBasedTrkg::HBCrosses","err_y");
  HitBasedTrkg__HBCrosses_err_z  =  fReader->getBranch<float>("HitBasedTrkg::HBCrosses","err_z");
  HitBasedTrkg__HBCrosses_id  =  fReader->getBranch<int16_t>("HitBasedTrkg::HBCrosses","id");
  HitBasedTrkg__HBCrosses_region  =  fReader->getBranch<int8_t>("HitBasedTrkg::HBCrosses","region");
  HitBasedTrkg__HBCrosses_sector  =  fReader->getBranch<int8_t>("HitBasedTrkg::HBCrosses","sector");
  HitBasedTrkg__HBCrosses_status  =  fReader->getBranch<int16_t>("HitBasedTrkg::HBCrosses","status");
  HitBasedTrkg__HBCrosses_ux  =  fReader->getBranch<float>("HitBasedTrkg::HBCrosses","ux");
  HitBasedTrkg__HBCrosses_uy  =  fReader->getBranch<float>("HitBasedTrkg::HBCrosses","uy");
  HitBasedTrkg__HBCrosses_uz  =  fReader->getBranch<float>("HitBasedTrkg::HBCrosses","uz");
  HitBasedTrkg__HBCrosses_x  =  fReader->getBranch<float>("HitBasedTrkg::HBCrosses","x");
  HitBasedTrkg__HBCrosses_y  =  fReader->getBranch<float>("HitBasedTrkg::HBCrosses","y");
  HitBasedTrkg__HBCrosses_z  =  fReader->getBranch<float>("HitBasedTrkg::HBCrosses","z");
  HitBasedTrkg__HBHits_B  =  fReader->getBranch<float>("HitBasedTrkg::HBHits","B");
  HitBasedTrkg__HBHits_LR  =  fReader->getBranch<int8_t>("HitBasedTrkg::HBHits","LR");
  HitBasedTrkg__HBHits_LocX  =  fReader->getBranch<float>("HitBasedTrkg::HBHits","LocX");
  HitBasedTrkg__HBHits_LocY  =  fReader->getBranch<float>("HitBasedTrkg::HBHits","LocY");
  HitBasedTrkg__HBHits_TDC  =  fReader->getBranch<int32_t>("HitBasedTrkg::HBHits","TDC");
  HitBasedTrkg__HBHits_TFlight  =  fReader->getBranch<float>("HitBasedTrkg::HBHits","TFlight");
  HitBasedTrkg__HBHits_TProp  =  fReader->getBranch<float>("HitBasedTrkg::HBHits","TProp");
  HitBasedTrkg__HBHits_X  =  fReader->getBranch<float>("HitBasedTrkg::HBHits","X");
  HitBasedTrkg__HBHits_Z  =  fReader->getBranch<float>("HitBasedTrkg::HBHits","Z");
  HitBasedTrkg__HBHits_clusterID  =  fReader->getBranch<int16_t>("HitBasedTrkg::HBHits","clusterID");
  HitBasedTrkg__HBHits_docaError  =  fReader->getBranch<float>("HitBasedTrkg::HBHits","docaError");
  HitBasedTrkg__HBHits_id  =  fReader->getBranch<int16_t>("HitBasedTrkg::HBHits","id");
  HitBasedTrkg__HBHits_layer  =  fReader->getBranch<int8_t>("HitBasedTrkg::HBHits","layer");
  HitBasedTrkg__HBHits_sector  =  fReader->getBranch<int8_t>("HitBasedTrkg::HBHits","sector");
  HitBasedTrkg__HBHits_status  =  fReader->getBranch<int16_t>("HitBasedTrkg::HBHits","status");
  HitBasedTrkg__HBHits_superlayer  =  fReader->getBranch<int8_t>("HitBasedTrkg::HBHits","superlayer");
  HitBasedTrkg__HBHits_trkDoca  =  fReader->getBranch<float>("HitBasedTrkg::HBHits","trkDoca");
  HitBasedTrkg__HBHits_trkID  =  fReader->getBranch<int8_t>("HitBasedTrkg::HBHits","trkID");
  HitBasedTrkg__HBHits_wire  =  fReader->getBranch<int16_t>("HitBasedTrkg::HBHits","wire");
  HitBasedTrkg__HBSegmentTrajectory_layer  =  fReader->getBranch<int8_t>("HitBasedTrkg::HBSegmentTrajectory","layer");
  HitBasedTrkg__HBSegmentTrajectory_matchedHitID  =  fReader->getBranch<int16_t>("HitBasedTrkg::HBSegmentTrajectory","matchedHitID");
  HitBasedTrkg__HBSegmentTrajectory_sector  =  fReader->getBranch<int8_t>("HitBasedTrkg::HBSegmentTrajectory","sector");
  HitBasedTrkg__HBSegmentTrajectory_segmentID  =  fReader->getBranch<int16_t>("HitBasedTrkg::HBSegmentTrajectory","segmentID");
  HitBasedTrkg__HBSegmentTrajectory_superlayer  =  fReader->getBranch<int8_t>("HitBasedTrkg::HBSegmentTrajectory","superlayer");
  HitBasedTrkg__HBSegmentTrajectory_trkDoca  =  fReader->getBranch<float>("HitBasedTrkg::HBSegmentTrajectory","trkDoca");
  HitBasedTrkg__HBSegments_Cluster_ID  =  fReader->getBranch<int16_t>("HitBasedTrkg::HBSegments","Cluster_ID");
  HitBasedTrkg__HBSegments_Hit10_ID  =  fReader->getBranch<int16_t>("HitBasedTrkg::HBSegments","Hit10_ID");
  HitBasedTrkg__HBSegments_Hit11_ID  =  fReader->getBranch<int16_t>("HitBasedTrkg::HBSegments","Hit11_ID");
  HitBasedTrkg__HBSegments_Hit12_ID  =  fReader->getBranch<int16_t>("HitBasedTrkg::HBSegments","Hit12_ID");
  HitBasedTrkg__HBSegments_Hit1_ID  =  fReader->getBranch<int16_t>("HitBasedTrkg::HBSegments","Hit1_ID");
  HitBasedTrkg__HBSegments_Hit2_ID  =  fReader->getBranch<int16_t>("HitBasedTrkg::HBSegments","Hit2_ID");
  HitBasedTrkg__HBSegments_Hit3_ID  =  fReader->getBranch<int16_t>("HitBasedTrkg::HBSegments","Hit3_ID");
  HitBasedTrkg__HBSegments_Hit4_ID  =  fReader->getBranch<int16_t>("HitBasedTrkg::HBSegments","Hit4_ID");
  HitBasedTrkg__HBSegments_Hit5_ID  =  fReader->getBranch<int16_t>("HitBasedTrkg::HBSegments","Hit5_ID");
  HitBasedTrkg__HBSegments_Hit6_ID  =  fReader->getBranch<int16_t>("HitBasedTrkg::HBSegments","Hit6_ID");
  HitBasedTrkg__HBSegments_Hit7_ID  =  fReader->getBranch<int16_t>("HitBasedTrkg::HBSegments","Hit7_ID");
  HitBasedTrkg__HBSegments_Hit8_ID  =  fReader->getBranch<int16_t>("HitBasedTrkg::HBSegments","Hit8_ID");
  HitBasedTrkg__HBSegments_Hit9_ID  =  fReader->getBranch<int16_t>("HitBasedTrkg::HBSegments","Hit9_ID");
  HitBasedTrkg__HBSegments_SegEndPoint1X  =  fReader->getBranch<float>("HitBasedTrkg::HBSegments","SegEndPoint1X");
  HitBasedTrkg__HBSegments_SegEndPoint1Z  =  fReader->getBranch<float>("HitBasedTrkg::HBSegments","SegEndPoint1Z");
  HitBasedTrkg__HBSegments_SegEndPoint2X  =  fReader->getBranch<float>("HitBasedTrkg::HBSegments","SegEndPoint2X");
  HitBasedTrkg__HBSegments_SegEndPoint2Z  =  fReader->getBranch<float>("HitBasedTrkg::HBSegments","SegEndPoint2Z");
  HitBasedTrkg__HBSegments_avgWire  =  fReader->getBranch<float>("HitBasedTrkg::HBSegments","avgWire");
  HitBasedTrkg__HBSegments_fitChisqProb  =  fReader->getBranch<float>("HitBasedTrkg::HBSegments","fitChisqProb");
  HitBasedTrkg__HBSegments_fitInterc  =  fReader->getBranch<float>("HitBasedTrkg::HBSegments","fitInterc");
  HitBasedTrkg__HBSegments_fitIntercErr  =  fReader->getBranch<float>("HitBasedTrkg::HBSegments","fitIntercErr");
  HitBasedTrkg__HBSegments_fitSlope  =  fReader->getBranch<float>("HitBasedTrkg::HBSegments","fitSlope");
  HitBasedTrkg__HBSegments_fitSlopeErr  =  fReader->getBranch<float>("HitBasedTrkg::HBSegments","fitSlopeErr");
  HitBasedTrkg__HBSegments_id  =  fReader->getBranch<int16_t>("HitBasedTrkg::HBSegments","id");
  HitBasedTrkg__HBSegments_sector  =  fReader->getBranch<int8_t>("HitBasedTrkg::HBSegments","sector");
  HitBasedTrkg__HBSegments_size  =  fReader->getBranch<int8_t>("HitBasedTrkg::HBSegments","size");
  HitBasedTrkg__HBSegments_status  =  fReader->getBranch<int16_t>("HitBasedTrkg::HBSegments","status");
  HitBasedTrkg__HBSegments_superlayer  =  fReader->getBranch<int8_t>("HitBasedTrkg::HBSegments","superlayer");
  HitBasedTrkg__HBTracks_Cross1_ID  =  fReader->getBranch<int16_t>("HitBasedTrkg::HBTracks","Cross1_ID");
  HitBasedTrkg__HBTracks_Cross2_ID  =  fReader->getBranch<int16_t>("HitBasedTrkg::HBTracks","Cross2_ID");
  HitBasedTrkg__HBTracks_Cross3_ID  =  fReader->getBranch<int16_t>("HitBasedTrkg::HBTracks","Cross3_ID");
  HitBasedTrkg__HBTracks_Vtx0_x  =  fReader->getBranch<float>("HitBasedTrkg::HBTracks","Vtx0_x");
  HitBasedTrkg__HBTracks_Vtx0_y  =  fReader->getBranch<float>("HitBasedTrkg::HBTracks","Vtx0_y");
  HitBasedTrkg__HBTracks_Vtx0_z  =  fReader->getBranch<float>("HitBasedTrkg::HBTracks","Vtx0_z");
  HitBasedTrkg__HBTracks_c1_ux  =  fReader->getBranch<float>("HitBasedTrkg::HBTracks","c1_ux");
  HitBasedTrkg__HBTracks_c1_uy  =  fReader->getBranch<float>("HitBasedTrkg::HBTracks","c1_uy");
  HitBasedTrkg__HBTracks_c1_uz  =  fReader->getBranch<float>("HitBasedTrkg::HBTracks","c1_uz");
  HitBasedTrkg__HBTracks_c1_x  =  fReader->getBranch<float>("HitBasedTrkg::HBTracks","c1_x");
  HitBasedTrkg__HBTracks_c1_y  =  fReader->getBranch<float>("HitBasedTrkg::HBTracks","c1_y");
  HitBasedTrkg__HBTracks_c1_z  =  fReader->getBranch<float>("HitBasedTrkg::HBTracks","c1_z");
  HitBasedTrkg__HBTracks_c3_ux  =  fReader->getBranch<float>("HitBasedTrkg::HBTracks","c3_ux");
  HitBasedTrkg__HBTracks_c3_uy  =  fReader->getBranch<float>("HitBasedTrkg::HBTracks","c3_uy");
  HitBasedTrkg__HBTracks_c3_uz  =  fReader->getBranch<float>("HitBasedTrkg::HBTracks","c3_uz");
  HitBasedTrkg__HBTracks_c3_x  =  fReader->getBranch<float>("HitBasedTrkg::HBTracks","c3_x");
  HitBasedTrkg__HBTracks_c3_y  =  fReader->getBranch<float>("HitBasedTrkg::HBTracks","c3_y");
  HitBasedTrkg__HBTracks_c3_z  =  fReader->getBranch<float>("HitBasedTrkg::HBTracks","c3_z");
  HitBasedTrkg__HBTracks_chi2  =  fReader->getBranch<float>("HitBasedTrkg::HBTracks","chi2");
  HitBasedTrkg__HBTracks_id  =  fReader->getBranch<int16_t>("HitBasedTrkg::HBTracks","id");
  HitBasedTrkg__HBTracks_ndf  =  fReader->getBranch<int16_t>("HitBasedTrkg::HBTracks","ndf");
  HitBasedTrkg__HBTracks_p0_x  =  fReader->getBranch<float>("HitBasedTrkg::HBTracks","p0_x");
  HitBasedTrkg__HBTracks_p0_y  =  fReader->getBranch<float>("HitBasedTrkg::HBTracks","p0_y");
  HitBasedTrkg__HBTracks_p0_z  =  fReader->getBranch<float>("HitBasedTrkg::HBTracks","p0_z");
  HitBasedTrkg__HBTracks_pathlength  =  fReader->getBranch<float>("HitBasedTrkg::HBTracks","pathlength");
  HitBasedTrkg__HBTracks_q  =  fReader->getBranch<int8_t>("HitBasedTrkg::HBTracks","q");
  HitBasedTrkg__HBTracks_sector  =  fReader->getBranch<int8_t>("HitBasedTrkg::HBTracks","sector");
  HitBasedTrkg__HBTracks_status  =  fReader->getBranch<int16_t>("HitBasedTrkg::HBTracks","status");
  HitBasedTrkg__HBTracks_t1_px  =  fReader->getBranch<float>("HitBasedTrkg::HBTracks","t1_px");
  HitBasedTrkg__HBTracks_t1_py  =  fReader->getBranch<float>("HitBasedTrkg::HBTracks","t1_py");
  HitBasedTrkg__HBTracks_t1_pz  =  fReader->getBranch<float>("HitBasedTrkg::HBTracks","t1_pz");
  HitBasedTrkg__HBTracks_t1_x  =  fReader->getBranch<float>("HitBasedTrkg::HBTracks","t1_x");
  HitBasedTrkg__HBTracks_t1_y  =  fReader->getBranch<float>("HitBasedTrkg::HBTracks","t1_y");
  HitBasedTrkg__HBTracks_t1_z  =  fReader->getBranch<float>("HitBasedTrkg::HBTracks","t1_z");
  LTCC__adc_ADC  =  fReader->getBranch<int32_t>("LTCC::adc","ADC");
  LTCC__adc_component  =  fReader->getBranch<int16_t>("LTCC::adc","component");
  LTCC__adc_layer  =  fReader->getBranch<int8_t>("LTCC::adc","layer");
  LTCC__adc_order  =  fReader->getBranch<int8_t>("LTCC::adc","order");
  LTCC__adc_ped  =  fReader->getBranch<int16_t>("LTCC::adc","ped");
  LTCC__adc_sector  =  fReader->getBranch<int8_t>("LTCC::adc","sector");
  LTCC__adc_time  =  fReader->getBranch<float>("LTCC::adc","time");
  LTCC__clusters_id  =  fReader->getBranch<int16_t>("LTCC::clusters","id");
  LTCC__clusters_maxPhi  =  fReader->getBranch<float>("LTCC::clusters","maxPhi");
  LTCC__clusters_maxTheta  =  fReader->getBranch<float>("LTCC::clusters","maxTheta");
  LTCC__clusters_minPhi  =  fReader->getBranch<float>("LTCC::clusters","minPhi");
  LTCC__clusters_minTheta  =  fReader->getBranch<float>("LTCC::clusters","minTheta");
  LTCC__clusters_nHits  =  fReader->getBranch<int16_t>("LTCC::clusters","nHits");
  LTCC__clusters_nphe  =  fReader->getBranch<float>("LTCC::clusters","nphe");
  LTCC__clusters_sector  =  fReader->getBranch<int8_t>("LTCC::clusters","sector");
  LTCC__clusters_segment  =  fReader->getBranch<int16_t>("LTCC::clusters","segment");
  LTCC__clusters_status  =  fReader->getBranch<int8_t>("LTCC::clusters","status");
  LTCC__clusters_time  =  fReader->getBranch<float>("LTCC::clusters","time");
  LTCC__clusters_x  =  fReader->getBranch<float>("LTCC::clusters","x");
  LTCC__clusters_y  =  fReader->getBranch<float>("LTCC::clusters","y");
  LTCC__clusters_z  =  fReader->getBranch<float>("LTCC::clusters","z");
  LTCC__tdc_TDC  =  fReader->getBranch<int32_t>("LTCC::tdc","TDC");
  LTCC__tdc_component  =  fReader->getBranch<int16_t>("LTCC::tdc","component");
  LTCC__tdc_layer  =  fReader->getBranch<int8_t>("LTCC::tdc","layer");
  LTCC__tdc_order  =  fReader->getBranch<int8_t>("LTCC::tdc","order");
  LTCC__tdc_sector  =  fReader->getBranch<int8_t>("LTCC::tdc","sector");
  MC__Event_atarget  =  fReader->getBranch<int16_t>("MC::Event","atarget");
  MC__Event_btype  =  fReader->getBranch<int16_t>("MC::Event","btype");
  MC__Event_ebeam  =  fReader->getBranch<float>("MC::Event","ebeam");
  MC__Event_npart  =  fReader->getBranch<int16_t>("MC::Event","npart");
  MC__Event_pbeam  =  fReader->getBranch<float>("MC::Event","pbeam");
  MC__Event_processid  =  fReader->getBranch<int16_t>("MC::Event","processid");
  MC__Event_ptarget  =  fReader->getBranch<float>("MC::Event","ptarget");
  MC__Event_targetid  =  fReader->getBranch<int16_t>("MC::Event","targetid");
  MC__Event_weight  =  fReader->getBranch<float>("MC::Event","weight");
  MC__Event_ztarget  =  fReader->getBranch<int16_t>("MC::Event","ztarget");
  MC__Header_event  =  fReader->getBranch<int32_t>("MC::Header","event");
  MC__Header_helicity  =  fReader->getBranch<float>("MC::Header","helicity");
  MC__Header_run  =  fReader->getBranch<int32_t>("MC::Header","run");
  MC__Header_type  =  fReader->getBranch<int8_t>("MC::Header","type");
  MC__Lund_E  =  fReader->getBranch<float>("MC::Lund","E");
  MC__Lund_daughter  =  fReader->getBranch<int8_t>("MC::Lund","daughter");
  MC__Lund_index  =  fReader->getBranch<int8_t>("MC::Lund","index");
  MC__Lund_ltime  =  fReader->getBranch<float>("MC::Lund","ltime");
  MC__Lund_mass  =  fReader->getBranch<float>("MC::Lund","mass");
  MC__Lund_parent  =  fReader->getBranch<int8_t>("MC::Lund","parent");
  MC__Lund_pid  =  fReader->getBranch<int32_t>("MC::Lund","pid");
  MC__Lund_px  =  fReader->getBranch<float>("MC::Lund","px");
  MC__Lund_py  =  fReader->getBranch<float>("MC::Lund","py");
  MC__Lund_pz  =  fReader->getBranch<float>("MC::Lund","pz");
  MC__Lund_type  =  fReader->getBranch<int8_t>("MC::Lund","type");
  MC__Lund_vx  =  fReader->getBranch<float>("MC::Lund","vx");
  MC__Lund_vy  =  fReader->getBranch<float>("MC::Lund","vy");
  MC__Lund_vz  =  fReader->getBranch<float>("MC::Lund","vz");
  MC__Particle_pid  =  fReader->getBranch<int32_t>("MC::Particle","pid");
  MC__Particle_px  =  fReader->getBranch<float>("MC::Particle","px");
  MC__Particle_py  =  fReader->getBranch<float>("MC::Particle","py");
  MC__Particle_pz  =  fReader->getBranch<float>("MC::Particle","pz");
  MC__Particle_vt  =  fReader->getBranch<float>("MC::Particle","vt");
  MC__Particle_vx  =  fReader->getBranch<float>("MC::Particle","vx");
  MC__Particle_vy  =  fReader->getBranch<float>("MC::Particle","vy");
  MC__Particle_vz  =  fReader->getBranch<float>("MC::Particle","vz");
  MC__True_avgLx  =  fReader->getBranch<float>("MC::True","avgLx");
  MC__True_avgLy  =  fReader->getBranch<float>("MC::True","avgLy");
  MC__True_avgLz  =  fReader->getBranch<float>("MC::True","avgLz");
  MC__True_avgT  =  fReader->getBranch<float>("MC::True","avgT");
  MC__True_avgX  =  fReader->getBranch<float>("MC::True","avgX");
  MC__True_avgY  =  fReader->getBranch<float>("MC::True","avgY");
  MC__True_avgZ  =  fReader->getBranch<float>("MC::True","avgZ");
  MC__True_detector  =  fReader->getBranch<int8_t>("MC::True","detector");
  MC__True_hitn  =  fReader->getBranch<int32_t>("MC::True","hitn");
  MC__True_mpid  =  fReader->getBranch<int32_t>("MC::True","mpid");
  MC__True_mtid  =  fReader->getBranch<int32_t>("MC::True","mtid");
  MC__True_mvx  =  fReader->getBranch<float>("MC::True","mvx");
  MC__True_mvy  =  fReader->getBranch<float>("MC::True","mvy");
  MC__True_mvz  =  fReader->getBranch<float>("MC::True","mvz");
  MC__True_nsteps  =  fReader->getBranch<int32_t>("MC::True","nsteps");
  MC__True_otid  =  fReader->getBranch<int32_t>("MC::True","otid");
  MC__True_pid  =  fReader->getBranch<int32_t>("MC::True","pid");
  MC__True_procID  =  fReader->getBranch<int32_t>("MC::True","procID");
  MC__True_px  =  fReader->getBranch<float>("MC::True","px");
  MC__True_py  =  fReader->getBranch<float>("MC::True","py");
  MC__True_pz  =  fReader->getBranch<float>("MC::True","pz");
  MC__True_tid  =  fReader->getBranch<int32_t>("MC::True","tid");
  MC__True_totEdep  =  fReader->getBranch<float>("MC::True","totEdep");
  MC__True_trackE  =  fReader->getBranch<float>("MC::True","trackE");
  MC__True_vx  =  fReader->getBranch<float>("MC::True","vx");
  MC__True_vy  =  fReader->getBranch<float>("MC::True","vy");
  MC__True_vz  =  fReader->getBranch<float>("MC::True","vz");
  RAW__adc_ADC  =  fReader->getBranch<int32_t>("RAW::adc","ADC");
  RAW__adc_channel  =  fReader->getBranch<int16_t>("RAW::adc","channel");
  RAW__adc_crate  =  fReader->getBranch<int8_t>("RAW::adc","crate");
  RAW__adc_ped  =  fReader->getBranch<int16_t>("RAW::adc","ped");
  RAW__adc_slot  =  fReader->getBranch<int8_t>("RAW::adc","slot");
  RAW__adc_time  =  fReader->getBranch<float>("RAW::adc","time");
  RAW__scaler_channel  =  fReader->getBranch<int16_t>("RAW::scaler","channel");
  RAW__scaler_crate  =  fReader->getBranch<int8_t>("RAW::scaler","crate");
  RAW__scaler_helicity  =  fReader->getBranch<int8_t>("RAW::scaler","helicity");
  RAW__scaler_quartet  =  fReader->getBranch<int8_t>("RAW::scaler","quartet");
  RAW__scaler_slot  =  fReader->getBranch<int8_t>("RAW::scaler","slot");
  RAW__scaler_value  =  fReader->getBranch<int32_t>("RAW::scaler","value");
  RAW__tdc_TDC  =  fReader->getBranch<int32_t>("RAW::tdc","TDC");
  RAW__tdc_channel  =  fReader->getBranch<int16_t>("RAW::tdc","channel");
  RAW__tdc_crate  =  fReader->getBranch<int8_t>("RAW::tdc","crate");
  RAW__tdc_slot  =  fReader->getBranch<int8_t>("RAW::tdc","slot");
  RAW__vtp_channel  =  fReader->getBranch<int16_t>("RAW::vtp","channel");
  RAW__vtp_crate  =  fReader->getBranch<int8_t>("RAW::vtp","crate");
  RAW__vtp_slot  =  fReader->getBranch<int8_t>("RAW::vtp","slot");
  RAW__vtp_word  =  fReader->getBranch<int32_t>("RAW::vtp","word");
  REC__Calorimeter_chi2  =  fReader->getBranch<float>("REC::Calorimeter","chi2");
  REC__Calorimeter_detector  =  fReader->getBranch<int8_t>("REC::Calorimeter","detector");
  REC__Calorimeter_du  =  fReader->getBranch<float>("REC::Calorimeter","du");
  REC__Calorimeter_dv  =  fReader->getBranch<float>("REC::Calorimeter","dv");
  REC__Calorimeter_dw  =  fReader->getBranch<float>("REC::Calorimeter","dw");
  REC__Calorimeter_energy  =  fReader->getBranch<float>("REC::Calorimeter","energy");
  REC__Calorimeter_hx  =  fReader->getBranch<float>("REC::Calorimeter","hx");
  REC__Calorimeter_hy  =  fReader->getBranch<float>("REC::Calorimeter","hy");
  REC__Calorimeter_hz  =  fReader->getBranch<float>("REC::Calorimeter","hz");
  REC__Calorimeter_index  =  fReader->getBranch<int16_t>("REC::Calorimeter","index");
  REC__Calorimeter_layer  =  fReader->getBranch<int8_t>("REC::Calorimeter","layer");
  REC__Calorimeter_lu  =  fReader->getBranch<float>("REC::Calorimeter","lu");
  REC__Calorimeter_lv  =  fReader->getBranch<float>("REC::Calorimeter","lv");
  REC__Calorimeter_lw  =  fReader->getBranch<float>("REC::Calorimeter","lw");
  REC__Calorimeter_m2u  =  fReader->getBranch<float>("REC::Calorimeter","m2u");
  REC__Calorimeter_m2v  =  fReader->getBranch<float>("REC::Calorimeter","m2v");
  REC__Calorimeter_m2w  =  fReader->getBranch<float>("REC::Calorimeter","m2w");
  REC__Calorimeter_m3u  =  fReader->getBranch<float>("REC::Calorimeter","m3u");
  REC__Calorimeter_m3v  =  fReader->getBranch<float>("REC::Calorimeter","m3v");
  REC__Calorimeter_m3w  =  fReader->getBranch<float>("REC::Calorimeter","m3w");
  REC__Calorimeter_path  =  fReader->getBranch<float>("REC::Calorimeter","path");
  REC__Calorimeter_pindex  =  fReader->getBranch<int16_t>("REC::Calorimeter","pindex");
  REC__Calorimeter_sector  =  fReader->getBranch<int8_t>("REC::Calorimeter","sector");
  REC__Calorimeter_status  =  fReader->getBranch<int16_t>("REC::Calorimeter","status");
  REC__Calorimeter_time  =  fReader->getBranch<float>("REC::Calorimeter","time");
  REC__Calorimeter_x  =  fReader->getBranch<float>("REC::Calorimeter","x");
  REC__Calorimeter_y  =  fReader->getBranch<float>("REC::Calorimeter","y");
  REC__Calorimeter_z  =  fReader->getBranch<float>("REC::Calorimeter","z");
  REC__Cherenkov_chi2  =  fReader->getBranch<float>("REC::Cherenkov","chi2");
  REC__Cherenkov_detector  =  fReader->getBranch<int8_t>("REC::Cherenkov","detector");
  REC__Cherenkov_dphi  =  fReader->getBranch<float>("REC::Cherenkov","dphi");
  REC__Cherenkov_dtheta  =  fReader->getBranch<float>("REC::Cherenkov","dtheta");
  REC__Cherenkov_index  =  fReader->getBranch<int16_t>("REC::Cherenkov","index");
  REC__Cherenkov_nphe  =  fReader->getBranch<float>("REC::Cherenkov","nphe");
  REC__Cherenkov_path  =  fReader->getBranch<float>("REC::Cherenkov","path");
  REC__Cherenkov_phi  =  fReader->getBranch<float>("REC::Cherenkov","phi");
  REC__Cherenkov_pindex  =  fReader->getBranch<int16_t>("REC::Cherenkov","pindex");
  REC__Cherenkov_sector  =  fReader->getBranch<int8_t>("REC::Cherenkov","sector");
  REC__Cherenkov_status  =  fReader->getBranch<int16_t>("REC::Cherenkov","status");
  REC__Cherenkov_theta  =  fReader->getBranch<float>("REC::Cherenkov","theta");
  REC__Cherenkov_time  =  fReader->getBranch<float>("REC::Cherenkov","time");
  REC__Cherenkov_x  =  fReader->getBranch<float>("REC::Cherenkov","x");
  REC__Cherenkov_y  =  fReader->getBranch<float>("REC::Cherenkov","y");
  REC__Cherenkov_z  =  fReader->getBranch<float>("REC::Cherenkov","z");
  REC__CovMat_C11  =  fReader->getBranch<float>("REC::CovMat","C11");
  REC__CovMat_C12  =  fReader->getBranch<float>("REC::CovMat","C12");
  REC__CovMat_C13  =  fReader->getBranch<float>("REC::CovMat","C13");
  REC__CovMat_C14  =  fReader->getBranch<float>("REC::CovMat","C14");
  REC__CovMat_C15  =  fReader->getBranch<float>("REC::CovMat","C15");
  REC__CovMat_C22  =  fReader->getBranch<float>("REC::CovMat","C22");
  REC__CovMat_C23  =  fReader->getBranch<float>("REC::CovMat","C23");
  REC__CovMat_C24  =  fReader->getBranch<float>("REC::CovMat","C24");
  REC__CovMat_C25  =  fReader->getBranch<float>("REC::CovMat","C25");
  REC__CovMat_C33  =  fReader->getBranch<float>("REC::CovMat","C33");
  REC__CovMat_C34  =  fReader->getBranch<float>("REC::CovMat","C34");
  REC__CovMat_C35  =  fReader->getBranch<float>("REC::CovMat","C35");
  REC__CovMat_C44  =  fReader->getBranch<float>("REC::CovMat","C44");
  REC__CovMat_C45  =  fReader->getBranch<float>("REC::CovMat","C45");
  REC__CovMat_C55  =  fReader->getBranch<float>("REC::CovMat","C55");
  REC__CovMat_index  =  fReader->getBranch<int16_t>("REC::CovMat","index");
  REC__CovMat_pindex  =  fReader->getBranch<int16_t>("REC::CovMat","pindex");
  REC__Event_BCG  =  fReader->getBranch<float>("REC::Event","BCG");
  REC__Event_EVNTime  =  fReader->getBranch<float>("REC::Event","EVNTime");
  REC__Event_EvCAT  =  fReader->getBranch<int16_t>("REC::Event","EvCAT");
  REC__Event_Helic  =  fReader->getBranch<int8_t>("REC::Event","Helic");
  REC__Event_LT  =  fReader->getBranch<double>("REC::Event","LT");
  REC__Event_NEVENT  =  fReader->getBranch<int32_t>("REC::Event","NEVENT");
  REC__Event_NPGP  =  fReader->getBranch<int16_t>("REC::Event","NPGP");
  REC__Event_NRUN  =  fReader->getBranch<int32_t>("REC::Event","NRUN");
  REC__Event_PTIME  =  fReader->getBranch<float>("REC::Event","PTIME");
  REC__Event_RFTime  =  fReader->getBranch<float>("REC::Event","RFTime");
  REC__Event_STTime  =  fReader->getBranch<float>("REC::Event","STTime");
  REC__Event_TRG  =  fReader->getBranch<int64_t>("REC::Event","TRG");
  REC__Event_TYPE  =  fReader->getBranch<int8_t>("REC::Event","TYPE");
  REC__ForwardTagger_chi2  =  fReader->getBranch<float>("REC::ForwardTagger","chi2");
  REC__ForwardTagger_detector  =  fReader->getBranch<int8_t>("REC::ForwardTagger","detector");
  REC__ForwardTagger_dx  =  fReader->getBranch<float>("REC::ForwardTagger","dx");
  REC__ForwardTagger_dy  =  fReader->getBranch<float>("REC::ForwardTagger","dy");
  REC__ForwardTagger_energy  =  fReader->getBranch<float>("REC::ForwardTagger","energy");
  REC__ForwardTagger_index  =  fReader->getBranch<int16_t>("REC::ForwardTagger","index");
  REC__ForwardTagger_path  =  fReader->getBranch<float>("REC::ForwardTagger","path");
  REC__ForwardTagger_pindex  =  fReader->getBranch<int16_t>("REC::ForwardTagger","pindex");
  REC__ForwardTagger_radius  =  fReader->getBranch<float>("REC::ForwardTagger","radius");
  REC__ForwardTagger_size  =  fReader->getBranch<int16_t>("REC::ForwardTagger","size");
  REC__ForwardTagger_status  =  fReader->getBranch<int16_t>("REC::ForwardTagger","status");
  REC__ForwardTagger_time  =  fReader->getBranch<float>("REC::ForwardTagger","time");
  REC__ForwardTagger_x  =  fReader->getBranch<float>("REC::ForwardTagger","x");
  REC__ForwardTagger_y  =  fReader->getBranch<float>("REC::ForwardTagger","y");
  REC__ForwardTagger_z  =  fReader->getBranch<float>("REC::ForwardTagger","z");
  REC__Particle_beta  =  fReader->getBranch<float>("REC::Particle","beta");
  REC__Particle_charge  =  fReader->getBranch<int8_t>("REC::Particle","charge");
  REC__Particle_chi2pid  =  fReader->getBranch<float>("REC::Particle","chi2pid");
  REC__Particle_pid  =  fReader->getBranch<int32_t>("REC::Particle","pid");
  REC__Particle_px  =  fReader->getBranch<float>("REC::Particle","px");
  REC__Particle_py  =  fReader->getBranch<float>("REC::Particle","py");
  REC__Particle_pz  =  fReader->getBranch<float>("REC::Particle","pz");
  REC__Particle_status  =  fReader->getBranch<int16_t>("REC::Particle","status");
  REC__Particle_vx  =  fReader->getBranch<float>("REC::Particle","vx");
  REC__Particle_vy  =  fReader->getBranch<float>("REC::Particle","vy");
  REC__Particle_vz  =  fReader->getBranch<float>("REC::Particle","vz");
  REC__Scintillator_chi2  =  fReader->getBranch<float>("REC::Scintillator","chi2");
  REC__Scintillator_component  =  fReader->getBranch<int16_t>("REC::Scintillator","component");
  REC__Scintillator_detector  =  fReader->getBranch<int8_t>("REC::Scintillator","detector");
  REC__Scintillator_energy  =  fReader->getBranch<float>("REC::Scintillator","energy");
  REC__Scintillator_hx  =  fReader->getBranch<float>("REC::Scintillator","hx");
  REC__Scintillator_hy  =  fReader->getBranch<float>("REC::Scintillator","hy");
  REC__Scintillator_hz  =  fReader->getBranch<float>("REC::Scintillator","hz");
  REC__Scintillator_index  =  fReader->getBranch<int16_t>("REC::Scintillator","index");
  REC__Scintillator_layer  =  fReader->getBranch<int8_t>("REC::Scintillator","layer");
  REC__Scintillator_path  =  fReader->getBranch<float>("REC::Scintillator","path");
  REC__Scintillator_pindex  =  fReader->getBranch<int16_t>("REC::Scintillator","pindex");
  REC__Scintillator_sector  =  fReader->getBranch<int8_t>("REC::Scintillator","sector");
  REC__Scintillator_status  =  fReader->getBranch<int16_t>("REC::Scintillator","status");
  REC__Scintillator_time  =  fReader->getBranch<float>("REC::Scintillator","time");
  REC__Scintillator_x  =  fReader->getBranch<float>("REC::Scintillator","x");
  REC__Scintillator_y  =  fReader->getBranch<float>("REC::Scintillator","y");
  REC__Scintillator_z  =  fReader->getBranch<float>("REC::Scintillator","z");
  REC__Track_NDF  =  fReader->getBranch<int16_t>("REC::Track","NDF");
  REC__Track_NDF_nomm  =  fReader->getBranch<int16_t>("REC::Track","NDF_nomm");
  REC__Track_chi2  =  fReader->getBranch<float>("REC::Track","chi2");
  REC__Track_chi2_nomm  =  fReader->getBranch<float>("REC::Track","chi2_nomm");
  REC__Track_detector  =  fReader->getBranch<int8_t>("REC::Track","detector");
  REC__Track_index  =  fReader->getBranch<int16_t>("REC::Track","index");
  REC__Track_pindex  =  fReader->getBranch<int16_t>("REC::Track","pindex");
  REC__Track_px_nomm  =  fReader->getBranch<float>("REC::Track","px_nomm");
  REC__Track_py_nomm  =  fReader->getBranch<float>("REC::Track","py_nomm");
  REC__Track_pz_nomm  =  fReader->getBranch<float>("REC::Track","pz_nomm");
  REC__Track_q  =  fReader->getBranch<int8_t>("REC::Track","q");
  REC__Track_sector  =  fReader->getBranch<int8_t>("REC::Track","sector");
  REC__Track_status  =  fReader->getBranch<int16_t>("REC::Track","status");
  REC__Track_vx_nomm  =  fReader->getBranch<float>("REC::Track","vx_nomm");
  REC__Track_vy_nomm  =  fReader->getBranch<float>("REC::Track","vy_nomm");
  REC__Track_vz_nomm  =  fReader->getBranch<float>("REC::Track","vz_nomm");
  REC__TrackCross_c_ux  =  fReader->getBranch<float>("REC::TrackCross","c_ux");
  REC__TrackCross_c_uy  =  fReader->getBranch<float>("REC::TrackCross","c_uy");
  REC__TrackCross_c_uz  =  fReader->getBranch<float>("REC::TrackCross","c_uz");
  REC__TrackCross_c_x  =  fReader->getBranch<float>("REC::TrackCross","c_x");
  REC__TrackCross_c_y  =  fReader->getBranch<float>("REC::TrackCross","c_y");
  REC__TrackCross_c_z  =  fReader->getBranch<float>("REC::TrackCross","c_z");
  REC__TrackCross_detector  =  fReader->getBranch<int8_t>("REC::TrackCross","detector");
  REC__TrackCross_index  =  fReader->getBranch<int16_t>("REC::TrackCross","index");
  REC__TrackCross_layer  =  fReader->getBranch<int8_t>("REC::TrackCross","layer");
  REC__TrackCross_pindex  =  fReader->getBranch<int16_t>("REC::TrackCross","pindex");
  REC__TrackCross_sector  =  fReader->getBranch<int8_t>("REC::TrackCross","sector");
  REC__TrackCross_status  =  fReader->getBranch<int16_t>("REC::TrackCross","status");
  REC__Traj_cx  =  fReader->getBranch<float>("REC::Traj","cx");
  REC__Traj_cy  =  fReader->getBranch<float>("REC::Traj","cy");
  REC__Traj_cz  =  fReader->getBranch<float>("REC::Traj","cz");
  REC__Traj_detId  =  fReader->getBranch<int16_t>("REC::Traj","detId");
  REC__Traj_index  =  fReader->getBranch<int16_t>("REC::Traj","index");
  REC__Traj_pathlength  =  fReader->getBranch<float>("REC::Traj","pathlength");
  REC__Traj_pindex  =  fReader->getBranch<int16_t>("REC::Traj","pindex");
  REC__Traj_q  =  fReader->getBranch<int8_t>("REC::Traj","q");
  REC__Traj_x  =  fReader->getBranch<float>("REC::Traj","x");
  REC__Traj_y  =  fReader->getBranch<float>("REC::Traj","y");
  REC__Traj_z  =  fReader->getBranch<float>("REC::Traj","z");
  REC__VertDoca_cx1  =  fReader->getBranch<float>("REC::VertDoca","cx1");
  REC__VertDoca_cx2  =  fReader->getBranch<float>("REC::VertDoca","cx2");
  REC__VertDoca_cy1  =  fReader->getBranch<float>("REC::VertDoca","cy1");
  REC__VertDoca_cy2  =  fReader->getBranch<float>("REC::VertDoca","cy2");
  REC__VertDoca_cz1  =  fReader->getBranch<float>("REC::VertDoca","cz1");
  REC__VertDoca_cz2  =  fReader->getBranch<float>("REC::VertDoca","cz2");
  REC__VertDoca_index1  =  fReader->getBranch<int16_t>("REC::VertDoca","index1");
  REC__VertDoca_index2  =  fReader->getBranch<int16_t>("REC::VertDoca","index2");
  REC__VertDoca_r  =  fReader->getBranch<float>("REC::VertDoca","r");
  REC__VertDoca_x  =  fReader->getBranch<float>("REC::VertDoca","x");
  REC__VertDoca_x1  =  fReader->getBranch<float>("REC::VertDoca","x1");
  REC__VertDoca_x2  =  fReader->getBranch<float>("REC::VertDoca","x2");
  REC__VertDoca_y  =  fReader->getBranch<float>("REC::VertDoca","y");
  REC__VertDoca_y1  =  fReader->getBranch<float>("REC::VertDoca","y1");
  REC__VertDoca_y2  =  fReader->getBranch<float>("REC::VertDoca","y2");
  REC__VertDoca_z  =  fReader->getBranch<float>("REC::VertDoca","z");
  REC__VertDoca_z1  =  fReader->getBranch<float>("REC::VertDoca","z1");
  REC__VertDoca_z2  =  fReader->getBranch<float>("REC::VertDoca","z2");
  RECHB__Calorimeter_chi2  =  fReader->getBranch<float>("RECHB::Calorimeter","chi2");
  RECHB__Calorimeter_detector  =  fReader->getBranch<int8_t>("RECHB::Calorimeter","detector");
  RECHB__Calorimeter_du  =  fReader->getBranch<float>("RECHB::Calorimeter","du");
  RECHB__Calorimeter_dv  =  fReader->getBranch<float>("RECHB::Calorimeter","dv");
  RECHB__Calorimeter_dw  =  fReader->getBranch<float>("RECHB::Calorimeter","dw");
  RECHB__Calorimeter_energy  =  fReader->getBranch<float>("RECHB::Calorimeter","energy");
  RECHB__Calorimeter_hx  =  fReader->getBranch<float>("RECHB::Calorimeter","hx");
  RECHB__Calorimeter_hy  =  fReader->getBranch<float>("RECHB::Calorimeter","hy");
  RECHB__Calorimeter_hz  =  fReader->getBranch<float>("RECHB::Calorimeter","hz");
  RECHB__Calorimeter_index  =  fReader->getBranch<int16_t>("RECHB::Calorimeter","index");
  RECHB__Calorimeter_layer  =  fReader->getBranch<int8_t>("RECHB::Calorimeter","layer");
  RECHB__Calorimeter_lu  =  fReader->getBranch<float>("RECHB::Calorimeter","lu");
  RECHB__Calorimeter_lv  =  fReader->getBranch<float>("RECHB::Calorimeter","lv");
  RECHB__Calorimeter_lw  =  fReader->getBranch<float>("RECHB::Calorimeter","lw");
  RECHB__Calorimeter_m2u  =  fReader->getBranch<float>("RECHB::Calorimeter","m2u");
  RECHB__Calorimeter_m2v  =  fReader->getBranch<float>("RECHB::Calorimeter","m2v");
  RECHB__Calorimeter_m2w  =  fReader->getBranch<float>("RECHB::Calorimeter","m2w");
  RECHB__Calorimeter_m3u  =  fReader->getBranch<float>("RECHB::Calorimeter","m3u");
  RECHB__Calorimeter_m3v  =  fReader->getBranch<float>("RECHB::Calorimeter","m3v");
  RECHB__Calorimeter_m3w  =  fReader->getBranch<float>("RECHB::Calorimeter","m3w");
  RECHB__Calorimeter_path  =  fReader->getBranch<float>("RECHB::Calorimeter","path");
  RECHB__Calorimeter_pindex  =  fReader->getBranch<int16_t>("RECHB::Calorimeter","pindex");
  RECHB__Calorimeter_sector  =  fReader->getBranch<int8_t>("RECHB::Calorimeter","sector");
  RECHB__Calorimeter_status  =  fReader->getBranch<int16_t>("RECHB::Calorimeter","status");
  RECHB__Calorimeter_time  =  fReader->getBranch<float>("RECHB::Calorimeter","time");
  RECHB__Calorimeter_x  =  fReader->getBranch<float>("RECHB::Calorimeter","x");
  RECHB__Calorimeter_y  =  fReader->getBranch<float>("RECHB::Calorimeter","y");
  RECHB__Calorimeter_z  =  fReader->getBranch<float>("RECHB::Calorimeter","z");
  RECHB__Cherenkov_chi2  =  fReader->getBranch<float>("RECHB::Cherenkov","chi2");
  RECHB__Cherenkov_detector  =  fReader->getBranch<int8_t>("RECHB::Cherenkov","detector");
  RECHB__Cherenkov_dphi  =  fReader->getBranch<float>("RECHB::Cherenkov","dphi");
  RECHB__Cherenkov_dtheta  =  fReader->getBranch<float>("RECHB::Cherenkov","dtheta");
  RECHB__Cherenkov_index  =  fReader->getBranch<int16_t>("RECHB::Cherenkov","index");
  RECHB__Cherenkov_nphe  =  fReader->getBranch<float>("RECHB::Cherenkov","nphe");
  RECHB__Cherenkov_path  =  fReader->getBranch<float>("RECHB::Cherenkov","path");
  RECHB__Cherenkov_phi  =  fReader->getBranch<float>("RECHB::Cherenkov","phi");
  RECHB__Cherenkov_pindex  =  fReader->getBranch<int16_t>("RECHB::Cherenkov","pindex");
  RECHB__Cherenkov_sector  =  fReader->getBranch<int8_t>("RECHB::Cherenkov","sector");
  RECHB__Cherenkov_status  =  fReader->getBranch<int16_t>("RECHB::Cherenkov","status");
  RECHB__Cherenkov_theta  =  fReader->getBranch<float>("RECHB::Cherenkov","theta");
  RECHB__Cherenkov_time  =  fReader->getBranch<float>("RECHB::Cherenkov","time");
  RECHB__Cherenkov_x  =  fReader->getBranch<float>("RECHB::Cherenkov","x");
  RECHB__Cherenkov_y  =  fReader->getBranch<float>("RECHB::Cherenkov","y");
  RECHB__Cherenkov_z  =  fReader->getBranch<float>("RECHB::Cherenkov","z");
  RECHB__Event_BCG  =  fReader->getBranch<float>("RECHB::Event","BCG");
  RECHB__Event_EVNTime  =  fReader->getBranch<float>("RECHB::Event","EVNTime");
  RECHB__Event_EvCAT  =  fReader->getBranch<int16_t>("RECHB::Event","EvCAT");
  RECHB__Event_Helic  =  fReader->getBranch<int8_t>("RECHB::Event","Helic");
  RECHB__Event_LT  =  fReader->getBranch<double>("RECHB::Event","LT");
  RECHB__Event_NEVENT  =  fReader->getBranch<int32_t>("RECHB::Event","NEVENT");
  RECHB__Event_NPGP  =  fReader->getBranch<int16_t>("RECHB::Event","NPGP");
  RECHB__Event_NRUN  =  fReader->getBranch<int32_t>("RECHB::Event","NRUN");
  RECHB__Event_PTIME  =  fReader->getBranch<float>("RECHB::Event","PTIME");
  RECHB__Event_RFTime  =  fReader->getBranch<float>("RECHB::Event","RFTime");
  RECHB__Event_STTime  =  fReader->getBranch<float>("RECHB::Event","STTime");
  RECHB__Event_TRG  =  fReader->getBranch<int64_t>("RECHB::Event","TRG");
  RECHB__Event_TYPE  =  fReader->getBranch<int8_t>("RECHB::Event","TYPE");
  RECHB__ForwardTagger_chi2  =  fReader->getBranch<float>("RECHB::ForwardTagger","chi2");
  RECHB__ForwardTagger_detector  =  fReader->getBranch<int8_t>("RECHB::ForwardTagger","detector");
  RECHB__ForwardTagger_dx  =  fReader->getBranch<float>("RECHB::ForwardTagger","dx");
  RECHB__ForwardTagger_dy  =  fReader->getBranch<float>("RECHB::ForwardTagger","dy");
  RECHB__ForwardTagger_energy  =  fReader->getBranch<float>("RECHB::ForwardTagger","energy");
  RECHB__ForwardTagger_index  =  fReader->getBranch<int16_t>("RECHB::ForwardTagger","index");
  RECHB__ForwardTagger_path  =  fReader->getBranch<float>("RECHB::ForwardTagger","path");
  RECHB__ForwardTagger_pindex  =  fReader->getBranch<int16_t>("RECHB::ForwardTagger","pindex");
  RECHB__ForwardTagger_radius  =  fReader->getBranch<float>("RECHB::ForwardTagger","radius");
  RECHB__ForwardTagger_size  =  fReader->getBranch<int16_t>("RECHB::ForwardTagger","size");
  RECHB__ForwardTagger_status  =  fReader->getBranch<int16_t>("RECHB::ForwardTagger","status");
  RECHB__ForwardTagger_time  =  fReader->getBranch<float>("RECHB::ForwardTagger","time");
  RECHB__ForwardTagger_x  =  fReader->getBranch<float>("RECHB::ForwardTagger","x");
  RECHB__ForwardTagger_y  =  fReader->getBranch<float>("RECHB::ForwardTagger","y");
  RECHB__ForwardTagger_z  =  fReader->getBranch<float>("RECHB::ForwardTagger","z");
  RECHB__Particle_beta  =  fReader->getBranch<float>("RECHB::Particle","beta");
  RECHB__Particle_charge  =  fReader->getBranch<int8_t>("RECHB::Particle","charge");
  RECHB__Particle_chi2pid  =  fReader->getBranch<float>("RECHB::Particle","chi2pid");
  RECHB__Particle_pid  =  fReader->getBranch<int32_t>("RECHB::Particle","pid");
  RECHB__Particle_px  =  fReader->getBranch<float>("RECHB::Particle","px");
  RECHB__Particle_py  =  fReader->getBranch<float>("RECHB::Particle","py");
  RECHB__Particle_pz  =  fReader->getBranch<float>("RECHB::Particle","pz");
  RECHB__Particle_status  =  fReader->getBranch<int16_t>("RECHB::Particle","status");
  RECHB__Particle_vx  =  fReader->getBranch<float>("RECHB::Particle","vx");
  RECHB__Particle_vy  =  fReader->getBranch<float>("RECHB::Particle","vy");
  RECHB__Particle_vz  =  fReader->getBranch<float>("RECHB::Particle","vz");
  RECHB__Scintillator_chi2  =  fReader->getBranch<float>("RECHB::Scintillator","chi2");
  RECHB__Scintillator_component  =  fReader->getBranch<int16_t>("RECHB::Scintillator","component");
  RECHB__Scintillator_detector  =  fReader->getBranch<int8_t>("RECHB::Scintillator","detector");
  RECHB__Scintillator_energy  =  fReader->getBranch<float>("RECHB::Scintillator","energy");
  RECHB__Scintillator_hx  =  fReader->getBranch<float>("RECHB::Scintillator","hx");
  RECHB__Scintillator_hy  =  fReader->getBranch<float>("RECHB::Scintillator","hy");
  RECHB__Scintillator_hz  =  fReader->getBranch<float>("RECHB::Scintillator","hz");
  RECHB__Scintillator_index  =  fReader->getBranch<int16_t>("RECHB::Scintillator","index");
  RECHB__Scintillator_layer  =  fReader->getBranch<int8_t>("RECHB::Scintillator","layer");
  RECHB__Scintillator_path  =  fReader->getBranch<float>("RECHB::Scintillator","path");
  RECHB__Scintillator_pindex  =  fReader->getBranch<int16_t>("RECHB::Scintillator","pindex");
  RECHB__Scintillator_sector  =  fReader->getBranch<int8_t>("RECHB::Scintillator","sector");
  RECHB__Scintillator_status  =  fReader->getBranch<int16_t>("RECHB::Scintillator","status");
  RECHB__Scintillator_time  =  fReader->getBranch<float>("RECHB::Scintillator","time");
  RECHB__Scintillator_x  =  fReader->getBranch<float>("RECHB::Scintillator","x");
  RECHB__Scintillator_y  =  fReader->getBranch<float>("RECHB::Scintillator","y");
  RECHB__Scintillator_z  =  fReader->getBranch<float>("RECHB::Scintillator","z");
  RECHB__Track_NDF  =  fReader->getBranch<int16_t>("RECHB::Track","NDF");
  RECHB__Track_NDF_nomm  =  fReader->getBranch<int16_t>("RECHB::Track","NDF_nomm");
  RECHB__Track_chi2  =  fReader->getBranch<float>("RECHB::Track","chi2");
  RECHB__Track_chi2_nomm  =  fReader->getBranch<float>("RECHB::Track","chi2_nomm");
  RECHB__Track_detector  =  fReader->getBranch<int8_t>("RECHB::Track","detector");
  RECHB__Track_index  =  fReader->getBranch<int16_t>("RECHB::Track","index");
  RECHB__Track_pindex  =  fReader->getBranch<int16_t>("RECHB::Track","pindex");
  RECHB__Track_px_nomm  =  fReader->getBranch<float>("RECHB::Track","px_nomm");
  RECHB__Track_py_nomm  =  fReader->getBranch<float>("RECHB::Track","py_nomm");
  RECHB__Track_pz_nomm  =  fReader->getBranch<float>("RECHB::Track","pz_nomm");
  RECHB__Track_q  =  fReader->getBranch<int8_t>("RECHB::Track","q");
  RECHB__Track_sector  =  fReader->getBranch<int8_t>("RECHB::Track","sector");
  RECHB__Track_status  =  fReader->getBranch<int16_t>("RECHB::Track","status");
  RECHB__Track_vx_nomm  =  fReader->getBranch<float>("RECHB::Track","vx_nomm");
  RECHB__Track_vy_nomm  =  fReader->getBranch<float>("RECHB::Track","vy_nomm");
  RECHB__Track_vz_nomm  =  fReader->getBranch<float>("RECHB::Track","vz_nomm");
  RECHB__TrackCross_c_ux  =  fReader->getBranch<float>("RECHB::TrackCross","c_ux");
  RECHB__TrackCross_c_uy  =  fReader->getBranch<float>("RECHB::TrackCross","c_uy");
  RECHB__TrackCross_c_uz  =  fReader->getBranch<float>("RECHB::TrackCross","c_uz");
  RECHB__TrackCross_c_x  =  fReader->getBranch<float>("RECHB::TrackCross","c_x");
  RECHB__TrackCross_c_y  =  fReader->getBranch<float>("RECHB::TrackCross","c_y");
  RECHB__TrackCross_c_z  =  fReader->getBranch<float>("RECHB::TrackCross","c_z");
  RECHB__TrackCross_detector  =  fReader->getBranch<int8_t>("RECHB::TrackCross","detector");
  RECHB__TrackCross_index  =  fReader->getBranch<int16_t>("RECHB::TrackCross","index");
  RECHB__TrackCross_layer  =  fReader->getBranch<int8_t>("RECHB::TrackCross","layer");
  RECHB__TrackCross_pindex  =  fReader->getBranch<int16_t>("RECHB::TrackCross","pindex");
  RECHB__TrackCross_sector  =  fReader->getBranch<int8_t>("RECHB::TrackCross","sector");
  RECHB__TrackCross_status  =  fReader->getBranch<int16_t>("RECHB::TrackCross","status");
  RF__adc_ADC  =  fReader->getBranch<int32_t>("RF::adc","ADC");
  RF__adc_component  =  fReader->getBranch<int16_t>("RF::adc","component");
  RF__adc_layer  =  fReader->getBranch<int8_t>("RF::adc","layer");
  RF__adc_order  =  fReader->getBranch<int8_t>("RF::adc","order");
  RF__adc_ped  =  fReader->getBranch<int16_t>("RF::adc","ped");
  RF__adc_sector  =  fReader->getBranch<int8_t>("RF::adc","sector");
  RF__adc_time  =  fReader->getBranch<float>("RF::adc","time");
  RF__tdc_TDC  =  fReader->getBranch<int32_t>("RF::tdc","TDC");
  RF__tdc_component  =  fReader->getBranch<int16_t>("RF::tdc","component");
  RF__tdc_layer  =  fReader->getBranch<int8_t>("RF::tdc","layer");
  RF__tdc_order  =  fReader->getBranch<int8_t>("RF::tdc","order");
  RF__tdc_sector  =  fReader->getBranch<int8_t>("RF::tdc","sector");
  RICH__adc_ADC  =  fReader->getBranch<int32_t>("RICH::adc","ADC");
  RICH__adc_component  =  fReader->getBranch<int16_t>("RICH::adc","component");
  RICH__adc_layer  =  fReader->getBranch<int8_t>("RICH::adc","layer");
  RICH__adc_order  =  fReader->getBranch<int8_t>("RICH::adc","order");
  RICH__adc_ped  =  fReader->getBranch<int16_t>("RICH::adc","ped");
  RICH__adc_sector  =  fReader->getBranch<int8_t>("RICH::adc","sector");
  RICH__adc_time  =  fReader->getBranch<float>("RICH::adc","time");
  RICH__clusters_charge  =  fReader->getBranch<float>("RICH::clusters","charge");
  RICH__clusters_id  =  fReader->getBranch<int16_t>("RICH::clusters","id");
  RICH__clusters_pmt  =  fReader->getBranch<int16_t>("RICH::clusters","pmt");
  RICH__clusters_sector  =  fReader->getBranch<int16_t>("RICH::clusters","sector");
  RICH__clusters_size  =  fReader->getBranch<int16_t>("RICH::clusters","size");
  RICH__clusters_tile  =  fReader->getBranch<int16_t>("RICH::clusters","tile");
  RICH__clusters_time  =  fReader->getBranch<float>("RICH::clusters","time");
  RICH__clusters_wtime  =  fReader->getBranch<float>("RICH::clusters","wtime");
  RICH__clusters_wx  =  fReader->getBranch<float>("RICH::clusters","wx");
  RICH__clusters_wy  =  fReader->getBranch<float>("RICH::clusters","wy");
  RICH__clusters_wz  =  fReader->getBranch<float>("RICH::clusters","wz");
  RICH__clusters_x  =  fReader->getBranch<float>("RICH::clusters","x");
  RICH__clusters_y  =  fReader->getBranch<float>("RICH::clusters","y");
  RICH__clusters_z  =  fReader->getBranch<float>("RICH::clusters","z");
  RICH__hits_anode  =  fReader->getBranch<int16_t>("RICH::hits","anode");
  RICH__hits_cluster  =  fReader->getBranch<int16_t>("RICH::hits","cluster");
  RICH__hits_duration  =  fReader->getBranch<int16_t>("RICH::hits","duration");
  RICH__hits_glx  =  fReader->getBranch<int16_t>("RICH::hits","glx");
  RICH__hits_gly  =  fReader->getBranch<int16_t>("RICH::hits","gly");
  RICH__hits_id  =  fReader->getBranch<int16_t>("RICH::hits","id");
  RICH__hits_idx  =  fReader->getBranch<int16_t>("RICH::hits","idx");
  RICH__hits_idy  =  fReader->getBranch<int16_t>("RICH::hits","idy");
  RICH__hits_pmt  =  fReader->getBranch<int16_t>("RICH::hits","pmt");
  RICH__hits_sector  =  fReader->getBranch<int16_t>("RICH::hits","sector");
  RICH__hits_tile  =  fReader->getBranch<int16_t>("RICH::hits","tile");
  RICH__hits_time  =  fReader->getBranch<int16_t>("RICH::hits","time");
  RICH__hits_xtalk  =  fReader->getBranch<int16_t>("RICH::hits","xtalk");
  RICH__tdc_TDC  =  fReader->getBranch<int32_t>("RICH::tdc","TDC");
  RICH__tdc_component  =  fReader->getBranch<int16_t>("RICH::tdc","component");
  RICH__tdc_layer  =  fReader->getBranch<int8_t>("RICH::tdc","layer");
  RICH__tdc_order  =  fReader->getBranch<int8_t>("RICH::tdc","order");
  RICH__tdc_sector  =  fReader->getBranch<int8_t>("RICH::tdc","sector");
  RTPC__adc_ADC  =  fReader->getBranch<int32_t>("RTPC::adc","ADC");
  RTPC__adc_component  =  fReader->getBranch<int16_t>("RTPC::adc","component");
  RTPC__adc_layer  =  fReader->getBranch<int8_t>("RTPC::adc","layer");
  RTPC__adc_order  =  fReader->getBranch<int8_t>("RTPC::adc","order");
  RTPC__adc_ped  =  fReader->getBranch<int16_t>("RTPC::adc","ped");
  RTPC__adc_sector  =  fReader->getBranch<int8_t>("RTPC::adc","sector");
  RTPC__adc_time  =  fReader->getBranch<float>("RTPC::adc","time");
  RTPC__pos_energy  =  fReader->getBranch<float>("RTPC::pos","energy");
  RTPC__pos_phi  =  fReader->getBranch<float>("RTPC::pos","phi");
  RTPC__pos_posx  =  fReader->getBranch<float>("RTPC::pos","posx");
  RTPC__pos_posy  =  fReader->getBranch<float>("RTPC::pos","posy");
  RTPC__pos_posz  =  fReader->getBranch<float>("RTPC::pos","posz");
  RTPC__pos_step  =  fReader->getBranch<int32_t>("RTPC::pos","step");
  RTPC__pos_time  =  fReader->getBranch<float>("RTPC::pos","time");
  RUN__config_event  =  fReader->getBranch<int32_t>("RUN::config","event");
  RUN__config_mode  =  fReader->getBranch<int8_t>("RUN::config","mode");
  RUN__config_run  =  fReader->getBranch<int32_t>("RUN::config","run");
  RUN__config_solenoid  =  fReader->getBranch<float>("RUN::config","solenoid");
  RUN__config_timestamp  =  fReader->getBranch<int64_t>("RUN::config","timestamp");
  RUN__config_torus  =  fReader->getBranch<float>("RUN::config","torus");
  RUN__config_trigger  =  fReader->getBranch<int64_t>("RUN::config","trigger");
  RUN__config_type  =  fReader->getBranch<int8_t>("RUN::config","type");
  RUN__config_unixtime  =  fReader->getBranch<int32_t>("RUN::config","unixtime");
  RUN__rf_id  =  fReader->getBranch<int16_t>("RUN::rf","id");
  RUN__rf_time  =  fReader->getBranch<float>("RUN::rf","time");
  RUN__trigger_id  =  fReader->getBranch<int32_t>("RUN::trigger","id");
  RUN__trigger_trigger  =  fReader->getBranch<int32_t>("RUN::trigger","trigger");
  TAGGER__tgpb_eid  =  fReader->getBranch<int16_t>("TAGGER::tgpb","eid");
  TAGGER__tgpb_energy  =  fReader->getBranch<float>("TAGGER::tgpb","energy");
  TAGGER__tgpb_status  =  fReader->getBranch<int8_t>("TAGGER::tgpb","status");
  TAGGER__tgpb_tid  =  fReader->getBranch<int16_t>("TAGGER::tgpb","tid");
  TAGGER__tgpb_time  =  fReader->getBranch<float>("TAGGER::tgpb","time");
  TimeBasedTrkg__TBClusters_Hit10_ID  =  fReader->getBranch<int16_t>("TimeBasedTrkg::TBClusters","Hit10_ID");
  TimeBasedTrkg__TBClusters_Hit11_ID  =  fReader->getBranch<int16_t>("TimeBasedTrkg::TBClusters","Hit11_ID");
  TimeBasedTrkg__TBClusters_Hit12_ID  =  fReader->getBranch<int16_t>("TimeBasedTrkg::TBClusters","Hit12_ID");
  TimeBasedTrkg__TBClusters_Hit1_ID  =  fReader->getBranch<int16_t>("TimeBasedTrkg::TBClusters","Hit1_ID");
  TimeBasedTrkg__TBClusters_Hit2_ID  =  fReader->getBranch<int16_t>("TimeBasedTrkg::TBClusters","Hit2_ID");
  TimeBasedTrkg__TBClusters_Hit3_ID  =  fReader->getBranch<int16_t>("TimeBasedTrkg::TBClusters","Hit3_ID");
  TimeBasedTrkg__TBClusters_Hit4_ID  =  fReader->getBranch<int16_t>("TimeBasedTrkg::TBClusters","Hit4_ID");
  TimeBasedTrkg__TBClusters_Hit5_ID  =  fReader->getBranch<int16_t>("TimeBasedTrkg::TBClusters","Hit5_ID");
  TimeBasedTrkg__TBClusters_Hit6_ID  =  fReader->getBranch<int16_t>("TimeBasedTrkg::TBClusters","Hit6_ID");
  TimeBasedTrkg__TBClusters_Hit7_ID  =  fReader->getBranch<int16_t>("TimeBasedTrkg::TBClusters","Hit7_ID");
  TimeBasedTrkg__TBClusters_Hit8_ID  =  fReader->getBranch<int16_t>("TimeBasedTrkg::TBClusters","Hit8_ID");
  TimeBasedTrkg__TBClusters_Hit9_ID  =  fReader->getBranch<int16_t>("TimeBasedTrkg::TBClusters","Hit9_ID");
  TimeBasedTrkg__TBClusters_avgWire  =  fReader->getBranch<float>("TimeBasedTrkg::TBClusters","avgWire");
  TimeBasedTrkg__TBClusters_fitChisqProb  =  fReader->getBranch<float>("TimeBasedTrkg::TBClusters","fitChisqProb");
  TimeBasedTrkg__TBClusters_fitInterc  =  fReader->getBranch<float>("TimeBasedTrkg::TBClusters","fitInterc");
  TimeBasedTrkg__TBClusters_fitIntercErr  =  fReader->getBranch<float>("TimeBasedTrkg::TBClusters","fitIntercErr");
  TimeBasedTrkg__TBClusters_fitSlope  =  fReader->getBranch<float>("TimeBasedTrkg::TBClusters","fitSlope");
  TimeBasedTrkg__TBClusters_fitSlopeErr  =  fReader->getBranch<float>("TimeBasedTrkg::TBClusters","fitSlopeErr");
  TimeBasedTrkg__TBClusters_id  =  fReader->getBranch<int16_t>("TimeBasedTrkg::TBClusters","id");
  TimeBasedTrkg__TBClusters_sector  =  fReader->getBranch<int8_t>("TimeBasedTrkg::TBClusters","sector");
  TimeBasedTrkg__TBClusters_size  =  fReader->getBranch<int8_t>("TimeBasedTrkg::TBClusters","size");
  TimeBasedTrkg__TBClusters_status  =  fReader->getBranch<int16_t>("TimeBasedTrkg::TBClusters","status");
  TimeBasedTrkg__TBClusters_superlayer  =  fReader->getBranch<int8_t>("TimeBasedTrkg::TBClusters","superlayer");
  TimeBasedTrkg__TBCovMat_C11  =  fReader->getBranch<float>("TimeBasedTrkg::TBCovMat","C11");
  TimeBasedTrkg__TBCovMat_C12  =  fReader->getBranch<float>("TimeBasedTrkg::TBCovMat","C12");
  TimeBasedTrkg__TBCovMat_C13  =  fReader->getBranch<float>("TimeBasedTrkg::TBCovMat","C13");
  TimeBasedTrkg__TBCovMat_C14  =  fReader->getBranch<float>("TimeBasedTrkg::TBCovMat","C14");
  TimeBasedTrkg__TBCovMat_C15  =  fReader->getBranch<float>("TimeBasedTrkg::TBCovMat","C15");
  TimeBasedTrkg__TBCovMat_C21  =  fReader->getBranch<float>("TimeBasedTrkg::TBCovMat","C21");
  TimeBasedTrkg__TBCovMat_C22  =  fReader->getBranch<float>("TimeBasedTrkg::TBCovMat","C22");
  TimeBasedTrkg__TBCovMat_C23  =  fReader->getBranch<float>("TimeBasedTrkg::TBCovMat","C23");
  TimeBasedTrkg__TBCovMat_C24  =  fReader->getBranch<float>("TimeBasedTrkg::TBCovMat","C24");
  TimeBasedTrkg__TBCovMat_C25  =  fReader->getBranch<float>("TimeBasedTrkg::TBCovMat","C25");
  TimeBasedTrkg__TBCovMat_C31  =  fReader->getBranch<float>("TimeBasedTrkg::TBCovMat","C31");
  TimeBasedTrkg__TBCovMat_C32  =  fReader->getBranch<float>("TimeBasedTrkg::TBCovMat","C32");
  TimeBasedTrkg__TBCovMat_C33  =  fReader->getBranch<float>("TimeBasedTrkg::TBCovMat","C33");
  TimeBasedTrkg__TBCovMat_C34  =  fReader->getBranch<float>("TimeBasedTrkg::TBCovMat","C34");
  TimeBasedTrkg__TBCovMat_C35  =  fReader->getBranch<float>("TimeBasedTrkg::TBCovMat","C35");
  TimeBasedTrkg__TBCovMat_C41  =  fReader->getBranch<float>("TimeBasedTrkg::TBCovMat","C41");
  TimeBasedTrkg__TBCovMat_C42  =  fReader->getBranch<float>("TimeBasedTrkg::TBCovMat","C42");
  TimeBasedTrkg__TBCovMat_C43  =  fReader->getBranch<float>("TimeBasedTrkg::TBCovMat","C43");
  TimeBasedTrkg__TBCovMat_C44  =  fReader->getBranch<float>("TimeBasedTrkg::TBCovMat","C44");
  TimeBasedTrkg__TBCovMat_C45  =  fReader->getBranch<float>("TimeBasedTrkg::TBCovMat","C45");
  TimeBasedTrkg__TBCovMat_C51  =  fReader->getBranch<float>("TimeBasedTrkg::TBCovMat","C51");
  TimeBasedTrkg__TBCovMat_C52  =  fReader->getBranch<float>("TimeBasedTrkg::TBCovMat","C52");
  TimeBasedTrkg__TBCovMat_C53  =  fReader->getBranch<float>("TimeBasedTrkg::TBCovMat","C53");
  TimeBasedTrkg__TBCovMat_C54  =  fReader->getBranch<float>("TimeBasedTrkg::TBCovMat","C54");
  TimeBasedTrkg__TBCovMat_C55  =  fReader->getBranch<float>("TimeBasedTrkg::TBCovMat","C55");
  TimeBasedTrkg__TBCovMat_id  =  fReader->getBranch<int16_t>("TimeBasedTrkg::TBCovMat","id");
  TimeBasedTrkg__TBCrosses_Segment1_ID  =  fReader->getBranch<int16_t>("TimeBasedTrkg::TBCrosses","Segment1_ID");
  TimeBasedTrkg__TBCrosses_Segment2_ID  =  fReader->getBranch<int16_t>("TimeBasedTrkg::TBCrosses","Segment2_ID");
  TimeBasedTrkg__TBCrosses_err_ux  =  fReader->getBranch<float>("TimeBasedTrkg::TBCrosses","err_ux");
  TimeBasedTrkg__TBCrosses_err_uy  =  fReader->getBranch<float>("TimeBasedTrkg::TBCrosses","err_uy");
  TimeBasedTrkg__TBCrosses_err_uz  =  fReader->getBranch<float>("TimeBasedTrkg::TBCrosses","err_uz");
  TimeBasedTrkg__TBCrosses_err_x  =  fReader->getBranch<float>("TimeBasedTrkg::TBCrosses","err_x");
  TimeBasedTrkg__TBCrosses_err_y  =  fReader->getBranch<float>("TimeBasedTrkg::TBCrosses","err_y");
  TimeBasedTrkg__TBCrosses_err_z  =  fReader->getBranch<float>("TimeBasedTrkg::TBCrosses","err_z");
  TimeBasedTrkg__TBCrosses_id  =  fReader->getBranch<int16_t>("TimeBasedTrkg::TBCrosses","id");
  TimeBasedTrkg__TBCrosses_region  =  fReader->getBranch<int8_t>("TimeBasedTrkg::TBCrosses","region");
  TimeBasedTrkg__TBCrosses_sector  =  fReader->getBranch<int8_t>("TimeBasedTrkg::TBCrosses","sector");
  TimeBasedTrkg__TBCrosses_status  =  fReader->getBranch<int16_t>("TimeBasedTrkg::TBCrosses","status");
  TimeBasedTrkg__TBCrosses_ux  =  fReader->getBranch<float>("TimeBasedTrkg::TBCrosses","ux");
  TimeBasedTrkg__TBCrosses_uy  =  fReader->getBranch<float>("TimeBasedTrkg::TBCrosses","uy");
  TimeBasedTrkg__TBCrosses_uz  =  fReader->getBranch<float>("TimeBasedTrkg::TBCrosses","uz");
  TimeBasedTrkg__TBCrosses_x  =  fReader->getBranch<float>("TimeBasedTrkg::TBCrosses","x");
  TimeBasedTrkg__TBCrosses_y  =  fReader->getBranch<float>("TimeBasedTrkg::TBCrosses","y");
  TimeBasedTrkg__TBCrosses_z  =  fReader->getBranch<float>("TimeBasedTrkg::TBCrosses","z");
  TimeBasedTrkg__TBHits_B  =  fReader->getBranch<float>("TimeBasedTrkg::TBHits","B");
  TimeBasedTrkg__TBHits_LR  =  fReader->getBranch<int8_t>("TimeBasedTrkg::TBHits","LR");
  TimeBasedTrkg__TBHits_T0  =  fReader->getBranch<float>("TimeBasedTrkg::TBHits","T0");
  TimeBasedTrkg__TBHits_TDC  =  fReader->getBranch<int32_t>("TimeBasedTrkg::TBHits","TDC");
  TimeBasedTrkg__TBHits_TFlight  =  fReader->getBranch<float>("TimeBasedTrkg::TBHits","TFlight");
  TimeBasedTrkg__TBHits_TProp  =  fReader->getBranch<float>("TimeBasedTrkg::TBHits","TProp");
  TimeBasedTrkg__TBHits_TStart  =  fReader->getBranch<float>("TimeBasedTrkg::TBHits","TStart");
  TimeBasedTrkg__TBHits_X  =  fReader->getBranch<float>("TimeBasedTrkg::TBHits","X");
  TimeBasedTrkg__TBHits_Z  =  fReader->getBranch<float>("TimeBasedTrkg::TBHits","Z");
  TimeBasedTrkg__TBHits_beta  =  fReader->getBranch<float>("TimeBasedTrkg::TBHits","beta");
  TimeBasedTrkg__TBHits_clusterID  =  fReader->getBranch<int16_t>("TimeBasedTrkg::TBHits","clusterID");
  TimeBasedTrkg__TBHits_doca  =  fReader->getBranch<float>("TimeBasedTrkg::TBHits","doca");
  TimeBasedTrkg__TBHits_docaError  =  fReader->getBranch<float>("TimeBasedTrkg::TBHits","docaError");
  TimeBasedTrkg__TBHits_fitResidual  =  fReader->getBranch<float>("TimeBasedTrkg::TBHits","fitResidual");
  TimeBasedTrkg__TBHits_id  =  fReader->getBranch<int16_t>("TimeBasedTrkg::TBHits","id");
  TimeBasedTrkg__TBHits_layer  =  fReader->getBranch<int8_t>("TimeBasedTrkg::TBHits","layer");
  TimeBasedTrkg__TBHits_sector  =  fReader->getBranch<int8_t>("TimeBasedTrkg::TBHits","sector");
  TimeBasedTrkg__TBHits_status  =  fReader->getBranch<int16_t>("TimeBasedTrkg::TBHits","status");
  TimeBasedTrkg__TBHits_superlayer  =  fReader->getBranch<int8_t>("TimeBasedTrkg::TBHits","superlayer");
  TimeBasedTrkg__TBHits_tBeta  =  fReader->getBranch<float>("TimeBasedTrkg::TBHits","tBeta");
  TimeBasedTrkg__TBHits_time  =  fReader->getBranch<float>("TimeBasedTrkg::TBHits","time");
  TimeBasedTrkg__TBHits_timeResidual  =  fReader->getBranch<float>("TimeBasedTrkg::TBHits","timeResidual");
  TimeBasedTrkg__TBHits_trkDoca  =  fReader->getBranch<float>("TimeBasedTrkg::TBHits","trkDoca");
  TimeBasedTrkg__TBHits_trkID  =  fReader->getBranch<int8_t>("TimeBasedTrkg::TBHits","trkID");
  TimeBasedTrkg__TBHits_wire  =  fReader->getBranch<int16_t>("TimeBasedTrkg::TBHits","wire");
  TimeBasedTrkg__TBSegmentTrajectory_layer  =  fReader->getBranch<int8_t>("TimeBasedTrkg::TBSegmentTrajectory","layer");
  TimeBasedTrkg__TBSegmentTrajectory_matchedHitID  =  fReader->getBranch<int16_t>("TimeBasedTrkg::TBSegmentTrajectory","matchedHitID");
  TimeBasedTrkg__TBSegmentTrajectory_sector  =  fReader->getBranch<int8_t>("TimeBasedTrkg::TBSegmentTrajectory","sector");
  TimeBasedTrkg__TBSegmentTrajectory_segmentID  =  fReader->getBranch<int16_t>("TimeBasedTrkg::TBSegmentTrajectory","segmentID");
  TimeBasedTrkg__TBSegmentTrajectory_superlayer  =  fReader->getBranch<int8_t>("TimeBasedTrkg::TBSegmentTrajectory","superlayer");
  TimeBasedTrkg__TBSegmentTrajectory_trkDoca  =  fReader->getBranch<float>("TimeBasedTrkg::TBSegmentTrajectory","trkDoca");
  TimeBasedTrkg__TBSegments_Cluster_ID  =  fReader->getBranch<int16_t>("TimeBasedTrkg::TBSegments","Cluster_ID");
  TimeBasedTrkg__TBSegments_Hit10_ID  =  fReader->getBranch<int16_t>("TimeBasedTrkg::TBSegments","Hit10_ID");
  TimeBasedTrkg__TBSegments_Hit11_ID  =  fReader->getBranch<int16_t>("TimeBasedTrkg::TBSegments","Hit11_ID");
  TimeBasedTrkg__TBSegments_Hit12_ID  =  fReader->getBranch<int16_t>("TimeBasedTrkg::TBSegments","Hit12_ID");
  TimeBasedTrkg__TBSegments_Hit1_ID  =  fReader->getBranch<int16_t>("TimeBasedTrkg::TBSegments","Hit1_ID");
  TimeBasedTrkg__TBSegments_Hit2_ID  =  fReader->getBranch<int16_t>("TimeBasedTrkg::TBSegments","Hit2_ID");
  TimeBasedTrkg__TBSegments_Hit3_ID  =  fReader->getBranch<int16_t>("TimeBasedTrkg::TBSegments","Hit3_ID");
  TimeBasedTrkg__TBSegments_Hit4_ID  =  fReader->getBranch<int16_t>("TimeBasedTrkg::TBSegments","Hit4_ID");
  TimeBasedTrkg__TBSegments_Hit5_ID  =  fReader->getBranch<int16_t>("TimeBasedTrkg::TBSegments","Hit5_ID");
  TimeBasedTrkg__TBSegments_Hit6_ID  =  fReader->getBranch<int16_t>("TimeBasedTrkg::TBSegments","Hit6_ID");
  TimeBasedTrkg__TBSegments_Hit7_ID  =  fReader->getBranch<int16_t>("TimeBasedTrkg::TBSegments","Hit7_ID");
  TimeBasedTrkg__TBSegments_Hit8_ID  =  fReader->getBranch<int16_t>("TimeBasedTrkg::TBSegments","Hit8_ID");
  TimeBasedTrkg__TBSegments_Hit9_ID  =  fReader->getBranch<int16_t>("TimeBasedTrkg::TBSegments","Hit9_ID");
  TimeBasedTrkg__TBSegments_SegEndPoint1X  =  fReader->getBranch<float>("TimeBasedTrkg::TBSegments","SegEndPoint1X");
  TimeBasedTrkg__TBSegments_SegEndPoint1Z  =  fReader->getBranch<float>("TimeBasedTrkg::TBSegments","SegEndPoint1Z");
  TimeBasedTrkg__TBSegments_SegEndPoint2X  =  fReader->getBranch<float>("TimeBasedTrkg::TBSegments","SegEndPoint2X");
  TimeBasedTrkg__TBSegments_SegEndPoint2Z  =  fReader->getBranch<float>("TimeBasedTrkg::TBSegments","SegEndPoint2Z");
  TimeBasedTrkg__TBSegments_avgWire  =  fReader->getBranch<float>("TimeBasedTrkg::TBSegments","avgWire");
  TimeBasedTrkg__TBSegments_fitChisqProb  =  fReader->getBranch<float>("TimeBasedTrkg::TBSegments","fitChisqProb");
  TimeBasedTrkg__TBSegments_fitInterc  =  fReader->getBranch<float>("TimeBasedTrkg::TBSegments","fitInterc");
  TimeBasedTrkg__TBSegments_fitIntercErr  =  fReader->getBranch<float>("TimeBasedTrkg::TBSegments","fitIntercErr");
  TimeBasedTrkg__TBSegments_fitSlope  =  fReader->getBranch<float>("TimeBasedTrkg::TBSegments","fitSlope");
  TimeBasedTrkg__TBSegments_fitSlopeErr  =  fReader->getBranch<float>("TimeBasedTrkg::TBSegments","fitSlopeErr");
  TimeBasedTrkg__TBSegments_id  =  fReader->getBranch<int16_t>("TimeBasedTrkg::TBSegments","id");
  TimeBasedTrkg__TBSegments_resiSum  =  fReader->getBranch<float>("TimeBasedTrkg::TBSegments","resiSum");
  TimeBasedTrkg__TBSegments_sector  =  fReader->getBranch<int8_t>("TimeBasedTrkg::TBSegments","sector");
  TimeBasedTrkg__TBSegments_size  =  fReader->getBranch<int8_t>("TimeBasedTrkg::TBSegments","size");
  TimeBasedTrkg__TBSegments_status  =  fReader->getBranch<int16_t>("TimeBasedTrkg::TBSegments","status");
  TimeBasedTrkg__TBSegments_superlayer  =  fReader->getBranch<int8_t>("TimeBasedTrkg::TBSegments","superlayer");
  TimeBasedTrkg__TBSegments_timeSum  =  fReader->getBranch<float>("TimeBasedTrkg::TBSegments","timeSum");
  TimeBasedTrkg__TBTracks_Cross1_ID  =  fReader->getBranch<int16_t>("TimeBasedTrkg::TBTracks","Cross1_ID");
  TimeBasedTrkg__TBTracks_Cross2_ID  =  fReader->getBranch<int16_t>("TimeBasedTrkg::TBTracks","Cross2_ID");
  TimeBasedTrkg__TBTracks_Cross3_ID  =  fReader->getBranch<int16_t>("TimeBasedTrkg::TBTracks","Cross3_ID");
  TimeBasedTrkg__TBTracks_Vtx0_x  =  fReader->getBranch<float>("TimeBasedTrkg::TBTracks","Vtx0_x");
  TimeBasedTrkg__TBTracks_Vtx0_y  =  fReader->getBranch<float>("TimeBasedTrkg::TBTracks","Vtx0_y");
  TimeBasedTrkg__TBTracks_Vtx0_z  =  fReader->getBranch<float>("TimeBasedTrkg::TBTracks","Vtx0_z");
  TimeBasedTrkg__TBTracks_c1_ux  =  fReader->getBranch<float>("TimeBasedTrkg::TBTracks","c1_ux");
  TimeBasedTrkg__TBTracks_c1_uy  =  fReader->getBranch<float>("TimeBasedTrkg::TBTracks","c1_uy");
  TimeBasedTrkg__TBTracks_c1_uz  =  fReader->getBranch<float>("TimeBasedTrkg::TBTracks","c1_uz");
  TimeBasedTrkg__TBTracks_c1_x  =  fReader->getBranch<float>("TimeBasedTrkg::TBTracks","c1_x");
  TimeBasedTrkg__TBTracks_c1_y  =  fReader->getBranch<float>("TimeBasedTrkg::TBTracks","c1_y");
  TimeBasedTrkg__TBTracks_c1_z  =  fReader->getBranch<float>("TimeBasedTrkg::TBTracks","c1_z");
  TimeBasedTrkg__TBTracks_c3_ux  =  fReader->getBranch<float>("TimeBasedTrkg::TBTracks","c3_ux");
  TimeBasedTrkg__TBTracks_c3_uy  =  fReader->getBranch<float>("TimeBasedTrkg::TBTracks","c3_uy");
  TimeBasedTrkg__TBTracks_c3_uz  =  fReader->getBranch<float>("TimeBasedTrkg::TBTracks","c3_uz");
  TimeBasedTrkg__TBTracks_c3_x  =  fReader->getBranch<float>("TimeBasedTrkg::TBTracks","c3_x");
  TimeBasedTrkg__TBTracks_c3_y  =  fReader->getBranch<float>("TimeBasedTrkg::TBTracks","c3_y");
  TimeBasedTrkg__TBTracks_c3_z  =  fReader->getBranch<float>("TimeBasedTrkg::TBTracks","c3_z");
  TimeBasedTrkg__TBTracks_chi2  =  fReader->getBranch<float>("TimeBasedTrkg::TBTracks","chi2");
  TimeBasedTrkg__TBTracks_id  =  fReader->getBranch<int16_t>("TimeBasedTrkg::TBTracks","id");
  TimeBasedTrkg__TBTracks_ndf  =  fReader->getBranch<int16_t>("TimeBasedTrkg::TBTracks","ndf");
  TimeBasedTrkg__TBTracks_p0_x  =  fReader->getBranch<float>("TimeBasedTrkg::TBTracks","p0_x");
  TimeBasedTrkg__TBTracks_p0_y  =  fReader->getBranch<float>("TimeBasedTrkg::TBTracks","p0_y");
  TimeBasedTrkg__TBTracks_p0_z  =  fReader->getBranch<float>("TimeBasedTrkg::TBTracks","p0_z");
  TimeBasedTrkg__TBTracks_pathlength  =  fReader->getBranch<float>("TimeBasedTrkg::TBTracks","pathlength");
  TimeBasedTrkg__TBTracks_q  =  fReader->getBranch<int8_t>("TimeBasedTrkg::TBTracks","q");
  TimeBasedTrkg__TBTracks_sector  =  fReader->getBranch<int8_t>("TimeBasedTrkg::TBTracks","sector");
  TimeBasedTrkg__TBTracks_status  =  fReader->getBranch<int16_t>("TimeBasedTrkg::TBTracks","status");
  TimeBasedTrkg__TBTracks_t1_px  =  fReader->getBranch<float>("TimeBasedTrkg::TBTracks","t1_px");
  TimeBasedTrkg__TBTracks_t1_py  =  fReader->getBranch<float>("TimeBasedTrkg::TBTracks","t1_py");
  TimeBasedTrkg__TBTracks_t1_pz  =  fReader->getBranch<float>("TimeBasedTrkg::TBTracks","t1_pz");
  TimeBasedTrkg__TBTracks_t1_x  =  fReader->getBranch<float>("TimeBasedTrkg::TBTracks","t1_x");
  TimeBasedTrkg__TBTracks_t1_y  =  fReader->getBranch<float>("TimeBasedTrkg::TBTracks","t1_y");
  TimeBasedTrkg__TBTracks_t1_z  =  fReader->getBranch<float>("TimeBasedTrkg::TBTracks","t1_z");
 TimeBasedTrkg__Trajectory_B  =  fReader->getBranch<float>("TimeBasedTrkg::Trajectory","B");
 TimeBasedTrkg__Trajectory_L  =  fReader->getBranch<float>("TimeBasedTrkg::Trajectory","L");
 TimeBasedTrkg__Trajectory_did  =  fReader->getBranch<int16_t>("TimeBasedTrkg::Trajectory","did");
 TimeBasedTrkg__Trajectory_tid  =  fReader->getBranch<int16_t>("TimeBasedTrkg::Trajectory","tid");
 TimeBasedTrkg__Trajectory_tx  =  fReader->getBranch<float>("TimeBasedTrkg::Trajectory","tx");
 TimeBasedTrkg__Trajectory_ty  =  fReader->getBranch<float>("TimeBasedTrkg::Trajectory","ty");
 TimeBasedTrkg__Trajectory_tz  =  fReader->getBranch<float>("TimeBasedTrkg::Trajectory","tz");
 TimeBasedTrkg__Trajectory_x  =  fReader->getBranch<float>("TimeBasedTrkg::Trajectory","x");
 TimeBasedTrkg__Trajectory_y  =  fReader->getBranch<float>("TimeBasedTrkg::Trajectory","y");
 TimeBasedTrkg__Trajectory_z  =  fReader->getBranch<float>("TimeBasedTrkg::Trajectory","z");
 return 0;
}
