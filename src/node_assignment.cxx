//// File automatically produced by format_hiponodes.py do not make changes here!!
#include "TIdentificatorCLAS12.h"
int TIdentificatorCLAS12::InitNodes()
{
         BMT_adc_ADC = fReader->getBranch<int32_t>   ("BMT::adc","ADC");
         BMT_adc_component = fReader->getBranch<int16_t>   ("BMT::adc","component");
         BMT_adc_integral = fReader->getBranch<int32_t>   ("BMT::adc","integral");
         BMT_adc_layer = fReader->getBranch<int8_t>    ("BMT::adc","layer");
         BMT_adc_order = fReader->getBranch<int8_t>    ("BMT::adc","order");
         BMT_adc_ped = fReader->getBranch<int16_t>   ("BMT::adc","ped");
         BMT_adc_sector = fReader->getBranch<int8_t>    ("BMT::adc","sector");
         BMT_adc_time = fReader->getBranch<float>     ("BMT::adc","time");
         BMT_adc_timestamp = fReader->getBranch<int64_t>   ("BMT::adc","timestamp");
         BMTRec_Clusters_ETot = fReader->getBranch<float>     ("BMTRec::Clusters","ETot");
         BMTRec_Clusters_Hit1_ID = fReader->getBranch<int16_t>   ("BMTRec::Clusters","Hit1_ID");
         BMTRec_Clusters_Hit2_ID = fReader->getBranch<int16_t>   ("BMTRec::Clusters","Hit2_ID");
         BMTRec_Clusters_Hit3_ID = fReader->getBranch<int16_t>   ("BMTRec::Clusters","Hit3_ID");
         BMTRec_Clusters_Hit4_ID = fReader->getBranch<int16_t>   ("BMTRec::Clusters","Hit4_ID");
         BMTRec_Clusters_Hit5_ID = fReader->getBranch<int16_t>   ("BMTRec::Clusters","Hit5_ID");
         BMTRec_Clusters_ID = fReader->getBranch<int16_t>   ("BMTRec::Clusters","ID");
         BMTRec_Clusters_centroid = fReader->getBranch<float>     ("BMTRec::Clusters","centroid");
         BMTRec_Clusters_centroidResidual = fReader->getBranch<float>     ("BMTRec::Clusters","centroidResidual");
         BMTRec_Clusters_layer = fReader->getBranch<int8_t>    ("BMTRec::Clusters","layer");
         BMTRec_Clusters_sector = fReader->getBranch<int8_t>    ("BMTRec::Clusters","sector");
         BMTRec_Clusters_seedE = fReader->getBranch<float>     ("BMTRec::Clusters","seedE");
         BMTRec_Clusters_seedResidual = fReader->getBranch<float>     ("BMTRec::Clusters","seedResidual");
         BMTRec_Clusters_seedStrip = fReader->getBranch<int32_t>   ("BMTRec::Clusters","seedStrip");
         BMTRec_Clusters_size = fReader->getBranch<int16_t>   ("BMTRec::Clusters","size");
         BMTRec_Clusters_trkID = fReader->getBranch<int16_t>   ("BMTRec::Clusters","trkID");
         BMTRec_Crosses_Cluster1_ID = fReader->getBranch<int16_t>   ("BMTRec::Crosses","Cluster1_ID");
         BMTRec_Crosses_Cluster2_ID = fReader->getBranch<int16_t>   ("BMTRec::Crosses","Cluster2_ID");
         BMTRec_Crosses_ID = fReader->getBranch<int16_t>   ("BMTRec::Crosses","ID");
         BMTRec_Crosses_err_x = fReader->getBranch<float>     ("BMTRec::Crosses","err_x");
         BMTRec_Crosses_err_y = fReader->getBranch<float>     ("BMTRec::Crosses","err_y");
         BMTRec_Crosses_err_z = fReader->getBranch<float>     ("BMTRec::Crosses","err_z");
         BMTRec_Crosses_region = fReader->getBranch<int8_t>    ("BMTRec::Crosses","region");
         BMTRec_Crosses_sector = fReader->getBranch<int8_t>    ("BMTRec::Crosses","sector");
         BMTRec_Crosses_trkID = fReader->getBranch<int16_t>   ("BMTRec::Crosses","trkID");
         BMTRec_Crosses_ux = fReader->getBranch<float>     ("BMTRec::Crosses","ux");
         BMTRec_Crosses_uy = fReader->getBranch<float>     ("BMTRec::Crosses","uy");
         BMTRec_Crosses_uz = fReader->getBranch<float>     ("BMTRec::Crosses","uz");
         BMTRec_Crosses_x = fReader->getBranch<float>     ("BMTRec::Crosses","x");
         BMTRec_Crosses_y = fReader->getBranch<float>     ("BMTRec::Crosses","y");
         BMTRec_Crosses_z = fReader->getBranch<float>     ("BMTRec::Crosses","z");
         BMTRec_Hits_ID = fReader->getBranch<int16_t>   ("BMTRec::Hits","ID");
         BMTRec_Hits_clusterID = fReader->getBranch<int16_t>   ("BMTRec::Hits","clusterID");
         BMTRec_Hits_fitResidual = fReader->getBranch<float>     ("BMTRec::Hits","fitResidual");
         BMTRec_Hits_layer = fReader->getBranch<int8_t>    ("BMTRec::Hits","layer");
         BMTRec_Hits_sector = fReader->getBranch<int8_t>    ("BMTRec::Hits","sector");
         BMTRec_Hits_strip = fReader->getBranch<int32_t>   ("BMTRec::Hits","strip");
         BMTRec_Hits_trkID = fReader->getBranch<int16_t>   ("BMTRec::Hits","trkID");
         BMTRec_Hits_trkingStat = fReader->getBranch<int32_t>   ("BMTRec::Hits","trkingStat");
         BMTRec_LayerEffs_layer = fReader->getBranch<int8_t>    ("BMTRec::LayerEffs","layer");
         BMTRec_LayerEffs_residual = fReader->getBranch<float>     ("BMTRec::LayerEffs","residual");
         BMTRec_LayerEffs_sector = fReader->getBranch<int8_t>    ("BMTRec::LayerEffs","sector");
         BMTRec_LayerEffs_status = fReader->getBranch<int8_t>    ("BMTRec::LayerEffs","status");
         BST_adc_ADC = fReader->getBranch<int32_t>   ("BST::adc","ADC");
         BST_adc_component = fReader->getBranch<int16_t>   ("BST::adc","component");
         BST_adc_layer = fReader->getBranch<int8_t>    ("BST::adc","layer");
         BST_adc_order = fReader->getBranch<int8_t>    ("BST::adc","order");
         BST_adc_ped = fReader->getBranch<int16_t>   ("BST::adc","ped");
         BST_adc_sector = fReader->getBranch<int8_t>    ("BST::adc","sector");
         BST_adc_time = fReader->getBranch<float>     ("BST::adc","time");
         BST_adc_timestamp = fReader->getBranch<int64_t>   ("BST::adc","timestamp");
         BSTRec_Clusters_ETot = fReader->getBranch<float>     ("BSTRec::Clusters","ETot");
         BSTRec_Clusters_Hit1_ID = fReader->getBranch<int16_t>   ("BSTRec::Clusters","Hit1_ID");
         BSTRec_Clusters_Hit2_ID = fReader->getBranch<int16_t>   ("BSTRec::Clusters","Hit2_ID");
         BSTRec_Clusters_Hit3_ID = fReader->getBranch<int16_t>   ("BSTRec::Clusters","Hit3_ID");
         BSTRec_Clusters_Hit4_ID = fReader->getBranch<int16_t>   ("BSTRec::Clusters","Hit4_ID");
         BSTRec_Clusters_Hit5_ID = fReader->getBranch<int16_t>   ("BSTRec::Clusters","Hit5_ID");
         BSTRec_Clusters_ID = fReader->getBranch<int16_t>   ("BSTRec::Clusters","ID");
         BSTRec_Clusters_centroid = fReader->getBranch<float>     ("BSTRec::Clusters","centroid");
         BSTRec_Clusters_centroidResidual = fReader->getBranch<float>     ("BSTRec::Clusters","centroidResidual");
         BSTRec_Clusters_layer = fReader->getBranch<int8_t>    ("BSTRec::Clusters","layer");
         BSTRec_Clusters_sector = fReader->getBranch<int8_t>    ("BSTRec::Clusters","sector");
         BSTRec_Clusters_seedE = fReader->getBranch<float>     ("BSTRec::Clusters","seedE");
         BSTRec_Clusters_seedResidual = fReader->getBranch<float>     ("BSTRec::Clusters","seedResidual");
         BSTRec_Clusters_seedStrip = fReader->getBranch<int32_t>   ("BSTRec::Clusters","seedStrip");
         BSTRec_Clusters_size = fReader->getBranch<int16_t>   ("BSTRec::Clusters","size");
         BSTRec_Clusters_trkID = fReader->getBranch<int16_t>   ("BSTRec::Clusters","trkID");
         BSTRec_Crosses_Cluster1_ID = fReader->getBranch<int16_t>   ("BSTRec::Crosses","Cluster1_ID");
         BSTRec_Crosses_Cluster2_ID = fReader->getBranch<int16_t>   ("BSTRec::Crosses","Cluster2_ID");
         BSTRec_Crosses_ID = fReader->getBranch<int16_t>   ("BSTRec::Crosses","ID");
         BSTRec_Crosses_err_x = fReader->getBranch<float>     ("BSTRec::Crosses","err_x");
         BSTRec_Crosses_err_y = fReader->getBranch<float>     ("BSTRec::Crosses","err_y");
         BSTRec_Crosses_err_z = fReader->getBranch<float>     ("BSTRec::Crosses","err_z");
         BSTRec_Crosses_region = fReader->getBranch<int8_t>    ("BSTRec::Crosses","region");
         BSTRec_Crosses_sector = fReader->getBranch<int8_t>    ("BSTRec::Crosses","sector");
         BSTRec_Crosses_trkID = fReader->getBranch<int16_t>   ("BSTRec::Crosses","trkID");
         BSTRec_Crosses_ux = fReader->getBranch<float>     ("BSTRec::Crosses","ux");
         BSTRec_Crosses_uy = fReader->getBranch<float>     ("BSTRec::Crosses","uy");
         BSTRec_Crosses_uz = fReader->getBranch<float>     ("BSTRec::Crosses","uz");
         BSTRec_Crosses_x = fReader->getBranch<float>     ("BSTRec::Crosses","x");
         BSTRec_Crosses_y = fReader->getBranch<float>     ("BSTRec::Crosses","y");
         BSTRec_Crosses_z = fReader->getBranch<float>     ("BSTRec::Crosses","z");
         BSTRec_Hits_ID = fReader->getBranch<int16_t>   ("BSTRec::Hits","ID");
         BSTRec_Hits_clusterID = fReader->getBranch<int16_t>   ("BSTRec::Hits","clusterID");
         BSTRec_Hits_fitResidual = fReader->getBranch<float>     ("BSTRec::Hits","fitResidual");
         BSTRec_Hits_layer = fReader->getBranch<int8_t>    ("BSTRec::Hits","layer");
         BSTRec_Hits_sector = fReader->getBranch<int8_t>    ("BSTRec::Hits","sector");
         BSTRec_Hits_strip = fReader->getBranch<int32_t>   ("BSTRec::Hits","strip");
         BSTRec_Hits_trkID = fReader->getBranch<int16_t>   ("BSTRec::Hits","trkID");
         BSTRec_Hits_trkingStat = fReader->getBranch<int32_t>   ("BSTRec::Hits","trkingStat");
         BSTRec_LayerEffs_layer = fReader->getBranch<int8_t>    ("BSTRec::LayerEffs","layer");
         BSTRec_LayerEffs_residual = fReader->getBranch<float>     ("BSTRec::LayerEffs","residual");
         BSTRec_LayerEffs_sector = fReader->getBranch<int8_t>    ("BSTRec::LayerEffs","sector");
         BSTRec_LayerEffs_status = fReader->getBranch<int8_t>    ("BSTRec::LayerEffs","status");
         CND_adc_ADC = fReader->getBranch<int32_t>   ("CND::adc","ADC");
         CND_adc_component = fReader->getBranch<int16_t>   ("CND::adc","component");
         CND_adc_layer = fReader->getBranch<int8_t>    ("CND::adc","layer");
         CND_adc_order = fReader->getBranch<int8_t>    ("CND::adc","order");
         CND_adc_ped = fReader->getBranch<int16_t>   ("CND::adc","ped");
         CND_adc_sector = fReader->getBranch<int8_t>    ("CND::adc","sector");
         CND_adc_time = fReader->getBranch<float>     ("CND::adc","time");
         CND_clusters_component = fReader->getBranch<int16_t>   ("CND::clusters","component");
         CND_clusters_energy = fReader->getBranch<float>     ("CND::clusters","energy");
         CND_clusters_id = fReader->getBranch<int16_t>   ("CND::clusters","id");
         CND_clusters_layer = fReader->getBranch<int8_t>    ("CND::clusters","layer");
         CND_clusters_nhits = fReader->getBranch<int16_t>   ("CND::clusters","nhits");
         CND_clusters_sector = fReader->getBranch<int8_t>    ("CND::clusters","sector");
         CND_clusters_status = fReader->getBranch<int16_t>   ("CND::clusters","status");
         CND_clusters_time = fReader->getBranch<float>     ("CND::clusters","time");
         CND_clusters_x = fReader->getBranch<float>     ("CND::clusters","x");
         CND_clusters_y = fReader->getBranch<float>     ("CND::clusters","y");
         CND_clusters_z = fReader->getBranch<float>     ("CND::clusters","z");
         CND_hits_component = fReader->getBranch<int16_t>   ("CND::hits","component");
         CND_hits_energy = fReader->getBranch<float>     ("CND::hits","energy");
         CND_hits_energy_unc = fReader->getBranch<float>     ("CND::hits","energy_unc");
         CND_hits_id = fReader->getBranch<int16_t>   ("CND::hits","id");
         CND_hits_indexLadc = fReader->getBranch<int16_t>   ("CND::hits","indexLadc");
         CND_hits_indexLtdc = fReader->getBranch<int16_t>   ("CND::hits","indexLtdc");
         CND_hits_indexRadc = fReader->getBranch<int16_t>   ("CND::hits","indexRadc");
         CND_hits_indexRtdc = fReader->getBranch<int16_t>   ("CND::hits","indexRtdc");
         CND_hits_layer = fReader->getBranch<int8_t>    ("CND::hits","layer");
         CND_hits_pathlength = fReader->getBranch<float>     ("CND::hits","pathlength");
         CND_hits_sector = fReader->getBranch<int8_t>    ("CND::hits","sector");
         CND_hits_status = fReader->getBranch<int16_t>   ("CND::hits","status");
         CND_hits_time = fReader->getBranch<float>     ("CND::hits","time");
         CND_hits_time_unc = fReader->getBranch<float>     ("CND::hits","time_unc");
         CND_hits_tlength = fReader->getBranch<float>     ("CND::hits","tlength");
         CND_hits_trkID = fReader->getBranch<int16_t>   ("CND::hits","trkID");
         CND_hits_tx = fReader->getBranch<float>     ("CND::hits","tx");
         CND_hits_ty = fReader->getBranch<float>     ("CND::hits","ty");
         CND_hits_tz = fReader->getBranch<float>     ("CND::hits","tz");
         CND_hits_x = fReader->getBranch<float>     ("CND::hits","x");
         CND_hits_x_unc = fReader->getBranch<float>     ("CND::hits","x_unc");
         CND_hits_y = fReader->getBranch<float>     ("CND::hits","y");
         CND_hits_y_unc = fReader->getBranch<float>     ("CND::hits","y_unc");
         CND_hits_z = fReader->getBranch<float>     ("CND::hits","z");
         CND_hits_z_unc = fReader->getBranch<float>     ("CND::hits","z_unc");
         CND_tdc_TDC = fReader->getBranch<int32_t>   ("CND::tdc","TDC");
         CND_tdc_component = fReader->getBranch<int16_t>   ("CND::tdc","component");
         CND_tdc_layer = fReader->getBranch<int8_t>    ("CND::tdc","layer");
         CND_tdc_order = fReader->getBranch<int8_t>    ("CND::tdc","order");
         CND_tdc_sector = fReader->getBranch<int8_t>    ("CND::tdc","sector");
         CTOF_adc_ADC = fReader->getBranch<int32_t>   ("CTOF::adc","ADC");
         CTOF_adc_component = fReader->getBranch<int16_t>   ("CTOF::adc","component");
         CTOF_adc_layer = fReader->getBranch<int8_t>    ("CTOF::adc","layer");
         CTOF_adc_order = fReader->getBranch<int8_t>    ("CTOF::adc","order");
         CTOF_adc_ped = fReader->getBranch<int16_t>   ("CTOF::adc","ped");
         CTOF_adc_sector = fReader->getBranch<int8_t>    ("CTOF::adc","sector");
         CTOF_adc_time = fReader->getBranch<float>     ("CTOF::adc","time");
         CTOF_hits_adc_idx1 = fReader->getBranch<int16_t>   ("CTOF::hits","adc_idx1");
         CTOF_hits_adc_idx2 = fReader->getBranch<int16_t>   ("CTOF::hits","adc_idx2");
         CTOF_hits_component = fReader->getBranch<int16_t>   ("CTOF::hits","component");
         CTOF_hits_energy = fReader->getBranch<float>     ("CTOF::hits","energy");
         CTOF_hits_energy_unc = fReader->getBranch<float>     ("CTOF::hits","energy_unc");
         CTOF_hits_id = fReader->getBranch<int16_t>   ("CTOF::hits","id");
         CTOF_hits_layer = fReader->getBranch<int8_t>    ("CTOF::hits","layer");
         CTOF_hits_pathLength = fReader->getBranch<float>     ("CTOF::hits","pathLength");
         CTOF_hits_pathLengthThruBar = fReader->getBranch<float>     ("CTOF::hits","pathLengthThruBar");
         CTOF_hits_sector = fReader->getBranch<int8_t>    ("CTOF::hits","sector");
         CTOF_hits_status = fReader->getBranch<int16_t>   ("CTOF::hits","status");
         CTOF_hits_tdc_idx1 = fReader->getBranch<int16_t>   ("CTOF::hits","tdc_idx1");
         CTOF_hits_tdc_idx2 = fReader->getBranch<int16_t>   ("CTOF::hits","tdc_idx2");
         CTOF_hits_time = fReader->getBranch<float>     ("CTOF::hits","time");
         CTOF_hits_time_unc = fReader->getBranch<float>     ("CTOF::hits","time_unc");
         CTOF_hits_trkID = fReader->getBranch<int16_t>   ("CTOF::hits","trkID");
         CTOF_hits_tx = fReader->getBranch<float>     ("CTOF::hits","tx");
         CTOF_hits_ty = fReader->getBranch<float>     ("CTOF::hits","ty");
         CTOF_hits_tz = fReader->getBranch<float>     ("CTOF::hits","tz");
         CTOF_hits_x = fReader->getBranch<float>     ("CTOF::hits","x");
         CTOF_hits_x_unc = fReader->getBranch<float>     ("CTOF::hits","x_unc");
         CTOF_hits_y = fReader->getBranch<float>     ("CTOF::hits","y");
         CTOF_hits_y_unc = fReader->getBranch<float>     ("CTOF::hits","y_unc");
         CTOF_hits_z = fReader->getBranch<float>     ("CTOF::hits","z");
         CTOF_hits_z_unc = fReader->getBranch<float>     ("CTOF::hits","z_unc");
         CTOF_rawhits_component = fReader->getBranch<int16_t>   ("CTOF::rawhits","component");
         CTOF_rawhits_energy_down = fReader->getBranch<float>     ("CTOF::rawhits","energy_down");
         CTOF_rawhits_energy_down_unc = fReader->getBranch<float>     ("CTOF::rawhits","energy_down_unc");
         CTOF_rawhits_energy_up = fReader->getBranch<float>     ("CTOF::rawhits","energy_up");
         CTOF_rawhits_energy_up_unc = fReader->getBranch<float>     ("CTOF::rawhits","energy_up_unc");
         CTOF_rawhits_id = fReader->getBranch<int16_t>   ("CTOF::rawhits","id");
         CTOF_rawhits_status = fReader->getBranch<int16_t>   ("CTOF::rawhits","status");
         CTOF_rawhits_time_down = fReader->getBranch<float>     ("CTOF::rawhits","time_down");
         CTOF_rawhits_time_down_unc = fReader->getBranch<float>     ("CTOF::rawhits","time_down_unc");
         CTOF_rawhits_time_up = fReader->getBranch<float>     ("CTOF::rawhits","time_up");
         CTOF_rawhits_time_up_unc = fReader->getBranch<float>     ("CTOF::rawhits","time_up_unc");
         CTOF_tdc_TDC = fReader->getBranch<int32_t>   ("CTOF::tdc","TDC");
         CTOF_tdc_component = fReader->getBranch<int16_t>   ("CTOF::tdc","component");
         CTOF_tdc_layer = fReader->getBranch<int8_t>    ("CTOF::tdc","layer");
         CTOF_tdc_order = fReader->getBranch<int8_t>    ("CTOF::tdc","order");
         CTOF_tdc_sector = fReader->getBranch<int8_t>    ("CTOF::tdc","sector");
         CVTRec_Cosmics_Cross10_ID = fReader->getBranch<int16_t>   ("CVTRec::Cosmics","Cross10_ID");
         CVTRec_Cosmics_Cross11_ID = fReader->getBranch<int16_t>   ("CVTRec::Cosmics","Cross11_ID");
         CVTRec_Cosmics_Cross12_ID = fReader->getBranch<int16_t>   ("CVTRec::Cosmics","Cross12_ID");
         CVTRec_Cosmics_Cross13_ID = fReader->getBranch<int16_t>   ("CVTRec::Cosmics","Cross13_ID");
         CVTRec_Cosmics_Cross14_ID = fReader->getBranch<int16_t>   ("CVTRec::Cosmics","Cross14_ID");
         CVTRec_Cosmics_Cross15_ID = fReader->getBranch<int16_t>   ("CVTRec::Cosmics","Cross15_ID");
         CVTRec_Cosmics_Cross16_ID = fReader->getBranch<int16_t>   ("CVTRec::Cosmics","Cross16_ID");
         CVTRec_Cosmics_Cross17_ID = fReader->getBranch<int16_t>   ("CVTRec::Cosmics","Cross17_ID");
         CVTRec_Cosmics_Cross18_ID = fReader->getBranch<int16_t>   ("CVTRec::Cosmics","Cross18_ID");
         CVTRec_Cosmics_Cross1_ID = fReader->getBranch<int16_t>   ("CVTRec::Cosmics","Cross1_ID");
         CVTRec_Cosmics_Cross2_ID = fReader->getBranch<int16_t>   ("CVTRec::Cosmics","Cross2_ID");
         CVTRec_Cosmics_Cross3_ID = fReader->getBranch<int16_t>   ("CVTRec::Cosmics","Cross3_ID");
         CVTRec_Cosmics_Cross4_ID = fReader->getBranch<int16_t>   ("CVTRec::Cosmics","Cross4_ID");
         CVTRec_Cosmics_Cross5_ID = fReader->getBranch<int16_t>   ("CVTRec::Cosmics","Cross5_ID");
         CVTRec_Cosmics_Cross6_ID = fReader->getBranch<int16_t>   ("CVTRec::Cosmics","Cross6_ID");
         CVTRec_Cosmics_Cross7_ID = fReader->getBranch<int16_t>   ("CVTRec::Cosmics","Cross7_ID");
         CVTRec_Cosmics_Cross8_ID = fReader->getBranch<int16_t>   ("CVTRec::Cosmics","Cross8_ID");
         CVTRec_Cosmics_Cross9_ID = fReader->getBranch<int16_t>   ("CVTRec::Cosmics","Cross9_ID");
         CVTRec_Cosmics_ID = fReader->getBranch<int16_t>   ("CVTRec::Cosmics","ID");
         CVTRec_Cosmics_chi2 = fReader->getBranch<float>     ("CVTRec::Cosmics","chi2");
         CVTRec_Cosmics_ndf = fReader->getBranch<int16_t>   ("CVTRec::Cosmics","ndf");
         CVTRec_Cosmics_phi = fReader->getBranch<float>     ("CVTRec::Cosmics","phi");
         CVTRec_Cosmics_theta = fReader->getBranch<float>     ("CVTRec::Cosmics","theta");
         CVTRec_Cosmics_trkline_yx_interc = fReader->getBranch<float>     ("CVTRec::Cosmics","trkline_yx_interc");
         CVTRec_Cosmics_trkline_yx_slope = fReader->getBranch<float>     ("CVTRec::Cosmics","trkline_yx_slope");
         CVTRec_Cosmics_trkline_yz_interc = fReader->getBranch<float>     ("CVTRec::Cosmics","trkline_yz_interc");
         CVTRec_Cosmics_trkline_yz_slope = fReader->getBranch<float>     ("CVTRec::Cosmics","trkline_yz_slope");
         CVTRec_Tracks_Cross1_ID = fReader->getBranch<int16_t>   ("CVTRec::Tracks","Cross1_ID");
         CVTRec_Tracks_Cross2_ID = fReader->getBranch<int16_t>   ("CVTRec::Tracks","Cross2_ID");
         CVTRec_Tracks_Cross3_ID = fReader->getBranch<int16_t>   ("CVTRec::Tracks","Cross3_ID");
         CVTRec_Tracks_Cross4_ID = fReader->getBranch<int16_t>   ("CVTRec::Tracks","Cross4_ID");
         CVTRec_Tracks_Cross5_ID = fReader->getBranch<int16_t>   ("CVTRec::Tracks","Cross5_ID");
         CVTRec_Tracks_Cross6_ID = fReader->getBranch<int16_t>   ("CVTRec::Tracks","Cross6_ID");
         CVTRec_Tracks_Cross7_ID = fReader->getBranch<int16_t>   ("CVTRec::Tracks","Cross7_ID");
         CVTRec_Tracks_Cross8_ID = fReader->getBranch<int16_t>   ("CVTRec::Tracks","Cross8_ID");
         CVTRec_Tracks_Cross9_ID = fReader->getBranch<int16_t>   ("CVTRec::Tracks","Cross9_ID");
         CVTRec_Tracks_ID = fReader->getBranch<int16_t>   ("CVTRec::Tracks","ID");
         CVTRec_Tracks_c_ux = fReader->getBranch<float>     ("CVTRec::Tracks","c_ux");
         CVTRec_Tracks_c_uy = fReader->getBranch<float>     ("CVTRec::Tracks","c_uy");
         CVTRec_Tracks_c_uz = fReader->getBranch<float>     ("CVTRec::Tracks","c_uz");
         CVTRec_Tracks_c_x = fReader->getBranch<float>     ("CVTRec::Tracks","c_x");
         CVTRec_Tracks_c_y = fReader->getBranch<float>     ("CVTRec::Tracks","c_y");
         CVTRec_Tracks_c_z = fReader->getBranch<float>     ("CVTRec::Tracks","c_z");
         CVTRec_Tracks_chi2 = fReader->getBranch<float>     ("CVTRec::Tracks","chi2");
         CVTRec_Tracks_circlefit_chi2_per_ndf = fReader->getBranch<float>     ("CVTRec::Tracks","circlefit_chi2_per_ndf");
         CVTRec_Tracks_cov_d02 = fReader->getBranch<float>     ("CVTRec::Tracks","cov_d02");
         CVTRec_Tracks_cov_d0phi0 = fReader->getBranch<float>     ("CVTRec::Tracks","cov_d0phi0");
         CVTRec_Tracks_cov_d0rho = fReader->getBranch<float>     ("CVTRec::Tracks","cov_d0rho");
         CVTRec_Tracks_cov_phi02 = fReader->getBranch<float>     ("CVTRec::Tracks","cov_phi02");
         CVTRec_Tracks_cov_phi0rho = fReader->getBranch<float>     ("CVTRec::Tracks","cov_phi0rho");
         CVTRec_Tracks_cov_rho2 = fReader->getBranch<float>     ("CVTRec::Tracks","cov_rho2");
         CVTRec_Tracks_cov_tandip2 = fReader->getBranch<float>     ("CVTRec::Tracks","cov_tandip2");
         CVTRec_Tracks_cov_z02 = fReader->getBranch<float>     ("CVTRec::Tracks","cov_z02");
         CVTRec_Tracks_d0 = fReader->getBranch<float>     ("CVTRec::Tracks","d0");
         CVTRec_Tracks_fittingMethod = fReader->getBranch<int8_t>    ("CVTRec::Tracks","fittingMethod");
         CVTRec_Tracks_linefit_chi2_per_ndf = fReader->getBranch<float>     ("CVTRec::Tracks","linefit_chi2_per_ndf");
         CVTRec_Tracks_ndf = fReader->getBranch<int16_t>   ("CVTRec::Tracks","ndf");
         CVTRec_Tracks_p = fReader->getBranch<float>     ("CVTRec::Tracks","p");
         CVTRec_Tracks_pathlength = fReader->getBranch<float>     ("CVTRec::Tracks","pathlength");
         CVTRec_Tracks_phi0 = fReader->getBranch<float>     ("CVTRec::Tracks","phi0");
         CVTRec_Tracks_pt = fReader->getBranch<float>     ("CVTRec::Tracks","pt");
         CVTRec_Tracks_q = fReader->getBranch<int8_t>    ("CVTRec::Tracks","q");
         CVTRec_Tracks_tandip = fReader->getBranch<float>     ("CVTRec::Tracks","tandip");
         CVTRec_Tracks_z0 = fReader->getBranch<float>     ("CVTRec::Tracks","z0");
         CVTRec_Trajectory_CalcCentroidStrip = fReader->getBranch<float>     ("CVTRec::Trajectory","CalcCentroidStrip");
         CVTRec_Trajectory_ID = fReader->getBranch<int16_t>   ("CVTRec::Trajectory","ID");
         CVTRec_Trajectory_LayerTrackIntersPlane = fReader->getBranch<int8_t>    ("CVTRec::Trajectory","LayerTrackIntersPlane");
         CVTRec_Trajectory_PhiTrackIntersPlane = fReader->getBranch<float>     ("CVTRec::Trajectory","PhiTrackIntersPlane");
         CVTRec_Trajectory_SectorTrackIntersPlane = fReader->getBranch<int8_t>    ("CVTRec::Trajectory","SectorTrackIntersPlane");
         CVTRec_Trajectory_ThetaTrackIntersPlane = fReader->getBranch<float>     ("CVTRec::Trajectory","ThetaTrackIntersPlane");
         CVTRec_Trajectory_XtrackIntersPlane = fReader->getBranch<float>     ("CVTRec::Trajectory","XtrackIntersPlane");
         CVTRec_Trajectory_YtrackIntersPlane = fReader->getBranch<float>     ("CVTRec::Trajectory","YtrackIntersPlane");
         CVTRec_Trajectory_ZtrackIntersPlane = fReader->getBranch<float>     ("CVTRec::Trajectory","ZtrackIntersPlane");
         CVTRec_Trajectory_trkToMPlnAngl = fReader->getBranch<float>     ("CVTRec::Trajectory","trkToMPlnAngl");
         DC_doca_LR = fReader->getBranch<int8_t>    ("DC::doca","LR");
         DC_doca_doca = fReader->getBranch<float>     ("DC::doca","doca");
         DC_doca_sdoca = fReader->getBranch<float>     ("DC::doca","sdoca");
         DC_doca_stime = fReader->getBranch<float>     ("DC::doca","stime");
         DC_doca_time = fReader->getBranch<float>     ("DC::doca","time");
         DC_tdc_TDC = fReader->getBranch<int32_t>   ("DC::tdc","TDC");
         DC_tdc_component = fReader->getBranch<int16_t>   ("DC::tdc","component");
         DC_tdc_layer = fReader->getBranch<int8_t>    ("DC::tdc","layer");
         DC_tdc_order = fReader->getBranch<int8_t>    ("DC::tdc","order");
         DC_tdc_sector = fReader->getBranch<int8_t>    ("DC::tdc","sector");
         DETECTOR_Hits_component = fReader->getBranch<int16_t>   ("DETECTOR::Hits","component");
         DETECTOR_Hits_detector = fReader->getBranch<int16_t>   ("DETECTOR::Hits","detector");
         DETECTOR_Hits_energy = fReader->getBranch<float>     ("DETECTOR::Hits","energy");
         DETECTOR_Hits_layer = fReader->getBranch<int16_t>   ("DETECTOR::Hits","layer");
         DETECTOR_Hits_path = fReader->getBranch<float>     ("DETECTOR::Hits","path");
         DETECTOR_Hits_sector = fReader->getBranch<int16_t>   ("DETECTOR::Hits","sector");
         DETECTOR_Hits_time = fReader->getBranch<float>     ("DETECTOR::Hits","time");
         DETECTOR_ccpb_nphe = fReader->getBranch<float>     ("DETECTOR::ccpb","nphe");
         DETECTOR_ccpb_path = fReader->getBranch<float>     ("DETECTOR::ccpb","path");
         DETECTOR_ccpb_sector = fReader->getBranch<int8_t>    ("DETECTOR::ccpb","sector");
         DETECTOR_ccpb_time = fReader->getBranch<float>     ("DETECTOR::ccpb","time");
         DETECTOR_ecpb_ein = fReader->getBranch<float>     ("DETECTOR::ecpb","ein");
         DETECTOR_ecpb_eout = fReader->getBranch<float>     ("DETECTOR::ecpb","eout");
         DETECTOR_ecpb_etot = fReader->getBranch<float>     ("DETECTOR::ecpb","etot");
         DETECTOR_ecpb_path = fReader->getBranch<float>     ("DETECTOR::ecpb","path");
         DETECTOR_ecpb_sector = fReader->getBranch<int8_t>    ("DETECTOR::ecpb","sector");
         DETECTOR_ecpb_time = fReader->getBranch<float>     ("DETECTOR::ecpb","time");
         DETECTOR_ecpb_x = fReader->getBranch<float>     ("DETECTOR::ecpb","x");
         DETECTOR_ecpb_y = fReader->getBranch<float>     ("DETECTOR::ecpb","y");
         DETECTOR_ecpb_z = fReader->getBranch<float>     ("DETECTOR::ecpb","z");
         DETECTOR_icpb_ecc = fReader->getBranch<float>     ("DETECTOR::icpb","ecc");
         DETECTOR_icpb_etc = fReader->getBranch<float>     ("DETECTOR::icpb","etc");
         DETECTOR_icpb_tc = fReader->getBranch<float>     ("DETECTOR::icpb","tc");
         DETECTOR_icpb_xc = fReader->getBranch<float>     ("DETECTOR::icpb","xc");
         DETECTOR_icpb_yc = fReader->getBranch<float>     ("DETECTOR::icpb","yc");
         DETECTOR_lcpb_ein = fReader->getBranch<float>     ("DETECTOR::lcpb","ein");
         DETECTOR_lcpb_etot = fReader->getBranch<float>     ("DETECTOR::lcpb","etot");
         DETECTOR_lcpb_path = fReader->getBranch<float>     ("DETECTOR::lcpb","path");
         DETECTOR_lcpb_sector = fReader->getBranch<int8_t>    ("DETECTOR::lcpb","sector");
         DETECTOR_lcpb_time = fReader->getBranch<float>     ("DETECTOR::lcpb","time");
         DETECTOR_lcpb_x = fReader->getBranch<float>     ("DETECTOR::lcpb","x");
         DETECTOR_lcpb_y = fReader->getBranch<float>     ("DETECTOR::lcpb","y");
         DETECTOR_lcpb_z = fReader->getBranch<float>     ("DETECTOR::lcpb","z");
         DETECTOR_scpb_edep = fReader->getBranch<float>     ("DETECTOR::scpb","edep");
         DETECTOR_scpb_paddle = fReader->getBranch<int8_t>    ("DETECTOR::scpb","paddle");
         DETECTOR_scpb_path = fReader->getBranch<float>     ("DETECTOR::scpb","path");
         DETECTOR_scpb_sector = fReader->getBranch<int8_t>    ("DETECTOR::scpb","sector");
         DETECTOR_scpb_time = fReader->getBranch<float>     ("DETECTOR::scpb","time");
         ECAL_adc_ADC = fReader->getBranch<int32_t>   ("ECAL::adc","ADC");
         ECAL_adc_component = fReader->getBranch<int16_t>   ("ECAL::adc","component");
         ECAL_adc_layer = fReader->getBranch<int8_t>    ("ECAL::adc","layer");
         ECAL_adc_order = fReader->getBranch<int8_t>    ("ECAL::adc","order");
         ECAL_adc_ped = fReader->getBranch<int16_t>   ("ECAL::adc","ped");
         ECAL_adc_sector = fReader->getBranch<int8_t>    ("ECAL::adc","sector");
         ECAL_adc_time = fReader->getBranch<float>     ("ECAL::adc","time");
         ECAL_calib_energy = fReader->getBranch<float>     ("ECAL::calib","energy");
         ECAL_calib_layer = fReader->getBranch<int8_t>    ("ECAL::calib","layer");
         ECAL_calib_rawEU = fReader->getBranch<float>     ("ECAL::calib","rawEU");
         ECAL_calib_rawEV = fReader->getBranch<float>     ("ECAL::calib","rawEV");
         ECAL_calib_rawEW = fReader->getBranch<float>     ("ECAL::calib","rawEW");
         ECAL_calib_recEU = fReader->getBranch<float>     ("ECAL::calib","recEU");
         ECAL_calib_recEV = fReader->getBranch<float>     ("ECAL::calib","recEV");
         ECAL_calib_recEW = fReader->getBranch<float>     ("ECAL::calib","recEW");
         ECAL_calib_sector = fReader->getBranch<int8_t>    ("ECAL::calib","sector");
         ECAL_clusters_coordU = fReader->getBranch<int32_t>   ("ECAL::clusters","coordU");
         ECAL_clusters_coordV = fReader->getBranch<int32_t>   ("ECAL::clusters","coordV");
         ECAL_clusters_coordW = fReader->getBranch<int32_t>   ("ECAL::clusters","coordW");
         ECAL_clusters_energy = fReader->getBranch<float>     ("ECAL::clusters","energy");
         ECAL_clusters_id = fReader->getBranch<int16_t>   ("ECAL::clusters","id");
         ECAL_clusters_idU = fReader->getBranch<int8_t>    ("ECAL::clusters","idU");
         ECAL_clusters_idV = fReader->getBranch<int8_t>    ("ECAL::clusters","idV");
         ECAL_clusters_idW = fReader->getBranch<int8_t>    ("ECAL::clusters","idW");
         ECAL_clusters_layer = fReader->getBranch<int8_t>    ("ECAL::clusters","layer");
         ECAL_clusters_sector = fReader->getBranch<int8_t>    ("ECAL::clusters","sector");
         ECAL_clusters_status = fReader->getBranch<int16_t>   ("ECAL::clusters","status");
         ECAL_clusters_time = fReader->getBranch<float>     ("ECAL::clusters","time");
         ECAL_clusters_widthU = fReader->getBranch<float>     ("ECAL::clusters","widthU");
         ECAL_clusters_widthV = fReader->getBranch<float>     ("ECAL::clusters","widthV");
         ECAL_clusters_widthW = fReader->getBranch<float>     ("ECAL::clusters","widthW");
         ECAL_clusters_x = fReader->getBranch<float>     ("ECAL::clusters","x");
         ECAL_clusters_y = fReader->getBranch<float>     ("ECAL::clusters","y");
         ECAL_clusters_z = fReader->getBranch<float>     ("ECAL::clusters","z");
         ECAL_hits_energy = fReader->getBranch<float>     ("ECAL::hits","energy");
         ECAL_hits_id = fReader->getBranch<int16_t>   ("ECAL::hits","id");
         ECAL_hits_layer = fReader->getBranch<int8_t>    ("ECAL::hits","layer");
         ECAL_hits_peakid = fReader->getBranch<int8_t>    ("ECAL::hits","peakid");
         ECAL_hits_sector = fReader->getBranch<int8_t>    ("ECAL::hits","sector");
         ECAL_hits_status = fReader->getBranch<int16_t>   ("ECAL::hits","status");
         ECAL_hits_strip = fReader->getBranch<int8_t>    ("ECAL::hits","strip");
         ECAL_hits_time = fReader->getBranch<float>     ("ECAL::hits","time");
         ECAL_moments_distU = fReader->getBranch<float>     ("ECAL::moments","distU");
         ECAL_moments_distV = fReader->getBranch<float>     ("ECAL::moments","distV");
         ECAL_moments_distW = fReader->getBranch<float>     ("ECAL::moments","distW");
         ECAL_moments_m1u = fReader->getBranch<float>     ("ECAL::moments","m1u");
         ECAL_moments_m1v = fReader->getBranch<float>     ("ECAL::moments","m1v");
         ECAL_moments_m1w = fReader->getBranch<float>     ("ECAL::moments","m1w");
         ECAL_moments_m2u = fReader->getBranch<float>     ("ECAL::moments","m2u");
         ECAL_moments_m2v = fReader->getBranch<float>     ("ECAL::moments","m2v");
         ECAL_moments_m2w = fReader->getBranch<float>     ("ECAL::moments","m2w");
         ECAL_moments_m3u = fReader->getBranch<float>     ("ECAL::moments","m3u");
         ECAL_moments_m3v = fReader->getBranch<float>     ("ECAL::moments","m3v");
         ECAL_moments_m3w = fReader->getBranch<float>     ("ECAL::moments","m3w");
         ECAL_peaks_energy = fReader->getBranch<float>     ("ECAL::peaks","energy");
         ECAL_peaks_id = fReader->getBranch<int16_t>   ("ECAL::peaks","id");
         ECAL_peaks_layer = fReader->getBranch<int8_t>    ("ECAL::peaks","layer");
         ECAL_peaks_sector = fReader->getBranch<int8_t>    ("ECAL::peaks","sector");
         ECAL_peaks_status = fReader->getBranch<int16_t>   ("ECAL::peaks","status");
         ECAL_peaks_time = fReader->getBranch<float>     ("ECAL::peaks","time");
         ECAL_peaks_width = fReader->getBranch<float>     ("ECAL::peaks","width");
         ECAL_peaks_xe = fReader->getBranch<float>     ("ECAL::peaks","xe");
         ECAL_peaks_xo = fReader->getBranch<float>     ("ECAL::peaks","xo");
         ECAL_peaks_ye = fReader->getBranch<float>     ("ECAL::peaks","ye");
         ECAL_peaks_yo = fReader->getBranch<float>     ("ECAL::peaks","yo");
         ECAL_peaks_ze = fReader->getBranch<float>     ("ECAL::peaks","ze");
         ECAL_peaks_zo = fReader->getBranch<float>     ("ECAL::peaks","zo");
         ECAL_tdc_TDC = fReader->getBranch<int32_t>   ("ECAL::tdc","TDC");
         ECAL_tdc_component = fReader->getBranch<int16_t>   ("ECAL::tdc","component");
         ECAL_tdc_layer = fReader->getBranch<int8_t>    ("ECAL::tdc","layer");
         ECAL_tdc_order = fReader->getBranch<int8_t>    ("ECAL::tdc","order");
         ECAL_tdc_sector = fReader->getBranch<int8_t>    ("ECAL::tdc","sector");
         EVENT_detector_ccnphe = fReader->getBranch<float>     ("EVENT::detector","ccnphe");
         EVENT_detector_ecin = fReader->getBranch<float>     ("EVENT::detector","ecin");
         EVENT_detector_ecout = fReader->getBranch<float>     ("EVENT::detector","ecout");
         EVENT_detector_ecpath = fReader->getBranch<float>     ("EVENT::detector","ecpath");
         EVENT_detector_ecsector = fReader->getBranch<int32_t>   ("EVENT::detector","ecsector");
         EVENT_detector_ectime = fReader->getBranch<float>     ("EVENT::detector","ectime");
         EVENT_detector_ectot = fReader->getBranch<float>     ("EVENT::detector","ectot");
         EVENT_detector_ecu = fReader->getBranch<float>     ("EVENT::detector","ecu");
         EVENT_detector_ecv = fReader->getBranch<float>     ("EVENT::detector","ecv");
         EVENT_detector_ecw = fReader->getBranch<float>     ("EVENT::detector","ecw");
         EVENT_detector_scpaddle = fReader->getBranch<int32_t>   ("EVENT::detector","scpaddle");
         EVENT_detector_scpath = fReader->getBranch<float>     ("EVENT::detector","scpath");
         EVENT_detector_scsector = fReader->getBranch<int32_t>   ("EVENT::detector","scsector");
         EVENT_detector_sctime = fReader->getBranch<float>     ("EVENT::detector","sctime");
         EVENT_particle_ccstat = fReader->getBranch<int8_t>    ("EVENT::particle","ccstat");
         EVENT_particle_charge = fReader->getBranch<int8_t>    ("EVENT::particle","charge");
         EVENT_particle_dcstat = fReader->getBranch<int8_t>    ("EVENT::particle","dcstat");
         EVENT_particle_ecstat = fReader->getBranch<int8_t>    ("EVENT::particle","ecstat");
         EVENT_particle_lcstat = fReader->getBranch<int8_t>    ("EVENT::particle","lcstat");
         EVENT_particle_mass = fReader->getBranch<float>     ("EVENT::particle","mass");
         EVENT_particle_pid = fReader->getBranch<int32_t>   ("EVENT::particle","pid");
         EVENT_particle_px = fReader->getBranch<float>     ("EVENT::particle","px");
         EVENT_particle_py = fReader->getBranch<float>     ("EVENT::particle","py");
         EVENT_particle_pz = fReader->getBranch<float>     ("EVENT::particle","pz");
         EVENT_particle_scstat = fReader->getBranch<int8_t>    ("EVENT::particle","scstat");
         EVENT_particle_status = fReader->getBranch<int8_t>    ("EVENT::particle","status");
         EVENT_particle_vx = fReader->getBranch<float>     ("EVENT::particle","vx");
         EVENT_particle_vy = fReader->getBranch<float>     ("EVENT::particle","vy");
         EVENT_particle_vz = fReader->getBranch<float>     ("EVENT::particle","vz");
         FMT_adc_ADC = fReader->getBranch<int32_t>   ("FMT::adc","ADC");
         FMT_adc_component = fReader->getBranch<int16_t>   ("FMT::adc","component");
         FMT_adc_integral = fReader->getBranch<int32_t>   ("FMT::adc","integral");
         FMT_adc_layer = fReader->getBranch<int8_t>    ("FMT::adc","layer");
         FMT_adc_order = fReader->getBranch<int8_t>    ("FMT::adc","order");
         FMT_adc_ped = fReader->getBranch<int16_t>   ("FMT::adc","ped");
         FMT_adc_sector = fReader->getBranch<int8_t>    ("FMT::adc","sector");
         FMT_adc_time = fReader->getBranch<float>     ("FMT::adc","time");
         FMT_adc_timestamp = fReader->getBranch<int64_t>   ("FMT::adc","timestamp");
         FMTRec_Clusters_ETot = fReader->getBranch<float>     ("FMTRec::Clusters","ETot");
         FMTRec_Clusters_Hit1_ID = fReader->getBranch<int16_t>   ("FMTRec::Clusters","Hit1_ID");
         FMTRec_Clusters_Hit2_ID = fReader->getBranch<int16_t>   ("FMTRec::Clusters","Hit2_ID");
         FMTRec_Clusters_Hit3_ID = fReader->getBranch<int16_t>   ("FMTRec::Clusters","Hit3_ID");
         FMTRec_Clusters_Hit4_ID = fReader->getBranch<int16_t>   ("FMTRec::Clusters","Hit4_ID");
         FMTRec_Clusters_Hit5_ID = fReader->getBranch<int16_t>   ("FMTRec::Clusters","Hit5_ID");
         FMTRec_Clusters_ID = fReader->getBranch<int16_t>   ("FMTRec::Clusters","ID");
         FMTRec_Clusters_centroid = fReader->getBranch<float>     ("FMTRec::Clusters","centroid");
         FMTRec_Clusters_centroidResidual = fReader->getBranch<float>     ("FMTRec::Clusters","centroidResidual");
         FMTRec_Clusters_layer = fReader->getBranch<int8_t>    ("FMTRec::Clusters","layer");
         FMTRec_Clusters_sector = fReader->getBranch<int8_t>    ("FMTRec::Clusters","sector");
         FMTRec_Clusters_seedE = fReader->getBranch<float>     ("FMTRec::Clusters","seedE");
         FMTRec_Clusters_seedResidual = fReader->getBranch<float>     ("FMTRec::Clusters","seedResidual");
         FMTRec_Clusters_seedStrip = fReader->getBranch<int32_t>   ("FMTRec::Clusters","seedStrip");
         FMTRec_Clusters_size = fReader->getBranch<int16_t>   ("FMTRec::Clusters","size");
         FMTRec_Clusters_trkID = fReader->getBranch<int16_t>   ("FMTRec::Clusters","trkID");
         FMTRec_Crosses_Cluster1_ID = fReader->getBranch<int16_t>   ("FMTRec::Crosses","Cluster1_ID");
         FMTRec_Crosses_Cluster2_ID = fReader->getBranch<int16_t>   ("FMTRec::Crosses","Cluster2_ID");
         FMTRec_Crosses_ID = fReader->getBranch<int16_t>   ("FMTRec::Crosses","ID");
         FMTRec_Crosses_err_x = fReader->getBranch<float>     ("FMTRec::Crosses","err_x");
         FMTRec_Crosses_err_y = fReader->getBranch<float>     ("FMTRec::Crosses","err_y");
         FMTRec_Crosses_err_z = fReader->getBranch<float>     ("FMTRec::Crosses","err_z");
         FMTRec_Crosses_region = fReader->getBranch<int8_t>    ("FMTRec::Crosses","region");
         FMTRec_Crosses_sector = fReader->getBranch<int8_t>    ("FMTRec::Crosses","sector");
         FMTRec_Crosses_trkID = fReader->getBranch<int16_t>   ("FMTRec::Crosses","trkID");
         FMTRec_Crosses_ux = fReader->getBranch<float>     ("FMTRec::Crosses","ux");
         FMTRec_Crosses_uy = fReader->getBranch<float>     ("FMTRec::Crosses","uy");
         FMTRec_Crosses_uz = fReader->getBranch<float>     ("FMTRec::Crosses","uz");
         FMTRec_Crosses_x = fReader->getBranch<float>     ("FMTRec::Crosses","x");
         FMTRec_Crosses_y = fReader->getBranch<float>     ("FMTRec::Crosses","y");
         FMTRec_Crosses_z = fReader->getBranch<float>     ("FMTRec::Crosses","z");
         FMTRec_Hits_ID = fReader->getBranch<int16_t>   ("FMTRec::Hits","ID");
         FMTRec_Hits_clusterID = fReader->getBranch<int16_t>   ("FMTRec::Hits","clusterID");
         FMTRec_Hits_fitResidual = fReader->getBranch<float>     ("FMTRec::Hits","fitResidual");
         FMTRec_Hits_layer = fReader->getBranch<int8_t>    ("FMTRec::Hits","layer");
         FMTRec_Hits_sector = fReader->getBranch<int8_t>    ("FMTRec::Hits","sector");
         FMTRec_Hits_strip = fReader->getBranch<int32_t>   ("FMTRec::Hits","strip");
         FMTRec_Hits_trkID = fReader->getBranch<int16_t>   ("FMTRec::Hits","trkID");
         FMTRec_Hits_trkingStat = fReader->getBranch<int32_t>   ("FMTRec::Hits","trkingStat");
         FT_particles_calID = fReader->getBranch<int16_t>   ("FT::particles","calID");
         FT_particles_charge = fReader->getBranch<int8_t>    ("FT::particles","charge");
         FT_particles_cx = fReader->getBranch<float>     ("FT::particles","cx");
         FT_particles_cy = fReader->getBranch<float>     ("FT::particles","cy");
         FT_particles_cz = fReader->getBranch<float>     ("FT::particles","cz");
         FT_particles_energy = fReader->getBranch<float>     ("FT::particles","energy");
         FT_particles_hodoID = fReader->getBranch<int16_t>   ("FT::particles","hodoID");
         FT_particles_id = fReader->getBranch<int16_t>   ("FT::particles","id");
         FT_particles_time = fReader->getBranch<float>     ("FT::particles","time");
         FT_particles_trkID = fReader->getBranch<int16_t>   ("FT::particles","trkID");
         FTCAL_adc_ADC = fReader->getBranch<int32_t>   ("FTCAL::adc","ADC");
         FTCAL_adc_component = fReader->getBranch<int16_t>   ("FTCAL::adc","component");
         FTCAL_adc_layer = fReader->getBranch<int8_t>    ("FTCAL::adc","layer");
         FTCAL_adc_order = fReader->getBranch<int8_t>    ("FTCAL::adc","order");
         FTCAL_adc_ped = fReader->getBranch<int16_t>   ("FTCAL::adc","ped");
         FTCAL_adc_sector = fReader->getBranch<int8_t>    ("FTCAL::adc","sector");
         FTCAL_adc_time = fReader->getBranch<float>     ("FTCAL::adc","time");
         FTCAL_clusters_energy = fReader->getBranch<float>     ("FTCAL::clusters","energy");
         FTCAL_clusters_id = fReader->getBranch<int16_t>   ("FTCAL::clusters","id");
         FTCAL_clusters_maxEnergy = fReader->getBranch<float>     ("FTCAL::clusters","maxEnergy");
         FTCAL_clusters_radius = fReader->getBranch<float>     ("FTCAL::clusters","radius");
         FTCAL_clusters_recEnergy = fReader->getBranch<float>     ("FTCAL::clusters","recEnergy");
         FTCAL_clusters_size = fReader->getBranch<int16_t>   ("FTCAL::clusters","size");
         FTCAL_clusters_time = fReader->getBranch<float>     ("FTCAL::clusters","time");
         FTCAL_clusters_widthX = fReader->getBranch<float>     ("FTCAL::clusters","widthX");
         FTCAL_clusters_widthY = fReader->getBranch<float>     ("FTCAL::clusters","widthY");
         FTCAL_clusters_x = fReader->getBranch<float>     ("FTCAL::clusters","x");
         FTCAL_clusters_y = fReader->getBranch<float>     ("FTCAL::clusters","y");
         FTCAL_clusters_z = fReader->getBranch<float>     ("FTCAL::clusters","z");
         FTCAL_hits_clusterID = fReader->getBranch<int16_t>   ("FTCAL::hits","clusterID");
         FTCAL_hits_energy = fReader->getBranch<float>     ("FTCAL::hits","energy");
         FTCAL_hits_hitID = fReader->getBranch<int16_t>   ("FTCAL::hits","hitID");
         FTCAL_hits_idx = fReader->getBranch<int8_t>    ("FTCAL::hits","idx");
         FTCAL_hits_idy = fReader->getBranch<int8_t>    ("FTCAL::hits","idy");
         FTCAL_hits_time = fReader->getBranch<float>     ("FTCAL::hits","time");
         FTCAL_hits_x = fReader->getBranch<float>     ("FTCAL::hits","x");
         FTCAL_hits_y = fReader->getBranch<float>     ("FTCAL::hits","y");
         FTCAL_hits_z = fReader->getBranch<float>     ("FTCAL::hits","z");
         FTHODO_adc_ADC = fReader->getBranch<int32_t>   ("FTHODO::adc","ADC");
         FTHODO_adc_component = fReader->getBranch<int16_t>   ("FTHODO::adc","component");
         FTHODO_adc_layer = fReader->getBranch<int8_t>    ("FTHODO::adc","layer");
         FTHODO_adc_order = fReader->getBranch<int8_t>    ("FTHODO::adc","order");
         FTHODO_adc_ped = fReader->getBranch<int16_t>   ("FTHODO::adc","ped");
         FTHODO_adc_sector = fReader->getBranch<int8_t>    ("FTHODO::adc","sector");
         FTHODO_adc_time = fReader->getBranch<float>     ("FTHODO::adc","time");
         FTHODO_clusters_energy = fReader->getBranch<float>     ("FTHODO::clusters","energy");
         FTHODO_clusters_id = fReader->getBranch<int16_t>   ("FTHODO::clusters","id");
         FTHODO_clusters_radius = fReader->getBranch<float>     ("FTHODO::clusters","radius");
         FTHODO_clusters_size = fReader->getBranch<int16_t>   ("FTHODO::clusters","size");
         FTHODO_clusters_time = fReader->getBranch<float>     ("FTHODO::clusters","time");
         FTHODO_clusters_widthX = fReader->getBranch<float>     ("FTHODO::clusters","widthX");
         FTHODO_clusters_widthY = fReader->getBranch<float>     ("FTHODO::clusters","widthY");
         FTHODO_clusters_x = fReader->getBranch<float>     ("FTHODO::clusters","x");
         FTHODO_clusters_y = fReader->getBranch<float>     ("FTHODO::clusters","y");
         FTHODO_clusters_z = fReader->getBranch<float>     ("FTHODO::clusters","z");
         FTHODO_hits_clusterID = fReader->getBranch<int16_t>   ("FTHODO::hits","clusterID");
         FTHODO_hits_component = fReader->getBranch<int16_t>   ("FTHODO::hits","component");
         FTHODO_hits_energy = fReader->getBranch<float>     ("FTHODO::hits","energy");
         FTHODO_hits_hitID = fReader->getBranch<int16_t>   ("FTHODO::hits","hitID");
         FTHODO_hits_layer = fReader->getBranch<int8_t>    ("FTHODO::hits","layer");
         FTHODO_hits_sector = fReader->getBranch<int8_t>    ("FTHODO::hits","sector");
         FTHODO_hits_time = fReader->getBranch<float>     ("FTHODO::hits","time");
         FTHODO_hits_x = fReader->getBranch<float>     ("FTHODO::hits","x");
         FTHODO_hits_y = fReader->getBranch<float>     ("FTHODO::hits","y");
         FTHODO_hits_z = fReader->getBranch<float>     ("FTHODO::hits","z");
         FTOF_adc_ADC = fReader->getBranch<int32_t>   ("FTOF::adc","ADC");
         FTOF_adc_component = fReader->getBranch<int16_t>   ("FTOF::adc","component");
         FTOF_adc_layer = fReader->getBranch<int8_t>    ("FTOF::adc","layer");
         FTOF_adc_order = fReader->getBranch<int8_t>    ("FTOF::adc","order");
         FTOF_adc_ped = fReader->getBranch<int16_t>   ("FTOF::adc","ped");
         FTOF_adc_sector = fReader->getBranch<int8_t>    ("FTOF::adc","sector");
         FTOF_adc_time = fReader->getBranch<float>     ("FTOF::adc","time");
         FTOF_clusters_component = fReader->getBranch<int16_t>   ("FTOF::clusters","component");
         FTOF_clusters_energy = fReader->getBranch<float>     ("FTOF::clusters","energy");
         FTOF_clusters_energy_unc = fReader->getBranch<float>     ("FTOF::clusters","energy_unc");
         FTOF_clusters_id = fReader->getBranch<int16_t>   ("FTOF::clusters","id");
         FTOF_clusters_layer = fReader->getBranch<int8_t>    ("FTOF::clusters","layer");
         FTOF_clusters_sector = fReader->getBranch<int8_t>    ("FTOF::clusters","sector");
         FTOF_clusters_status = fReader->getBranch<int16_t>   ("FTOF::clusters","status");
         FTOF_clusters_time = fReader->getBranch<float>     ("FTOF::clusters","time");
         FTOF_clusters_time_unc = fReader->getBranch<float>     ("FTOF::clusters","time_unc");
         FTOF_clusters_trackid = fReader->getBranch<int16_t>   ("FTOF::clusters","trackid");
         FTOF_clusters_x = fReader->getBranch<float>     ("FTOF::clusters","x");
         FTOF_clusters_x_unc = fReader->getBranch<float>     ("FTOF::clusters","x_unc");
         FTOF_clusters_y = fReader->getBranch<float>     ("FTOF::clusters","y");
         FTOF_clusters_y_unc = fReader->getBranch<float>     ("FTOF::clusters","y_unc");
         FTOF_clusters_z = fReader->getBranch<float>     ("FTOF::clusters","z");
         FTOF_clusters_z_unc = fReader->getBranch<float>     ("FTOF::clusters","z_unc");
         FTOF_hits_adc_idx1 = fReader->getBranch<int16_t>   ("FTOF::hits","adc_idx1");
         FTOF_hits_adc_idx2 = fReader->getBranch<int16_t>   ("FTOF::hits","adc_idx2");
         FTOF_hits_component = fReader->getBranch<int16_t>   ("FTOF::hits","component");
         FTOF_hits_energy = fReader->getBranch<float>     ("FTOF::hits","energy");
         FTOF_hits_energy_unc = fReader->getBranch<float>     ("FTOF::hits","energy_unc");
         FTOF_hits_id = fReader->getBranch<int16_t>   ("FTOF::hits","id");
         FTOF_hits_layer = fReader->getBranch<int8_t>    ("FTOF::hits","layer");
         FTOF_hits_pathLength = fReader->getBranch<float>     ("FTOF::hits","pathLength");
         FTOF_hits_pathLengthThruBar = fReader->getBranch<float>     ("FTOF::hits","pathLengthThruBar");
         FTOF_hits_sector = fReader->getBranch<int8_t>    ("FTOF::hits","sector");
         FTOF_hits_status = fReader->getBranch<int16_t>   ("FTOF::hits","status");
         FTOF_hits_tdc_idx1 = fReader->getBranch<int16_t>   ("FTOF::hits","tdc_idx1");
         FTOF_hits_tdc_idx2 = fReader->getBranch<int16_t>   ("FTOF::hits","tdc_idx2");
         FTOF_hits_time = fReader->getBranch<float>     ("FTOF::hits","time");
         FTOF_hits_time_unc = fReader->getBranch<float>     ("FTOF::hits","time_unc");
         FTOF_hits_trackid = fReader->getBranch<int16_t>   ("FTOF::hits","trackid");
         FTOF_hits_tx = fReader->getBranch<float>     ("FTOF::hits","tx");
         FTOF_hits_ty = fReader->getBranch<float>     ("FTOF::hits","ty");
         FTOF_hits_tz = fReader->getBranch<float>     ("FTOF::hits","tz");
         FTOF_hits_x = fReader->getBranch<float>     ("FTOF::hits","x");
         FTOF_hits_x_unc = fReader->getBranch<float>     ("FTOF::hits","x_unc");
         FTOF_hits_y = fReader->getBranch<float>     ("FTOF::hits","y");
         FTOF_hits_y_unc = fReader->getBranch<float>     ("FTOF::hits","y_unc");
         FTOF_hits_z = fReader->getBranch<float>     ("FTOF::hits","z");
         FTOF_hits_z_unc = fReader->getBranch<float>     ("FTOF::hits","z_unc");
         FTOF_matchedclusters_EmaxAlgo_1B_tCorr = fReader->getBranch<float>     ("FTOF::matchedclusters","EmaxAlgo_1B_tCorr");
         FTOF_matchedclusters_clusSize_1A = fReader->getBranch<int16_t>   ("FTOF::matchedclusters","clusSize_1A");
         FTOF_matchedclusters_clusSize_1B = fReader->getBranch<int16_t>   ("FTOF::matchedclusters","clusSize_1B");
         FTOF_matchedclusters_clus_1Aid = fReader->getBranch<int16_t>   ("FTOF::matchedclusters","clus_1Aid");
         FTOF_matchedclusters_clus_1Bid = fReader->getBranch<int16_t>   ("FTOF::matchedclusters","clus_1Bid");
         FTOF_matchedclusters_midbarAlgo_1B_tCorr = fReader->getBranch<float>     ("FTOF::matchedclusters","midbarAlgo_1B_tCorr");
         FTOF_matchedclusters_paddle_id1A = fReader->getBranch<int16_t>   ("FTOF::matchedclusters","paddle_id1A");
         FTOF_matchedclusters_paddle_id1B = fReader->getBranch<int16_t>   ("FTOF::matchedclusters","paddle_id1B");
         FTOF_matchedclusters_sector = fReader->getBranch<int8_t>    ("FTOF::matchedclusters","sector");
         FTOF_matchedclusters_tminAlgo_1B_tCorr = fReader->getBranch<float>     ("FTOF::matchedclusters","tminAlgo_1B_tCorr");
         FTOF_rawhits_component = fReader->getBranch<int16_t>   ("FTOF::rawhits","component");
         FTOF_rawhits_energy_left = fReader->getBranch<float>     ("FTOF::rawhits","energy_left");
         FTOF_rawhits_energy_left_unc = fReader->getBranch<float>     ("FTOF::rawhits","energy_left_unc");
         FTOF_rawhits_energy_right = fReader->getBranch<float>     ("FTOF::rawhits","energy_right");
         FTOF_rawhits_energy_right_unc = fReader->getBranch<float>     ("FTOF::rawhits","energy_right_unc");
         FTOF_rawhits_id = fReader->getBranch<int16_t>   ("FTOF::rawhits","id");
         FTOF_rawhits_layer = fReader->getBranch<int8_t>    ("FTOF::rawhits","layer");
         FTOF_rawhits_sector = fReader->getBranch<int8_t>    ("FTOF::rawhits","sector");
         FTOF_rawhits_status = fReader->getBranch<int16_t>   ("FTOF::rawhits","status");
         FTOF_rawhits_time_left = fReader->getBranch<float>     ("FTOF::rawhits","time_left");
         FTOF_rawhits_time_left_unc = fReader->getBranch<float>     ("FTOF::rawhits","time_left_unc");
         FTOF_rawhits_time_right = fReader->getBranch<float>     ("FTOF::rawhits","time_right");
         FTOF_rawhits_time_right_unc = fReader->getBranch<float>     ("FTOF::rawhits","time_right_unc");
         FTOF_tdc_TDC = fReader->getBranch<int32_t>   ("FTOF::tdc","TDC");
         FTOF_tdc_component = fReader->getBranch<int16_t>   ("FTOF::tdc","component");
         FTOF_tdc_layer = fReader->getBranch<int8_t>    ("FTOF::tdc","layer");
         FTOF_tdc_order = fReader->getBranch<int8_t>    ("FTOF::tdc","order");
         FTOF_tdc_sector = fReader->getBranch<int8_t>    ("FTOF::tdc","sector");
         FTTRK_adc_ADC = fReader->getBranch<int32_t>   ("FTTRK::adc","ADC");
         FTTRK_adc_component = fReader->getBranch<int16_t>   ("FTTRK::adc","component");
         FTTRK_adc_integral = fReader->getBranch<int32_t>   ("FTTRK::adc","integral");
         FTTRK_adc_layer = fReader->getBranch<int8_t>    ("FTTRK::adc","layer");
         FTTRK_adc_order = fReader->getBranch<int8_t>    ("FTTRK::adc","order");
         FTTRK_adc_ped = fReader->getBranch<int16_t>   ("FTTRK::adc","ped");
         FTTRK_adc_sector = fReader->getBranch<int8_t>    ("FTTRK::adc","sector");
         FTTRK_adc_time = fReader->getBranch<float>     ("FTTRK::adc","time");
         FTTRK_adc_timestamp = fReader->getBranch<int64_t>   ("FTTRK::adc","timestamp");
         HEADER_info_fc = fReader->getBranch<float>     ("HEADER::info","fc");
         HEADER_info_fcg = fReader->getBranch<float>     ("HEADER::info","fcg");
         HEADER_info_helicity = fReader->getBranch<int8_t>    ("HEADER::info","helicity");
         HEADER_info_nevt = fReader->getBranch<int32_t>   ("HEADER::info","nevt");
         HEADER_info_nrun = fReader->getBranch<int32_t>   ("HEADER::info","nrun");
         HEADER_info_rastr1 = fReader->getBranch<int16_t>   ("HEADER::info","rastr1");
         HEADER_info_rastr2 = fReader->getBranch<int16_t>   ("HEADER::info","rastr2");
         HEADER_info_stt = fReader->getBranch<float>     ("HEADER::info","stt");
         HEADER_info_trigger = fReader->getBranch<int32_t>   ("HEADER::info","trigger");
         HEL_adc_ADC = fReader->getBranch<int32_t>   ("HEL::adc","ADC");
         HEL_adc_component = fReader->getBranch<int16_t>   ("HEL::adc","component");
         HEL_adc_layer = fReader->getBranch<int8_t>    ("HEL::adc","layer");
         HEL_adc_order = fReader->getBranch<int8_t>    ("HEL::adc","order");
         HEL_adc_ped = fReader->getBranch<int16_t>   ("HEL::adc","ped");
         HEL_adc_sector = fReader->getBranch<int8_t>    ("HEL::adc","sector");
         HEL_adc_time = fReader->getBranch<float>     ("HEL::adc","time");
         HTCC_adc_ADC = fReader->getBranch<int32_t>   ("HTCC::adc","ADC");
         HTCC_adc_component = fReader->getBranch<int16_t>   ("HTCC::adc","component");
         HTCC_adc_layer = fReader->getBranch<int8_t>    ("HTCC::adc","layer");
         HTCC_adc_order = fReader->getBranch<int8_t>    ("HTCC::adc","order");
         HTCC_adc_ped = fReader->getBranch<int16_t>   ("HTCC::adc","ped");
         HTCC_adc_sector = fReader->getBranch<int8_t>    ("HTCC::adc","sector");
         HTCC_adc_time = fReader->getBranch<float>     ("HTCC::adc","time");
         HTCC_rec_dphi = fReader->getBranch<float>     ("HTCC::rec","dphi");
         HTCC_rec_dtheta = fReader->getBranch<float>     ("HTCC::rec","dtheta");
         HTCC_rec_id = fReader->getBranch<int16_t>   ("HTCC::rec","id");
         HTCC_rec_maxphi = fReader->getBranch<int16_t>   ("HTCC::rec","maxphi");
         HTCC_rec_maxtheta = fReader->getBranch<int16_t>   ("HTCC::rec","maxtheta");
         HTCC_rec_minphi = fReader->getBranch<int16_t>   ("HTCC::rec","minphi");
         HTCC_rec_mintheta = fReader->getBranch<int16_t>   ("HTCC::rec","mintheta");
         HTCC_rec_nhits = fReader->getBranch<int16_t>   ("HTCC::rec","nhits");
         HTCC_rec_nphe = fReader->getBranch<float>     ("HTCC::rec","nphe");
         HTCC_rec_nphi = fReader->getBranch<int16_t>   ("HTCC::rec","nphi");
         HTCC_rec_ntheta = fReader->getBranch<int16_t>   ("HTCC::rec","ntheta");
         HTCC_rec_phi = fReader->getBranch<float>     ("HTCC::rec","phi");
         HTCC_rec_theta = fReader->getBranch<float>     ("HTCC::rec","theta");
         HTCC_rec_time = fReader->getBranch<float>     ("HTCC::rec","time");
         HTCC_rec_x = fReader->getBranch<float>     ("HTCC::rec","x");
         HTCC_rec_y = fReader->getBranch<float>     ("HTCC::rec","y");
         HTCC_rec_z = fReader->getBranch<float>     ("HTCC::rec","z");
         HTCC_tdc_TDC = fReader->getBranch<int32_t>   ("HTCC::tdc","TDC");
         HTCC_tdc_component = fReader->getBranch<int16_t>   ("HTCC::tdc","component");
         HTCC_tdc_layer = fReader->getBranch<int8_t>    ("HTCC::tdc","layer");
         HTCC_tdc_order = fReader->getBranch<int8_t>    ("HTCC::tdc","order");
         HTCC_tdc_sector = fReader->getBranch<int8_t>    ("HTCC::tdc","sector");
         HitBasedTrkg_HBClusters_Hit10_ID = fReader->getBranch<int16_t>   ("HitBasedTrkg::HBClusters","Hit10_ID");
         HitBasedTrkg_HBClusters_Hit11_ID = fReader->getBranch<int16_t>   ("HitBasedTrkg::HBClusters","Hit11_ID");
         HitBasedTrkg_HBClusters_Hit12_ID = fReader->getBranch<int16_t>   ("HitBasedTrkg::HBClusters","Hit12_ID");
         HitBasedTrkg_HBClusters_Hit1_ID = fReader->getBranch<int16_t>   ("HitBasedTrkg::HBClusters","Hit1_ID");
         HitBasedTrkg_HBClusters_Hit2_ID = fReader->getBranch<int16_t>   ("HitBasedTrkg::HBClusters","Hit2_ID");
         HitBasedTrkg_HBClusters_Hit3_ID = fReader->getBranch<int16_t>   ("HitBasedTrkg::HBClusters","Hit3_ID");
         HitBasedTrkg_HBClusters_Hit4_ID = fReader->getBranch<int16_t>   ("HitBasedTrkg::HBClusters","Hit4_ID");
         HitBasedTrkg_HBClusters_Hit5_ID = fReader->getBranch<int16_t>   ("HitBasedTrkg::HBClusters","Hit5_ID");
         HitBasedTrkg_HBClusters_Hit6_ID = fReader->getBranch<int16_t>   ("HitBasedTrkg::HBClusters","Hit6_ID");
         HitBasedTrkg_HBClusters_Hit7_ID = fReader->getBranch<int16_t>   ("HitBasedTrkg::HBClusters","Hit7_ID");
         HitBasedTrkg_HBClusters_Hit8_ID = fReader->getBranch<int16_t>   ("HitBasedTrkg::HBClusters","Hit8_ID");
         HitBasedTrkg_HBClusters_Hit9_ID = fReader->getBranch<int16_t>   ("HitBasedTrkg::HBClusters","Hit9_ID");
         HitBasedTrkg_HBClusters_avgWire = fReader->getBranch<float>     ("HitBasedTrkg::HBClusters","avgWire");
         HitBasedTrkg_HBClusters_fitChisqProb = fReader->getBranch<float>     ("HitBasedTrkg::HBClusters","fitChisqProb");
         HitBasedTrkg_HBClusters_fitInterc = fReader->getBranch<float>     ("HitBasedTrkg::HBClusters","fitInterc");
         HitBasedTrkg_HBClusters_fitIntercErr = fReader->getBranch<float>     ("HitBasedTrkg::HBClusters","fitIntercErr");
         HitBasedTrkg_HBClusters_fitSlope = fReader->getBranch<float>     ("HitBasedTrkg::HBClusters","fitSlope");
         HitBasedTrkg_HBClusters_fitSlopeErr = fReader->getBranch<float>     ("HitBasedTrkg::HBClusters","fitSlopeErr");
         HitBasedTrkg_HBClusters_id = fReader->getBranch<int16_t>   ("HitBasedTrkg::HBClusters","id");
         HitBasedTrkg_HBClusters_sector = fReader->getBranch<int8_t>    ("HitBasedTrkg::HBClusters","sector");
         HitBasedTrkg_HBClusters_size = fReader->getBranch<int8_t>    ("HitBasedTrkg::HBClusters","size");
         HitBasedTrkg_HBClusters_status = fReader->getBranch<int16_t>   ("HitBasedTrkg::HBClusters","status");
         HitBasedTrkg_HBClusters_superlayer = fReader->getBranch<int8_t>    ("HitBasedTrkg::HBClusters","superlayer");
         HitBasedTrkg_HBCrosses_Segment1_ID = fReader->getBranch<int16_t>   ("HitBasedTrkg::HBCrosses","Segment1_ID");
         HitBasedTrkg_HBCrosses_Segment2_ID = fReader->getBranch<int16_t>   ("HitBasedTrkg::HBCrosses","Segment2_ID");
         HitBasedTrkg_HBCrosses_err_ux = fReader->getBranch<float>     ("HitBasedTrkg::HBCrosses","err_ux");
         HitBasedTrkg_HBCrosses_err_uy = fReader->getBranch<float>     ("HitBasedTrkg::HBCrosses","err_uy");
         HitBasedTrkg_HBCrosses_err_uz = fReader->getBranch<float>     ("HitBasedTrkg::HBCrosses","err_uz");
         HitBasedTrkg_HBCrosses_err_x = fReader->getBranch<float>     ("HitBasedTrkg::HBCrosses","err_x");
         HitBasedTrkg_HBCrosses_err_y = fReader->getBranch<float>     ("HitBasedTrkg::HBCrosses","err_y");
         HitBasedTrkg_HBCrosses_err_z = fReader->getBranch<float>     ("HitBasedTrkg::HBCrosses","err_z");
         HitBasedTrkg_HBCrosses_id = fReader->getBranch<int16_t>   ("HitBasedTrkg::HBCrosses","id");
         HitBasedTrkg_HBCrosses_region = fReader->getBranch<int8_t>    ("HitBasedTrkg::HBCrosses","region");
         HitBasedTrkg_HBCrosses_sector = fReader->getBranch<int8_t>    ("HitBasedTrkg::HBCrosses","sector");
         HitBasedTrkg_HBCrosses_status = fReader->getBranch<int16_t>   ("HitBasedTrkg::HBCrosses","status");
         HitBasedTrkg_HBCrosses_ux = fReader->getBranch<float>     ("HitBasedTrkg::HBCrosses","ux");
         HitBasedTrkg_HBCrosses_uy = fReader->getBranch<float>     ("HitBasedTrkg::HBCrosses","uy");
         HitBasedTrkg_HBCrosses_uz = fReader->getBranch<float>     ("HitBasedTrkg::HBCrosses","uz");
         HitBasedTrkg_HBCrosses_x = fReader->getBranch<float>     ("HitBasedTrkg::HBCrosses","x");
         HitBasedTrkg_HBCrosses_y = fReader->getBranch<float>     ("HitBasedTrkg::HBCrosses","y");
         HitBasedTrkg_HBCrosses_z = fReader->getBranch<float>     ("HitBasedTrkg::HBCrosses","z");
         HitBasedTrkg_HBHits_B = fReader->getBranch<float>     ("HitBasedTrkg::HBHits","B");
         HitBasedTrkg_HBHits_LR = fReader->getBranch<int8_t>    ("HitBasedTrkg::HBHits","LR");
         HitBasedTrkg_HBHits_LocX = fReader->getBranch<float>     ("HitBasedTrkg::HBHits","LocX");
         HitBasedTrkg_HBHits_LocY = fReader->getBranch<float>     ("HitBasedTrkg::HBHits","LocY");
         HitBasedTrkg_HBHits_TDC = fReader->getBranch<int32_t>   ("HitBasedTrkg::HBHits","TDC");
         HitBasedTrkg_HBHits_TFlight = fReader->getBranch<float>     ("HitBasedTrkg::HBHits","TFlight");
         HitBasedTrkg_HBHits_TProp = fReader->getBranch<float>     ("HitBasedTrkg::HBHits","TProp");
         HitBasedTrkg_HBHits_X = fReader->getBranch<float>     ("HitBasedTrkg::HBHits","X");
         HitBasedTrkg_HBHits_Z = fReader->getBranch<float>     ("HitBasedTrkg::HBHits","Z");
         HitBasedTrkg_HBHits_clusterID = fReader->getBranch<int16_t>   ("HitBasedTrkg::HBHits","clusterID");
         HitBasedTrkg_HBHits_docaError = fReader->getBranch<float>     ("HitBasedTrkg::HBHits","docaError");
         HitBasedTrkg_HBHits_id = fReader->getBranch<int16_t>   ("HitBasedTrkg::HBHits","id");
         HitBasedTrkg_HBHits_layer = fReader->getBranch<int8_t>    ("HitBasedTrkg::HBHits","layer");
         HitBasedTrkg_HBHits_sector = fReader->getBranch<int8_t>    ("HitBasedTrkg::HBHits","sector");
         HitBasedTrkg_HBHits_status = fReader->getBranch<int16_t>   ("HitBasedTrkg::HBHits","status");
         HitBasedTrkg_HBHits_superlayer = fReader->getBranch<int8_t>    ("HitBasedTrkg::HBHits","superlayer");
         HitBasedTrkg_HBHits_trkDoca = fReader->getBranch<float>     ("HitBasedTrkg::HBHits","trkDoca");
         HitBasedTrkg_HBHits_trkID = fReader->getBranch<int8_t>    ("HitBasedTrkg::HBHits","trkID");
         HitBasedTrkg_HBHits_wire = fReader->getBranch<int16_t>   ("HitBasedTrkg::HBHits","wire");
         HitBasedTrkg_HBSegmentTrajectory_layer = fReader->getBranch<int8_t>    ("HitBasedTrkg::HBSegmentTrajectory","layer");
         HitBasedTrkg_HBSegmentTrajectory_matchedHitID = fReader->getBranch<int16_t>   ("HitBasedTrkg::HBSegmentTrajectory","matchedHitID");
         HitBasedTrkg_HBSegmentTrajectory_sector = fReader->getBranch<int8_t>    ("HitBasedTrkg::HBSegmentTrajectory","sector");
         HitBasedTrkg_HBSegmentTrajectory_segmentID = fReader->getBranch<int16_t>   ("HitBasedTrkg::HBSegmentTrajectory","segmentID");
         HitBasedTrkg_HBSegmentTrajectory_superlayer = fReader->getBranch<int8_t>    ("HitBasedTrkg::HBSegmentTrajectory","superlayer");
         HitBasedTrkg_HBSegmentTrajectory_trkDoca = fReader->getBranch<float>     ("HitBasedTrkg::HBSegmentTrajectory","trkDoca");
         HitBasedTrkg_HBSegments_Cluster_ID = fReader->getBranch<int16_t>   ("HitBasedTrkg::HBSegments","Cluster_ID");
         HitBasedTrkg_HBSegments_Hit10_ID = fReader->getBranch<int16_t>   ("HitBasedTrkg::HBSegments","Hit10_ID");
         HitBasedTrkg_HBSegments_Hit11_ID = fReader->getBranch<int16_t>   ("HitBasedTrkg::HBSegments","Hit11_ID");
         HitBasedTrkg_HBSegments_Hit12_ID = fReader->getBranch<int16_t>   ("HitBasedTrkg::HBSegments","Hit12_ID");
         HitBasedTrkg_HBSegments_Hit1_ID = fReader->getBranch<int16_t>   ("HitBasedTrkg::HBSegments","Hit1_ID");
         HitBasedTrkg_HBSegments_Hit2_ID = fReader->getBranch<int16_t>   ("HitBasedTrkg::HBSegments","Hit2_ID");
         HitBasedTrkg_HBSegments_Hit3_ID = fReader->getBranch<int16_t>   ("HitBasedTrkg::HBSegments","Hit3_ID");
         HitBasedTrkg_HBSegments_Hit4_ID = fReader->getBranch<int16_t>   ("HitBasedTrkg::HBSegments","Hit4_ID");
         HitBasedTrkg_HBSegments_Hit5_ID = fReader->getBranch<int16_t>   ("HitBasedTrkg::HBSegments","Hit5_ID");
         HitBasedTrkg_HBSegments_Hit6_ID = fReader->getBranch<int16_t>   ("HitBasedTrkg::HBSegments","Hit6_ID");
         HitBasedTrkg_HBSegments_Hit7_ID = fReader->getBranch<int16_t>   ("HitBasedTrkg::HBSegments","Hit7_ID");
         HitBasedTrkg_HBSegments_Hit8_ID = fReader->getBranch<int16_t>   ("HitBasedTrkg::HBSegments","Hit8_ID");
         HitBasedTrkg_HBSegments_Hit9_ID = fReader->getBranch<int16_t>   ("HitBasedTrkg::HBSegments","Hit9_ID");
         HitBasedTrkg_HBSegments_SegEndPoint1X = fReader->getBranch<float>     ("HitBasedTrkg::HBSegments","SegEndPoint1X");
         HitBasedTrkg_HBSegments_SegEndPoint1Z = fReader->getBranch<float>     ("HitBasedTrkg::HBSegments","SegEndPoint1Z");
         HitBasedTrkg_HBSegments_SegEndPoint2X = fReader->getBranch<float>     ("HitBasedTrkg::HBSegments","SegEndPoint2X");
         HitBasedTrkg_HBSegments_SegEndPoint2Z = fReader->getBranch<float>     ("HitBasedTrkg::HBSegments","SegEndPoint2Z");
         HitBasedTrkg_HBSegments_avgWire = fReader->getBranch<float>     ("HitBasedTrkg::HBSegments","avgWire");
         HitBasedTrkg_HBSegments_fitChisqProb = fReader->getBranch<float>     ("HitBasedTrkg::HBSegments","fitChisqProb");
         HitBasedTrkg_HBSegments_fitInterc = fReader->getBranch<float>     ("HitBasedTrkg::HBSegments","fitInterc");
         HitBasedTrkg_HBSegments_fitIntercErr = fReader->getBranch<float>     ("HitBasedTrkg::HBSegments","fitIntercErr");
         HitBasedTrkg_HBSegments_fitSlope = fReader->getBranch<float>     ("HitBasedTrkg::HBSegments","fitSlope");
         HitBasedTrkg_HBSegments_fitSlopeErr = fReader->getBranch<float>     ("HitBasedTrkg::HBSegments","fitSlopeErr");
         HitBasedTrkg_HBSegments_id = fReader->getBranch<int16_t>   ("HitBasedTrkg::HBSegments","id");
         HitBasedTrkg_HBSegments_sector = fReader->getBranch<int8_t>    ("HitBasedTrkg::HBSegments","sector");
         HitBasedTrkg_HBSegments_size = fReader->getBranch<int8_t>    ("HitBasedTrkg::HBSegments","size");
         HitBasedTrkg_HBSegments_status = fReader->getBranch<int16_t>   ("HitBasedTrkg::HBSegments","status");
         HitBasedTrkg_HBSegments_superlayer = fReader->getBranch<int8_t>    ("HitBasedTrkg::HBSegments","superlayer");
         HitBasedTrkg_HBTracks_Cross1_ID = fReader->getBranch<int16_t>   ("HitBasedTrkg::HBTracks","Cross1_ID");
         HitBasedTrkg_HBTracks_Cross2_ID = fReader->getBranch<int16_t>   ("HitBasedTrkg::HBTracks","Cross2_ID");
         HitBasedTrkg_HBTracks_Cross3_ID = fReader->getBranch<int16_t>   ("HitBasedTrkg::HBTracks","Cross3_ID");
         HitBasedTrkg_HBTracks_Vtx0_x = fReader->getBranch<float>     ("HitBasedTrkg::HBTracks","Vtx0_x");
         HitBasedTrkg_HBTracks_Vtx0_y = fReader->getBranch<float>     ("HitBasedTrkg::HBTracks","Vtx0_y");
         HitBasedTrkg_HBTracks_Vtx0_z = fReader->getBranch<float>     ("HitBasedTrkg::HBTracks","Vtx0_z");
         HitBasedTrkg_HBTracks_c1_ux = fReader->getBranch<float>     ("HitBasedTrkg::HBTracks","c1_ux");
         HitBasedTrkg_HBTracks_c1_uy = fReader->getBranch<float>     ("HitBasedTrkg::HBTracks","c1_uy");
         HitBasedTrkg_HBTracks_c1_uz = fReader->getBranch<float>     ("HitBasedTrkg::HBTracks","c1_uz");
         HitBasedTrkg_HBTracks_c1_x = fReader->getBranch<float>     ("HitBasedTrkg::HBTracks","c1_x");
         HitBasedTrkg_HBTracks_c1_y = fReader->getBranch<float>     ("HitBasedTrkg::HBTracks","c1_y");
         HitBasedTrkg_HBTracks_c1_z = fReader->getBranch<float>     ("HitBasedTrkg::HBTracks","c1_z");
         HitBasedTrkg_HBTracks_c3_ux = fReader->getBranch<float>     ("HitBasedTrkg::HBTracks","c3_ux");
         HitBasedTrkg_HBTracks_c3_uy = fReader->getBranch<float>     ("HitBasedTrkg::HBTracks","c3_uy");
         HitBasedTrkg_HBTracks_c3_uz = fReader->getBranch<float>     ("HitBasedTrkg::HBTracks","c3_uz");
         HitBasedTrkg_HBTracks_c3_x = fReader->getBranch<float>     ("HitBasedTrkg::HBTracks","c3_x");
         HitBasedTrkg_HBTracks_c3_y = fReader->getBranch<float>     ("HitBasedTrkg::HBTracks","c3_y");
         HitBasedTrkg_HBTracks_c3_z = fReader->getBranch<float>     ("HitBasedTrkg::HBTracks","c3_z");
         HitBasedTrkg_HBTracks_chi2 = fReader->getBranch<float>     ("HitBasedTrkg::HBTracks","chi2");
         HitBasedTrkg_HBTracks_id = fReader->getBranch<int16_t>   ("HitBasedTrkg::HBTracks","id");
         HitBasedTrkg_HBTracks_ndf = fReader->getBranch<int16_t>   ("HitBasedTrkg::HBTracks","ndf");
         HitBasedTrkg_HBTracks_p0_x = fReader->getBranch<float>     ("HitBasedTrkg::HBTracks","p0_x");
         HitBasedTrkg_HBTracks_p0_y = fReader->getBranch<float>     ("HitBasedTrkg::HBTracks","p0_y");
         HitBasedTrkg_HBTracks_p0_z = fReader->getBranch<float>     ("HitBasedTrkg::HBTracks","p0_z");
         HitBasedTrkg_HBTracks_pathlength = fReader->getBranch<float>     ("HitBasedTrkg::HBTracks","pathlength");
         HitBasedTrkg_HBTracks_q = fReader->getBranch<int8_t>    ("HitBasedTrkg::HBTracks","q");
         HitBasedTrkg_HBTracks_sector = fReader->getBranch<int8_t>    ("HitBasedTrkg::HBTracks","sector");
         HitBasedTrkg_HBTracks_status = fReader->getBranch<int16_t>   ("HitBasedTrkg::HBTracks","status");
         HitBasedTrkg_HBTracks_t1_px = fReader->getBranch<float>     ("HitBasedTrkg::HBTracks","t1_px");
         HitBasedTrkg_HBTracks_t1_py = fReader->getBranch<float>     ("HitBasedTrkg::HBTracks","t1_py");
         HitBasedTrkg_HBTracks_t1_pz = fReader->getBranch<float>     ("HitBasedTrkg::HBTracks","t1_pz");
         HitBasedTrkg_HBTracks_t1_x = fReader->getBranch<float>     ("HitBasedTrkg::HBTracks","t1_x");
         HitBasedTrkg_HBTracks_t1_y = fReader->getBranch<float>     ("HitBasedTrkg::HBTracks","t1_y");
         HitBasedTrkg_HBTracks_t1_z = fReader->getBranch<float>     ("HitBasedTrkg::HBTracks","t1_z");
         LTCC_adc_ADC = fReader->getBranch<int32_t>   ("LTCC::adc","ADC");
         LTCC_adc_component = fReader->getBranch<int16_t>   ("LTCC::adc","component");
         LTCC_adc_layer = fReader->getBranch<int8_t>    ("LTCC::adc","layer");
         LTCC_adc_order = fReader->getBranch<int8_t>    ("LTCC::adc","order");
         LTCC_adc_ped = fReader->getBranch<int16_t>   ("LTCC::adc","ped");
         LTCC_adc_sector = fReader->getBranch<int8_t>    ("LTCC::adc","sector");
         LTCC_adc_time = fReader->getBranch<float>     ("LTCC::adc","time");
         LTCC_clusters_id = fReader->getBranch<int16_t>   ("LTCC::clusters","id");
         LTCC_clusters_maxPhi = fReader->getBranch<float>     ("LTCC::clusters","maxPhi");
         LTCC_clusters_maxTheta = fReader->getBranch<float>     ("LTCC::clusters","maxTheta");
         LTCC_clusters_minPhi = fReader->getBranch<float>     ("LTCC::clusters","minPhi");
         LTCC_clusters_minTheta = fReader->getBranch<float>     ("LTCC::clusters","minTheta");
         LTCC_clusters_nHits = fReader->getBranch<int16_t>   ("LTCC::clusters","nHits");
         LTCC_clusters_nphe = fReader->getBranch<float>     ("LTCC::clusters","nphe");
         LTCC_clusters_sector = fReader->getBranch<int8_t>    ("LTCC::clusters","sector");
         LTCC_clusters_segment = fReader->getBranch<int16_t>   ("LTCC::clusters","segment");
         LTCC_clusters_status = fReader->getBranch<int8_t>    ("LTCC::clusters","status");
         LTCC_clusters_time = fReader->getBranch<float>     ("LTCC::clusters","time");
         LTCC_clusters_x = fReader->getBranch<float>     ("LTCC::clusters","x");
         LTCC_clusters_y = fReader->getBranch<float>     ("LTCC::clusters","y");
         LTCC_clusters_z = fReader->getBranch<float>     ("LTCC::clusters","z");
         LTCC_tdc_TDC = fReader->getBranch<int32_t>   ("LTCC::tdc","TDC");
         LTCC_tdc_component = fReader->getBranch<int16_t>   ("LTCC::tdc","component");
         LTCC_tdc_layer = fReader->getBranch<int8_t>    ("LTCC::tdc","layer");
         LTCC_tdc_order = fReader->getBranch<int8_t>    ("LTCC::tdc","order");
         LTCC_tdc_sector = fReader->getBranch<int8_t>    ("LTCC::tdc","sector");
         MC_Event_atarget = fReader->getBranch<int16_t>   ("MC::Event","atarget");
         MC_Event_btype = fReader->getBranch<int16_t>   ("MC::Event","btype");
         MC_Event_ebeam = fReader->getBranch<float>     ("MC::Event","ebeam");
         MC_Event_npart = fReader->getBranch<int16_t>   ("MC::Event","npart");
         MC_Event_pbeam = fReader->getBranch<float>     ("MC::Event","pbeam");
         MC_Event_processid = fReader->getBranch<int16_t>   ("MC::Event","processid");
         MC_Event_ptarget = fReader->getBranch<float>     ("MC::Event","ptarget");
         MC_Event_targetid = fReader->getBranch<int16_t>   ("MC::Event","targetid");
         MC_Event_weight = fReader->getBranch<float>     ("MC::Event","weight");
         MC_Event_ztarget = fReader->getBranch<int16_t>   ("MC::Event","ztarget");
         MC_Header_event = fReader->getBranch<int32_t>   ("MC::Header","event");
         MC_Header_helicity = fReader->getBranch<float>     ("MC::Header","helicity");
         MC_Header_run = fReader->getBranch<int32_t>   ("MC::Header","run");
         MC_Header_type = fReader->getBranch<int8_t>    ("MC::Header","type");
         MC_Lund_E = fReader->getBranch<float>     ("MC::Lund","E");
         MC_Lund_daughter = fReader->getBranch<int8_t>    ("MC::Lund","daughter");
         MC_Lund_index = fReader->getBranch<int8_t>    ("MC::Lund","index");
         MC_Lund_ltime = fReader->getBranch<float>     ("MC::Lund","ltime");
         MC_Lund_mass = fReader->getBranch<float>     ("MC::Lund","mass");
         MC_Lund_parent = fReader->getBranch<int8_t>    ("MC::Lund","parent");
         MC_Lund_pid = fReader->getBranch<int32_t>   ("MC::Lund","pid");
         MC_Lund_px = fReader->getBranch<float>     ("MC::Lund","px");
         MC_Lund_py = fReader->getBranch<float>     ("MC::Lund","py");
         MC_Lund_pz = fReader->getBranch<float>     ("MC::Lund","pz");
         MC_Lund_type = fReader->getBranch<int8_t>    ("MC::Lund","type");
         MC_Lund_vx = fReader->getBranch<float>     ("MC::Lund","vx");
         MC_Lund_vy = fReader->getBranch<float>     ("MC::Lund","vy");
         MC_Lund_vz = fReader->getBranch<float>     ("MC::Lund","vz");
         MC_Particle_pid = fReader->getBranch<int32_t>   ("MC::Particle","pid");
         MC_Particle_px = fReader->getBranch<float>     ("MC::Particle","px");
         MC_Particle_py = fReader->getBranch<float>     ("MC::Particle","py");
         MC_Particle_pz = fReader->getBranch<float>     ("MC::Particle","pz");
         MC_Particle_vt = fReader->getBranch<float>     ("MC::Particle","vt");
         MC_Particle_vx = fReader->getBranch<float>     ("MC::Particle","vx");
         MC_Particle_vy = fReader->getBranch<float>     ("MC::Particle","vy");
         MC_Particle_vz = fReader->getBranch<float>     ("MC::Particle","vz");
         MC_True_avgLx = fReader->getBranch<float>     ("MC::True","avgLx");
         MC_True_avgLy = fReader->getBranch<float>     ("MC::True","avgLy");
         MC_True_avgLz = fReader->getBranch<float>     ("MC::True","avgLz");
         MC_True_avgT = fReader->getBranch<float>     ("MC::True","avgT");
         MC_True_avgX = fReader->getBranch<float>     ("MC::True","avgX");
         MC_True_avgY = fReader->getBranch<float>     ("MC::True","avgY");
         MC_True_avgZ = fReader->getBranch<float>     ("MC::True","avgZ");
         MC_True_detector = fReader->getBranch<int8_t>    ("MC::True","detector");
         MC_True_hitn = fReader->getBranch<int32_t>   ("MC::True","hitn");
         MC_True_mpid = fReader->getBranch<int32_t>   ("MC::True","mpid");
         MC_True_mtid = fReader->getBranch<int32_t>   ("MC::True","mtid");
         MC_True_mvx = fReader->getBranch<float>     ("MC::True","mvx");
         MC_True_mvy = fReader->getBranch<float>     ("MC::True","mvy");
         MC_True_mvz = fReader->getBranch<float>     ("MC::True","mvz");
         MC_True_nsteps = fReader->getBranch<int32_t>   ("MC::True","nsteps");
         MC_True_otid = fReader->getBranch<int32_t>   ("MC::True","otid");
         MC_True_pid = fReader->getBranch<int32_t>   ("MC::True","pid");
         MC_True_procID = fReader->getBranch<int32_t>   ("MC::True","procID");
         MC_True_px = fReader->getBranch<float>     ("MC::True","px");
         MC_True_py = fReader->getBranch<float>     ("MC::True","py");
         MC_True_pz = fReader->getBranch<float>     ("MC::True","pz");
         MC_True_tid = fReader->getBranch<int32_t>   ("MC::True","tid");
         MC_True_totEdep = fReader->getBranch<float>     ("MC::True","totEdep");
         MC_True_trackE = fReader->getBranch<float>     ("MC::True","trackE");
         MC_True_vx = fReader->getBranch<float>     ("MC::True","vx");
         MC_True_vy = fReader->getBranch<float>     ("MC::True","vy");
         MC_True_vz = fReader->getBranch<float>     ("MC::True","vz");
         RAW_adc_ADC = fReader->getBranch<int32_t>   ("RAW::adc","ADC");
         RAW_adc_channel = fReader->getBranch<int16_t>   ("RAW::adc","channel");
         RAW_adc_crate = fReader->getBranch<int8_t>    ("RAW::adc","crate");
         RAW_adc_ped = fReader->getBranch<int16_t>   ("RAW::adc","ped");
         RAW_adc_slot = fReader->getBranch<int8_t>    ("RAW::adc","slot");
         RAW_adc_time = fReader->getBranch<float>     ("RAW::adc","time");
         RAW_scaler_channel = fReader->getBranch<int16_t>   ("RAW::scaler","channel");
         RAW_scaler_crate = fReader->getBranch<int8_t>    ("RAW::scaler","crate");
         RAW_scaler_helicity = fReader->getBranch<int8_t>    ("RAW::scaler","helicity");
         RAW_scaler_quartet = fReader->getBranch<int8_t>    ("RAW::scaler","quartet");
         RAW_scaler_slot = fReader->getBranch<int8_t>    ("RAW::scaler","slot");
         RAW_scaler_value = fReader->getBranch<int32_t>   ("RAW::scaler","value");
         RAW_tdc_TDC = fReader->getBranch<int32_t>   ("RAW::tdc","TDC");
         RAW_tdc_channel = fReader->getBranch<int16_t>   ("RAW::tdc","channel");
         RAW_tdc_crate = fReader->getBranch<int8_t>    ("RAW::tdc","crate");
         RAW_tdc_slot = fReader->getBranch<int8_t>    ("RAW::tdc","slot");
         RAW_vtp_channel = fReader->getBranch<int16_t>   ("RAW::vtp","channel");
         RAW_vtp_crate = fReader->getBranch<int8_t>    ("RAW::vtp","crate");
         RAW_vtp_slot = fReader->getBranch<int8_t>    ("RAW::vtp","slot");
         RAW_vtp_word = fReader->getBranch<int32_t>   ("RAW::vtp","word");
         REC_Calorimeter_chi2 = fReader->getBranch<float>     ("REC::Calorimeter","chi2");
         REC_Calorimeter_detector = fReader->getBranch<int8_t>    ("REC::Calorimeter","detector");
         REC_Calorimeter_du = fReader->getBranch<float>     ("REC::Calorimeter","du");
         REC_Calorimeter_dv = fReader->getBranch<float>     ("REC::Calorimeter","dv");
         REC_Calorimeter_dw = fReader->getBranch<float>     ("REC::Calorimeter","dw");
         REC_Calorimeter_energy = fReader->getBranch<float>     ("REC::Calorimeter","energy");
         REC_Calorimeter_hx = fReader->getBranch<float>     ("REC::Calorimeter","hx");
         REC_Calorimeter_hy = fReader->getBranch<float>     ("REC::Calorimeter","hy");
         REC_Calorimeter_hz = fReader->getBranch<float>     ("REC::Calorimeter","hz");
         REC_Calorimeter_index = fReader->getBranch<int16_t>   ("REC::Calorimeter","index");
         REC_Calorimeter_layer = fReader->getBranch<int8_t>    ("REC::Calorimeter","layer");
         REC_Calorimeter_lu = fReader->getBranch<float>     ("REC::Calorimeter","lu");
         REC_Calorimeter_lv = fReader->getBranch<float>     ("REC::Calorimeter","lv");
         REC_Calorimeter_lw = fReader->getBranch<float>     ("REC::Calorimeter","lw");
         REC_Calorimeter_m2u = fReader->getBranch<float>     ("REC::Calorimeter","m2u");
         REC_Calorimeter_m2v = fReader->getBranch<float>     ("REC::Calorimeter","m2v");
         REC_Calorimeter_m2w = fReader->getBranch<float>     ("REC::Calorimeter","m2w");
         REC_Calorimeter_m3u = fReader->getBranch<float>     ("REC::Calorimeter","m3u");
         REC_Calorimeter_m3v = fReader->getBranch<float>     ("REC::Calorimeter","m3v");
         REC_Calorimeter_m3w = fReader->getBranch<float>     ("REC::Calorimeter","m3w");
         REC_Calorimeter_path = fReader->getBranch<float>     ("REC::Calorimeter","path");
         REC_Calorimeter_pindex = fReader->getBranch<int16_t>   ("REC::Calorimeter","pindex");
         REC_Calorimeter_sector = fReader->getBranch<int8_t>    ("REC::Calorimeter","sector");
         REC_Calorimeter_status = fReader->getBranch<int16_t>   ("REC::Calorimeter","status");
         REC_Calorimeter_time = fReader->getBranch<float>     ("REC::Calorimeter","time");
         REC_Calorimeter_x = fReader->getBranch<float>     ("REC::Calorimeter","x");
         REC_Calorimeter_y = fReader->getBranch<float>     ("REC::Calorimeter","y");
         REC_Calorimeter_z = fReader->getBranch<float>     ("REC::Calorimeter","z");
         REC_Cherenkov_chi2 = fReader->getBranch<float>     ("REC::Cherenkov","chi2");
         REC_Cherenkov_detector = fReader->getBranch<int8_t>    ("REC::Cherenkov","detector");
         REC_Cherenkov_dphi = fReader->getBranch<float>     ("REC::Cherenkov","dphi");
         REC_Cherenkov_dtheta = fReader->getBranch<float>     ("REC::Cherenkov","dtheta");
         REC_Cherenkov_index = fReader->getBranch<int16_t>   ("REC::Cherenkov","index");
         REC_Cherenkov_nphe = fReader->getBranch<float>     ("REC::Cherenkov","nphe");
         REC_Cherenkov_path = fReader->getBranch<float>     ("REC::Cherenkov","path");
         REC_Cherenkov_phi = fReader->getBranch<float>     ("REC::Cherenkov","phi");
         REC_Cherenkov_pindex = fReader->getBranch<int16_t>   ("REC::Cherenkov","pindex");
         REC_Cherenkov_sector = fReader->getBranch<int8_t>    ("REC::Cherenkov","sector");
         REC_Cherenkov_status = fReader->getBranch<int16_t>   ("REC::Cherenkov","status");
         REC_Cherenkov_theta = fReader->getBranch<float>     ("REC::Cherenkov","theta");
         REC_Cherenkov_time = fReader->getBranch<float>     ("REC::Cherenkov","time");
         REC_Cherenkov_x = fReader->getBranch<float>     ("REC::Cherenkov","x");
         REC_Cherenkov_y = fReader->getBranch<float>     ("REC::Cherenkov","y");
         REC_Cherenkov_z = fReader->getBranch<float>     ("REC::Cherenkov","z");
         REC_CovMat_C11 = fReader->getBranch<float>     ("REC::CovMat","C11");
         REC_CovMat_C12 = fReader->getBranch<float>     ("REC::CovMat","C12");
         REC_CovMat_C13 = fReader->getBranch<float>     ("REC::CovMat","C13");
         REC_CovMat_C14 = fReader->getBranch<float>     ("REC::CovMat","C14");
         REC_CovMat_C15 = fReader->getBranch<float>     ("REC::CovMat","C15");
         REC_CovMat_C22 = fReader->getBranch<float>     ("REC::CovMat","C22");
         REC_CovMat_C23 = fReader->getBranch<float>     ("REC::CovMat","C23");
         REC_CovMat_C24 = fReader->getBranch<float>     ("REC::CovMat","C24");
         REC_CovMat_C25 = fReader->getBranch<float>     ("REC::CovMat","C25");
         REC_CovMat_C33 = fReader->getBranch<float>     ("REC::CovMat","C33");
         REC_CovMat_C34 = fReader->getBranch<float>     ("REC::CovMat","C34");
         REC_CovMat_C35 = fReader->getBranch<float>     ("REC::CovMat","C35");
         REC_CovMat_C44 = fReader->getBranch<float>     ("REC::CovMat","C44");
         REC_CovMat_C45 = fReader->getBranch<float>     ("REC::CovMat","C45");
         REC_CovMat_C55 = fReader->getBranch<float>     ("REC::CovMat","C55");
         REC_CovMat_index = fReader->getBranch<int16_t>   ("REC::CovMat","index");
         REC_CovMat_pindex = fReader->getBranch<int16_t>   ("REC::CovMat","pindex");
         REC_Event_BCG = fReader->getBranch<float>     ("REC::Event","BCG");
         REC_Event_EVNTime = fReader->getBranch<float>     ("REC::Event","EVNTime");
         REC_Event_EvCAT = fReader->getBranch<int16_t>   ("REC::Event","EvCAT");
         REC_Event_Helic = fReader->getBranch<int8_t>    ("REC::Event","Helic");
         REC_Event_LT = fReader->getBranch<double>    ("REC::Event","LT");
         REC_Event_NEVENT = fReader->getBranch<int32_t>   ("REC::Event","NEVENT");
         REC_Event_NPGP = fReader->getBranch<int16_t>   ("REC::Event","NPGP");
         REC_Event_NRUN = fReader->getBranch<int32_t>   ("REC::Event","NRUN");
         REC_Event_PTIME = fReader->getBranch<float>     ("REC::Event","PTIME");
         REC_Event_RFTime = fReader->getBranch<float>     ("REC::Event","RFTime");
         REC_Event_STTime = fReader->getBranch<float>     ("REC::Event","STTime");
         REC_Event_TRG = fReader->getBranch<int64_t>   ("REC::Event","TRG");
         REC_Event_TYPE = fReader->getBranch<int8_t>    ("REC::Event","TYPE");
         REC_ForwardTagger_chi2 = fReader->getBranch<float>     ("REC::ForwardTagger","chi2");
         REC_ForwardTagger_detector = fReader->getBranch<int8_t>    ("REC::ForwardTagger","detector");
         REC_ForwardTagger_dx = fReader->getBranch<float>     ("REC::ForwardTagger","dx");
         REC_ForwardTagger_dy = fReader->getBranch<float>     ("REC::ForwardTagger","dy");
         REC_ForwardTagger_energy = fReader->getBranch<float>     ("REC::ForwardTagger","energy");
         REC_ForwardTagger_index = fReader->getBranch<int16_t>   ("REC::ForwardTagger","index");
         REC_ForwardTagger_path = fReader->getBranch<float>     ("REC::ForwardTagger","path");
         REC_ForwardTagger_pindex = fReader->getBranch<int16_t>   ("REC::ForwardTagger","pindex");
         REC_ForwardTagger_radius = fReader->getBranch<float>     ("REC::ForwardTagger","radius");
         REC_ForwardTagger_size = fReader->getBranch<int16_t>   ("REC::ForwardTagger","size");
         REC_ForwardTagger_status = fReader->getBranch<int16_t>   ("REC::ForwardTagger","status");
         REC_ForwardTagger_time = fReader->getBranch<float>     ("REC::ForwardTagger","time");
         REC_ForwardTagger_x = fReader->getBranch<float>     ("REC::ForwardTagger","x");
         REC_ForwardTagger_y = fReader->getBranch<float>     ("REC::ForwardTagger","y");
         REC_ForwardTagger_z = fReader->getBranch<float>     ("REC::ForwardTagger","z");
         REC_Particle_beta = fReader->getBranch<float>     ("REC::Particle","beta");
         REC_Particle_charge = fReader->getBranch<int8_t>    ("REC::Particle","charge");
         REC_Particle_chi2pid = fReader->getBranch<float>     ("REC::Particle","chi2pid");
         REC_Particle_pid = fReader->getBranch<int32_t>   ("REC::Particle","pid");
         REC_Particle_px = fReader->getBranch<float>     ("REC::Particle","px");
         REC_Particle_py = fReader->getBranch<float>     ("REC::Particle","py");
         REC_Particle_pz = fReader->getBranch<float>     ("REC::Particle","pz");
         REC_Particle_status = fReader->getBranch<int16_t>   ("REC::Particle","status");
         REC_Particle_vx = fReader->getBranch<float>     ("REC::Particle","vx");
         REC_Particle_vy = fReader->getBranch<float>     ("REC::Particle","vy");
         REC_Particle_vz = fReader->getBranch<float>     ("REC::Particle","vz");
         REC_Scintillator_chi2 = fReader->getBranch<float>     ("REC::Scintillator","chi2");
         REC_Scintillator_component = fReader->getBranch<int16_t>   ("REC::Scintillator","component");
         REC_Scintillator_detector = fReader->getBranch<int8_t>    ("REC::Scintillator","detector");
         REC_Scintillator_energy = fReader->getBranch<float>     ("REC::Scintillator","energy");
         REC_Scintillator_hx = fReader->getBranch<float>     ("REC::Scintillator","hx");
         REC_Scintillator_hy = fReader->getBranch<float>     ("REC::Scintillator","hy");
         REC_Scintillator_hz = fReader->getBranch<float>     ("REC::Scintillator","hz");
         REC_Scintillator_index = fReader->getBranch<int16_t>   ("REC::Scintillator","index");
         REC_Scintillator_layer = fReader->getBranch<int8_t>    ("REC::Scintillator","layer");
         REC_Scintillator_path = fReader->getBranch<float>     ("REC::Scintillator","path");
         REC_Scintillator_pindex = fReader->getBranch<int16_t>   ("REC::Scintillator","pindex");
         REC_Scintillator_sector = fReader->getBranch<int8_t>    ("REC::Scintillator","sector");
         REC_Scintillator_status = fReader->getBranch<int16_t>   ("REC::Scintillator","status");
         REC_Scintillator_time = fReader->getBranch<float>     ("REC::Scintillator","time");
         REC_Scintillator_x = fReader->getBranch<float>     ("REC::Scintillator","x");
         REC_Scintillator_y = fReader->getBranch<float>     ("REC::Scintillator","y");
         REC_Scintillator_z = fReader->getBranch<float>     ("REC::Scintillator","z");
         REC_Track_NDF = fReader->getBranch<int16_t>   ("REC::Track","NDF");
         REC_Track_NDF_nomm = fReader->getBranch<int16_t>   ("REC::Track","NDF_nomm");
         REC_Track_chi2 = fReader->getBranch<float>     ("REC::Track","chi2");
         REC_Track_chi2_nomm = fReader->getBranch<float>     ("REC::Track","chi2_nomm");
         REC_Track_detector = fReader->getBranch<int8_t>    ("REC::Track","detector");
         REC_Track_index = fReader->getBranch<int16_t>   ("REC::Track","index");
         REC_Track_pindex = fReader->getBranch<int16_t>   ("REC::Track","pindex");
         REC_Track_px_nomm = fReader->getBranch<float>     ("REC::Track","px_nomm");
         REC_Track_py_nomm = fReader->getBranch<float>     ("REC::Track","py_nomm");
         REC_Track_pz_nomm = fReader->getBranch<float>     ("REC::Track","pz_nomm");
         REC_Track_q = fReader->getBranch<int8_t>    ("REC::Track","q");
         REC_Track_sector = fReader->getBranch<int8_t>    ("REC::Track","sector");
         REC_Track_status = fReader->getBranch<int16_t>   ("REC::Track","status");
         REC_Track_vx_nomm = fReader->getBranch<float>     ("REC::Track","vx_nomm");
         REC_Track_vy_nomm = fReader->getBranch<float>     ("REC::Track","vy_nomm");
         REC_Track_vz_nomm = fReader->getBranch<float>     ("REC::Track","vz_nomm");
         REC_TrackCross_c_ux = fReader->getBranch<float>     ("REC::TrackCross","c_ux");
         REC_TrackCross_c_uy = fReader->getBranch<float>     ("REC::TrackCross","c_uy");
         REC_TrackCross_c_uz = fReader->getBranch<float>     ("REC::TrackCross","c_uz");
         REC_TrackCross_c_x = fReader->getBranch<float>     ("REC::TrackCross","c_x");
         REC_TrackCross_c_y = fReader->getBranch<float>     ("REC::TrackCross","c_y");
         REC_TrackCross_c_z = fReader->getBranch<float>     ("REC::TrackCross","c_z");
         REC_TrackCross_detector = fReader->getBranch<int8_t>    ("REC::TrackCross","detector");
         REC_TrackCross_index = fReader->getBranch<int16_t>   ("REC::TrackCross","index");
         REC_TrackCross_layer = fReader->getBranch<int8_t>    ("REC::TrackCross","layer");
         REC_TrackCross_pindex = fReader->getBranch<int16_t>   ("REC::TrackCross","pindex");
         REC_TrackCross_sector = fReader->getBranch<int8_t>    ("REC::TrackCross","sector");
         REC_TrackCross_status = fReader->getBranch<int16_t>   ("REC::TrackCross","status");
         REC_Traj_cx = fReader->getBranch<float>     ("REC::Traj","cx");
         REC_Traj_cy = fReader->getBranch<float>     ("REC::Traj","cy");
         REC_Traj_cz = fReader->getBranch<float>     ("REC::Traj","cz");
         REC_Traj_detId = fReader->getBranch<int16_t>   ("REC::Traj","detId");
         REC_Traj_index = fReader->getBranch<int16_t>   ("REC::Traj","index");
         REC_Traj_pathlength = fReader->getBranch<float>     ("REC::Traj","pathlength");
         REC_Traj_pindex = fReader->getBranch<int16_t>   ("REC::Traj","pindex");
         REC_Traj_q = fReader->getBranch<int8_t>    ("REC::Traj","q");
         REC_Traj_x = fReader->getBranch<float>     ("REC::Traj","x");
         REC_Traj_y = fReader->getBranch<float>     ("REC::Traj","y");
         REC_Traj_z = fReader->getBranch<float>     ("REC::Traj","z");
         REC_VertDoca_cx1 = fReader->getBranch<float>     ("REC::VertDoca","cx1");
         REC_VertDoca_cx2 = fReader->getBranch<float>     ("REC::VertDoca","cx2");
         REC_VertDoca_cy1 = fReader->getBranch<float>     ("REC::VertDoca","cy1");
         REC_VertDoca_cy2 = fReader->getBranch<float>     ("REC::VertDoca","cy2");
         REC_VertDoca_cz1 = fReader->getBranch<float>     ("REC::VertDoca","cz1");
         REC_VertDoca_cz2 = fReader->getBranch<float>     ("REC::VertDoca","cz2");
         REC_VertDoca_index1 = fReader->getBranch<int16_t>   ("REC::VertDoca","index1");
         REC_VertDoca_index2 = fReader->getBranch<int16_t>   ("REC::VertDoca","index2");
         REC_VertDoca_r = fReader->getBranch<float>     ("REC::VertDoca","r");
         REC_VertDoca_x = fReader->getBranch<float>     ("REC::VertDoca","x");
         REC_VertDoca_x1 = fReader->getBranch<float>     ("REC::VertDoca","x1");
         REC_VertDoca_x2 = fReader->getBranch<float>     ("REC::VertDoca","x2");
         REC_VertDoca_y = fReader->getBranch<float>     ("REC::VertDoca","y");
         REC_VertDoca_y1 = fReader->getBranch<float>     ("REC::VertDoca","y1");
         REC_VertDoca_y2 = fReader->getBranch<float>     ("REC::VertDoca","y2");
         REC_VertDoca_z = fReader->getBranch<float>     ("REC::VertDoca","z");
         REC_VertDoca_z1 = fReader->getBranch<float>     ("REC::VertDoca","z1");
         REC_VertDoca_z2 = fReader->getBranch<float>     ("REC::VertDoca","z2");
         RECHB_Calorimeter_chi2 = fReader->getBranch<float>     ("RECHB::Calorimeter","chi2");
         RECHB_Calorimeter_detector = fReader->getBranch<int8_t>    ("RECHB::Calorimeter","detector");
         RECHB_Calorimeter_du = fReader->getBranch<float>     ("RECHB::Calorimeter","du");
         RECHB_Calorimeter_dv = fReader->getBranch<float>     ("RECHB::Calorimeter","dv");
         RECHB_Calorimeter_dw = fReader->getBranch<float>     ("RECHB::Calorimeter","dw");
         RECHB_Calorimeter_energy = fReader->getBranch<float>     ("RECHB::Calorimeter","energy");
         RECHB_Calorimeter_hx = fReader->getBranch<float>     ("RECHB::Calorimeter","hx");
         RECHB_Calorimeter_hy = fReader->getBranch<float>     ("RECHB::Calorimeter","hy");
         RECHB_Calorimeter_hz = fReader->getBranch<float>     ("RECHB::Calorimeter","hz");
         RECHB_Calorimeter_index = fReader->getBranch<int16_t>   ("RECHB::Calorimeter","index");
         RECHB_Calorimeter_layer = fReader->getBranch<int8_t>    ("RECHB::Calorimeter","layer");
         RECHB_Calorimeter_lu = fReader->getBranch<float>     ("RECHB::Calorimeter","lu");
         RECHB_Calorimeter_lv = fReader->getBranch<float>     ("RECHB::Calorimeter","lv");
         RECHB_Calorimeter_lw = fReader->getBranch<float>     ("RECHB::Calorimeter","lw");
         RECHB_Calorimeter_m2u = fReader->getBranch<float>     ("RECHB::Calorimeter","m2u");
         RECHB_Calorimeter_m2v = fReader->getBranch<float>     ("RECHB::Calorimeter","m2v");
         RECHB_Calorimeter_m2w = fReader->getBranch<float>     ("RECHB::Calorimeter","m2w");
         RECHB_Calorimeter_m3u = fReader->getBranch<float>     ("RECHB::Calorimeter","m3u");
         RECHB_Calorimeter_m3v = fReader->getBranch<float>     ("RECHB::Calorimeter","m3v");
         RECHB_Calorimeter_m3w = fReader->getBranch<float>     ("RECHB::Calorimeter","m3w");
         RECHB_Calorimeter_path = fReader->getBranch<float>     ("RECHB::Calorimeter","path");
         RECHB_Calorimeter_pindex = fReader->getBranch<int16_t>   ("RECHB::Calorimeter","pindex");
         RECHB_Calorimeter_sector = fReader->getBranch<int8_t>    ("RECHB::Calorimeter","sector");
         RECHB_Calorimeter_status = fReader->getBranch<int16_t>   ("RECHB::Calorimeter","status");
         RECHB_Calorimeter_time = fReader->getBranch<float>     ("RECHB::Calorimeter","time");
         RECHB_Calorimeter_x = fReader->getBranch<float>     ("RECHB::Calorimeter","x");
         RECHB_Calorimeter_y = fReader->getBranch<float>     ("RECHB::Calorimeter","y");
         RECHB_Calorimeter_z = fReader->getBranch<float>     ("RECHB::Calorimeter","z");
         RECHB_Cherenkov_chi2 = fReader->getBranch<float>     ("RECHB::Cherenkov","chi2");
         RECHB_Cherenkov_detector = fReader->getBranch<int8_t>    ("RECHB::Cherenkov","detector");
         RECHB_Cherenkov_dphi = fReader->getBranch<float>     ("RECHB::Cherenkov","dphi");
         RECHB_Cherenkov_dtheta = fReader->getBranch<float>     ("RECHB::Cherenkov","dtheta");
         RECHB_Cherenkov_index = fReader->getBranch<int16_t>   ("RECHB::Cherenkov","index");
         RECHB_Cherenkov_nphe = fReader->getBranch<float>     ("RECHB::Cherenkov","nphe");
         RECHB_Cherenkov_path = fReader->getBranch<float>     ("RECHB::Cherenkov","path");
         RECHB_Cherenkov_phi = fReader->getBranch<float>     ("RECHB::Cherenkov","phi");
         RECHB_Cherenkov_pindex = fReader->getBranch<int16_t>   ("RECHB::Cherenkov","pindex");
         RECHB_Cherenkov_sector = fReader->getBranch<int8_t>    ("RECHB::Cherenkov","sector");
         RECHB_Cherenkov_status = fReader->getBranch<int16_t>   ("RECHB::Cherenkov","status");
         RECHB_Cherenkov_theta = fReader->getBranch<float>     ("RECHB::Cherenkov","theta");
         RECHB_Cherenkov_time = fReader->getBranch<float>     ("RECHB::Cherenkov","time");
         RECHB_Cherenkov_x = fReader->getBranch<float>     ("RECHB::Cherenkov","x");
         RECHB_Cherenkov_y = fReader->getBranch<float>     ("RECHB::Cherenkov","y");
         RECHB_Cherenkov_z = fReader->getBranch<float>     ("RECHB::Cherenkov","z");
         RECHB_Event_BCG = fReader->getBranch<float>     ("RECHB::Event","BCG");
         RECHB_Event_EVNTime = fReader->getBranch<float>     ("RECHB::Event","EVNTime");
         RECHB_Event_EvCAT = fReader->getBranch<int16_t>   ("RECHB::Event","EvCAT");
         RECHB_Event_Helic = fReader->getBranch<int8_t>    ("RECHB::Event","Helic");
         RECHB_Event_LT = fReader->getBranch<double>    ("RECHB::Event","LT");
         RECHB_Event_NEVENT = fReader->getBranch<int32_t>   ("RECHB::Event","NEVENT");
         RECHB_Event_NPGP = fReader->getBranch<int16_t>   ("RECHB::Event","NPGP");
         RECHB_Event_NRUN = fReader->getBranch<int32_t>   ("RECHB::Event","NRUN");
         RECHB_Event_PTIME = fReader->getBranch<float>     ("RECHB::Event","PTIME");
         RECHB_Event_RFTime = fReader->getBranch<float>     ("RECHB::Event","RFTime");
         RECHB_Event_STTime = fReader->getBranch<float>     ("RECHB::Event","STTime");
         RECHB_Event_TRG = fReader->getBranch<int64_t>   ("RECHB::Event","TRG");
         RECHB_Event_TYPE = fReader->getBranch<int8_t>    ("RECHB::Event","TYPE");
         RECHB_ForwardTagger_chi2 = fReader->getBranch<float>     ("RECHB::ForwardTagger","chi2");
         RECHB_ForwardTagger_detector = fReader->getBranch<int8_t>    ("RECHB::ForwardTagger","detector");
         RECHB_ForwardTagger_dx = fReader->getBranch<float>     ("RECHB::ForwardTagger","dx");
         RECHB_ForwardTagger_dy = fReader->getBranch<float>     ("RECHB::ForwardTagger","dy");
         RECHB_ForwardTagger_energy = fReader->getBranch<float>     ("RECHB::ForwardTagger","energy");
         RECHB_ForwardTagger_index = fReader->getBranch<int16_t>   ("RECHB::ForwardTagger","index");
         RECHB_ForwardTagger_path = fReader->getBranch<float>     ("RECHB::ForwardTagger","path");
         RECHB_ForwardTagger_pindex = fReader->getBranch<int16_t>   ("RECHB::ForwardTagger","pindex");
         RECHB_ForwardTagger_radius = fReader->getBranch<float>     ("RECHB::ForwardTagger","radius");
         RECHB_ForwardTagger_size = fReader->getBranch<int16_t>   ("RECHB::ForwardTagger","size");
         RECHB_ForwardTagger_status = fReader->getBranch<int16_t>   ("RECHB::ForwardTagger","status");
         RECHB_ForwardTagger_time = fReader->getBranch<float>     ("RECHB::ForwardTagger","time");
         RECHB_ForwardTagger_x = fReader->getBranch<float>     ("RECHB::ForwardTagger","x");
         RECHB_ForwardTagger_y = fReader->getBranch<float>     ("RECHB::ForwardTagger","y");
         RECHB_ForwardTagger_z = fReader->getBranch<float>     ("RECHB::ForwardTagger","z");
         RECHB_Particle_beta = fReader->getBranch<float>     ("RECHB::Particle","beta");
         RECHB_Particle_charge = fReader->getBranch<int8_t>    ("RECHB::Particle","charge");
         RECHB_Particle_chi2pid = fReader->getBranch<float>     ("RECHB::Particle","chi2pid");
         RECHB_Particle_pid = fReader->getBranch<int32_t>   ("RECHB::Particle","pid");
         RECHB_Particle_px = fReader->getBranch<float>     ("RECHB::Particle","px");
         RECHB_Particle_py = fReader->getBranch<float>     ("RECHB::Particle","py");
         RECHB_Particle_pz = fReader->getBranch<float>     ("RECHB::Particle","pz");
         RECHB_Particle_status = fReader->getBranch<int16_t>   ("RECHB::Particle","status");
         RECHB_Particle_vx = fReader->getBranch<float>     ("RECHB::Particle","vx");
         RECHB_Particle_vy = fReader->getBranch<float>     ("RECHB::Particle","vy");
         RECHB_Particle_vz = fReader->getBranch<float>     ("RECHB::Particle","vz");
         RECHB_Scintillator_chi2 = fReader->getBranch<float>     ("RECHB::Scintillator","chi2");
         RECHB_Scintillator_component = fReader->getBranch<int16_t>   ("RECHB::Scintillator","component");
         RECHB_Scintillator_detector = fReader->getBranch<int8_t>    ("RECHB::Scintillator","detector");
         RECHB_Scintillator_energy = fReader->getBranch<float>     ("RECHB::Scintillator","energy");
         RECHB_Scintillator_hx = fReader->getBranch<float>     ("RECHB::Scintillator","hx");
         RECHB_Scintillator_hy = fReader->getBranch<float>     ("RECHB::Scintillator","hy");
         RECHB_Scintillator_hz = fReader->getBranch<float>     ("RECHB::Scintillator","hz");
         RECHB_Scintillator_index = fReader->getBranch<int16_t>   ("RECHB::Scintillator","index");
         RECHB_Scintillator_layer = fReader->getBranch<int8_t>    ("RECHB::Scintillator","layer");
         RECHB_Scintillator_path = fReader->getBranch<float>     ("RECHB::Scintillator","path");
         RECHB_Scintillator_pindex = fReader->getBranch<int16_t>   ("RECHB::Scintillator","pindex");
         RECHB_Scintillator_sector = fReader->getBranch<int8_t>    ("RECHB::Scintillator","sector");
         RECHB_Scintillator_status = fReader->getBranch<int16_t>   ("RECHB::Scintillator","status");
         RECHB_Scintillator_time = fReader->getBranch<float>     ("RECHB::Scintillator","time");
         RECHB_Scintillator_x = fReader->getBranch<float>     ("RECHB::Scintillator","x");
         RECHB_Scintillator_y = fReader->getBranch<float>     ("RECHB::Scintillator","y");
         RECHB_Scintillator_z = fReader->getBranch<float>     ("RECHB::Scintillator","z");
         RECHB_Track_NDF = fReader->getBranch<int16_t>   ("RECHB::Track","NDF");
         RECHB_Track_NDF_nomm = fReader->getBranch<int16_t>   ("RECHB::Track","NDF_nomm");
         RECHB_Track_chi2 = fReader->getBranch<float>     ("RECHB::Track","chi2");
         RECHB_Track_chi2_nomm = fReader->getBranch<float>     ("RECHB::Track","chi2_nomm");
         RECHB_Track_detector = fReader->getBranch<int8_t>    ("RECHB::Track","detector");
         RECHB_Track_index = fReader->getBranch<int16_t>   ("RECHB::Track","index");
         RECHB_Track_pindex = fReader->getBranch<int16_t>   ("RECHB::Track","pindex");
         RECHB_Track_px_nomm = fReader->getBranch<float>     ("RECHB::Track","px_nomm");
         RECHB_Track_py_nomm = fReader->getBranch<float>     ("RECHB::Track","py_nomm");
         RECHB_Track_pz_nomm = fReader->getBranch<float>     ("RECHB::Track","pz_nomm");
         RECHB_Track_q = fReader->getBranch<int8_t>    ("RECHB::Track","q");
         RECHB_Track_sector = fReader->getBranch<int8_t>    ("RECHB::Track","sector");
         RECHB_Track_status = fReader->getBranch<int16_t>   ("RECHB::Track","status");
         RECHB_Track_vx_nomm = fReader->getBranch<float>     ("RECHB::Track","vx_nomm");
         RECHB_Track_vy_nomm = fReader->getBranch<float>     ("RECHB::Track","vy_nomm");
         RECHB_Track_vz_nomm = fReader->getBranch<float>     ("RECHB::Track","vz_nomm");
         RECHB_TrackCross_c_ux = fReader->getBranch<float>     ("RECHB::TrackCross","c_ux");
         RECHB_TrackCross_c_uy = fReader->getBranch<float>     ("RECHB::TrackCross","c_uy");
         RECHB_TrackCross_c_uz = fReader->getBranch<float>     ("RECHB::TrackCross","c_uz");
         RECHB_TrackCross_c_x = fReader->getBranch<float>     ("RECHB::TrackCross","c_x");
         RECHB_TrackCross_c_y = fReader->getBranch<float>     ("RECHB::TrackCross","c_y");
         RECHB_TrackCross_c_z = fReader->getBranch<float>     ("RECHB::TrackCross","c_z");
         RECHB_TrackCross_detector = fReader->getBranch<int8_t>    ("RECHB::TrackCross","detector");
         RECHB_TrackCross_index = fReader->getBranch<int16_t>   ("RECHB::TrackCross","index");
         RECHB_TrackCross_layer = fReader->getBranch<int8_t>    ("RECHB::TrackCross","layer");
         RECHB_TrackCross_pindex = fReader->getBranch<int16_t>   ("RECHB::TrackCross","pindex");
         RECHB_TrackCross_sector = fReader->getBranch<int8_t>    ("RECHB::TrackCross","sector");
         RECHB_TrackCross_status = fReader->getBranch<int16_t>   ("RECHB::TrackCross","status");
         RF_adc_ADC = fReader->getBranch<int32_t>   ("RF::adc","ADC");
         RF_adc_component = fReader->getBranch<int16_t>   ("RF::adc","component");
         RF_adc_layer = fReader->getBranch<int8_t>    ("RF::adc","layer");
         RF_adc_order = fReader->getBranch<int8_t>    ("RF::adc","order");
         RF_adc_ped = fReader->getBranch<int16_t>   ("RF::adc","ped");
         RF_adc_sector = fReader->getBranch<int8_t>    ("RF::adc","sector");
         RF_adc_time = fReader->getBranch<float>     ("RF::adc","time");
         RF_tdc_TDC = fReader->getBranch<int32_t>   ("RF::tdc","TDC");
         RF_tdc_component = fReader->getBranch<int16_t>   ("RF::tdc","component");
         RF_tdc_layer = fReader->getBranch<int8_t>    ("RF::tdc","layer");
         RF_tdc_order = fReader->getBranch<int8_t>    ("RF::tdc","order");
         RF_tdc_sector = fReader->getBranch<int8_t>    ("RF::tdc","sector");
         RICH_adc_ADC = fReader->getBranch<int32_t>   ("RICH::adc","ADC");
         RICH_adc_component = fReader->getBranch<int16_t>   ("RICH::adc","component");
         RICH_adc_layer = fReader->getBranch<int8_t>    ("RICH::adc","layer");
         RICH_adc_order = fReader->getBranch<int8_t>    ("RICH::adc","order");
         RICH_adc_ped = fReader->getBranch<int16_t>   ("RICH::adc","ped");
         RICH_adc_sector = fReader->getBranch<int8_t>    ("RICH::adc","sector");
         RICH_adc_time = fReader->getBranch<float>     ("RICH::adc","time");
         RICH_clusters_charge = fReader->getBranch<float>     ("RICH::clusters","charge");
         RICH_clusters_id = fReader->getBranch<int16_t>   ("RICH::clusters","id");
         RICH_clusters_pmt = fReader->getBranch<int16_t>   ("RICH::clusters","pmt");
         RICH_clusters_sector = fReader->getBranch<int16_t>   ("RICH::clusters","sector");
         RICH_clusters_size = fReader->getBranch<int16_t>   ("RICH::clusters","size");
         RICH_clusters_tile = fReader->getBranch<int16_t>   ("RICH::clusters","tile");
         RICH_clusters_time = fReader->getBranch<float>     ("RICH::clusters","time");
         RICH_clusters_wtime = fReader->getBranch<float>     ("RICH::clusters","wtime");
         RICH_clusters_wx = fReader->getBranch<float>     ("RICH::clusters","wx");
         RICH_clusters_wy = fReader->getBranch<float>     ("RICH::clusters","wy");
         RICH_clusters_wz = fReader->getBranch<float>     ("RICH::clusters","wz");
         RICH_clusters_x = fReader->getBranch<float>     ("RICH::clusters","x");
         RICH_clusters_y = fReader->getBranch<float>     ("RICH::clusters","y");
         RICH_clusters_z = fReader->getBranch<float>     ("RICH::clusters","z");
         RICH_hits_anode = fReader->getBranch<int16_t>   ("RICH::hits","anode");
         RICH_hits_cluster = fReader->getBranch<int16_t>   ("RICH::hits","cluster");
         RICH_hits_duration = fReader->getBranch<int16_t>   ("RICH::hits","duration");
         RICH_hits_glx = fReader->getBranch<int16_t>   ("RICH::hits","glx");
         RICH_hits_gly = fReader->getBranch<int16_t>   ("RICH::hits","gly");
         RICH_hits_id = fReader->getBranch<int16_t>   ("RICH::hits","id");
         RICH_hits_idx = fReader->getBranch<int16_t>   ("RICH::hits","idx");
         RICH_hits_idy = fReader->getBranch<int16_t>   ("RICH::hits","idy");
         RICH_hits_pmt = fReader->getBranch<int16_t>   ("RICH::hits","pmt");
         RICH_hits_sector = fReader->getBranch<int16_t>   ("RICH::hits","sector");
         RICH_hits_tile = fReader->getBranch<int16_t>   ("RICH::hits","tile");
         RICH_hits_time = fReader->getBranch<int16_t>   ("RICH::hits","time");
         RICH_hits_xtalk = fReader->getBranch<int16_t>   ("RICH::hits","xtalk");
         RICH_tdc_TDC = fReader->getBranch<int32_t>   ("RICH::tdc","TDC");
         RICH_tdc_component = fReader->getBranch<int16_t>   ("RICH::tdc","component");
         RICH_tdc_layer = fReader->getBranch<int8_t>    ("RICH::tdc","layer");
         RICH_tdc_order = fReader->getBranch<int8_t>    ("RICH::tdc","order");
         RICH_tdc_sector = fReader->getBranch<int8_t>    ("RICH::tdc","sector");
         RTPC_adc_ADC = fReader->getBranch<int32_t>   ("RTPC::adc","ADC");
         RTPC_adc_component = fReader->getBranch<int16_t>   ("RTPC::adc","component");
         RTPC_adc_layer = fReader->getBranch<int8_t>    ("RTPC::adc","layer");
         RTPC_adc_order = fReader->getBranch<int8_t>    ("RTPC::adc","order");
         RTPC_adc_ped = fReader->getBranch<int16_t>   ("RTPC::adc","ped");
         RTPC_adc_sector = fReader->getBranch<int8_t>    ("RTPC::adc","sector");
         RTPC_adc_time = fReader->getBranch<float>     ("RTPC::adc","time");
         RTPC_pos_energy = fReader->getBranch<float>     ("RTPC::pos","energy");
         RTPC_pos_phi = fReader->getBranch<float>     ("RTPC::pos","phi");
         RTPC_pos_posx = fReader->getBranch<float>     ("RTPC::pos","posx");
         RTPC_pos_posy = fReader->getBranch<float>     ("RTPC::pos","posy");
         RTPC_pos_posz = fReader->getBranch<float>     ("RTPC::pos","posz");
         RTPC_pos_step = fReader->getBranch<int32_t>   ("RTPC::pos","step");
         RTPC_pos_time = fReader->getBranch<float>     ("RTPC::pos","time");
         RUN_config_event = fReader->getBranch<int32_t>   ("RUN::config","event");
         RUN_config_mode = fReader->getBranch<int8_t>    ("RUN::config","mode");
         RUN_config_run = fReader->getBranch<int32_t>   ("RUN::config","run");
         RUN_config_solenoid = fReader->getBranch<float>     ("RUN::config","solenoid");
         RUN_config_timestamp = fReader->getBranch<int64_t>   ("RUN::config","timestamp");
         RUN_config_torus = fReader->getBranch<float>     ("RUN::config","torus");
         RUN_config_trigger = fReader->getBranch<int64_t>   ("RUN::config","trigger");
         RUN_config_type = fReader->getBranch<int8_t>    ("RUN::config","type");
         RUN_config_unixtime = fReader->getBranch<int32_t>   ("RUN::config","unixtime");
         RUN_rf_id = fReader->getBranch<int16_t>   ("RUN::rf","id");
         RUN_rf_time = fReader->getBranch<float>     ("RUN::rf","time");
         RUN_trigger_id = fReader->getBranch<int32_t>   ("RUN::trigger","id");
         RUN_trigger_trigger = fReader->getBranch<int32_t>   ("RUN::trigger","trigger");
         TAGGER_tgpb_eid = fReader->getBranch<int16_t>   ("TAGGER::tgpb","eid");
         TAGGER_tgpb_energy = fReader->getBranch<float>     ("TAGGER::tgpb","energy");
         TAGGER_tgpb_status = fReader->getBranch<int8_t>    ("TAGGER::tgpb","status");
         TAGGER_tgpb_tid = fReader->getBranch<int16_t>   ("TAGGER::tgpb","tid");
         TAGGER_tgpb_time = fReader->getBranch<float>     ("TAGGER::tgpb","time");
         TimeBasedTrkg_TBClusters_Hit10_ID = fReader->getBranch<int16_t>   ("TimeBasedTrkg::TBClusters","Hit10_ID");
         TimeBasedTrkg_TBClusters_Hit11_ID = fReader->getBranch<int16_t>   ("TimeBasedTrkg::TBClusters","Hit11_ID");
         TimeBasedTrkg_TBClusters_Hit12_ID = fReader->getBranch<int16_t>   ("TimeBasedTrkg::TBClusters","Hit12_ID");
         TimeBasedTrkg_TBClusters_Hit1_ID = fReader->getBranch<int16_t>   ("TimeBasedTrkg::TBClusters","Hit1_ID");
         TimeBasedTrkg_TBClusters_Hit2_ID = fReader->getBranch<int16_t>   ("TimeBasedTrkg::TBClusters","Hit2_ID");
         TimeBasedTrkg_TBClusters_Hit3_ID = fReader->getBranch<int16_t>   ("TimeBasedTrkg::TBClusters","Hit3_ID");
         TimeBasedTrkg_TBClusters_Hit4_ID = fReader->getBranch<int16_t>   ("TimeBasedTrkg::TBClusters","Hit4_ID");
         TimeBasedTrkg_TBClusters_Hit5_ID = fReader->getBranch<int16_t>   ("TimeBasedTrkg::TBClusters","Hit5_ID");
         TimeBasedTrkg_TBClusters_Hit6_ID = fReader->getBranch<int16_t>   ("TimeBasedTrkg::TBClusters","Hit6_ID");
         TimeBasedTrkg_TBClusters_Hit7_ID = fReader->getBranch<int16_t>   ("TimeBasedTrkg::TBClusters","Hit7_ID");
         TimeBasedTrkg_TBClusters_Hit8_ID = fReader->getBranch<int16_t>   ("TimeBasedTrkg::TBClusters","Hit8_ID");
         TimeBasedTrkg_TBClusters_Hit9_ID = fReader->getBranch<int16_t>   ("TimeBasedTrkg::TBClusters","Hit9_ID");
         TimeBasedTrkg_TBClusters_avgWire = fReader->getBranch<float>     ("TimeBasedTrkg::TBClusters","avgWire");
         TimeBasedTrkg_TBClusters_fitChisqProb = fReader->getBranch<float>     ("TimeBasedTrkg::TBClusters","fitChisqProb");
         TimeBasedTrkg_TBClusters_fitInterc = fReader->getBranch<float>     ("TimeBasedTrkg::TBClusters","fitInterc");
         TimeBasedTrkg_TBClusters_fitIntercErr = fReader->getBranch<float>     ("TimeBasedTrkg::TBClusters","fitIntercErr");
         TimeBasedTrkg_TBClusters_fitSlope = fReader->getBranch<float>     ("TimeBasedTrkg::TBClusters","fitSlope");
         TimeBasedTrkg_TBClusters_fitSlopeErr = fReader->getBranch<float>     ("TimeBasedTrkg::TBClusters","fitSlopeErr");
         TimeBasedTrkg_TBClusters_id = fReader->getBranch<int16_t>   ("TimeBasedTrkg::TBClusters","id");
         TimeBasedTrkg_TBClusters_sector = fReader->getBranch<int8_t>    ("TimeBasedTrkg::TBClusters","sector");
         TimeBasedTrkg_TBClusters_size = fReader->getBranch<int8_t>    ("TimeBasedTrkg::TBClusters","size");
         TimeBasedTrkg_TBClusters_status = fReader->getBranch<int16_t>   ("TimeBasedTrkg::TBClusters","status");
         TimeBasedTrkg_TBClusters_superlayer = fReader->getBranch<int8_t>    ("TimeBasedTrkg::TBClusters","superlayer");
         TimeBasedTrkg_TBCovMat_C11 = fReader->getBranch<float>     ("TimeBasedTrkg::TBCovMat","C11");
         TimeBasedTrkg_TBCovMat_C12 = fReader->getBranch<float>     ("TimeBasedTrkg::TBCovMat","C12");
         TimeBasedTrkg_TBCovMat_C13 = fReader->getBranch<float>     ("TimeBasedTrkg::TBCovMat","C13");
         TimeBasedTrkg_TBCovMat_C14 = fReader->getBranch<float>     ("TimeBasedTrkg::TBCovMat","C14");
         TimeBasedTrkg_TBCovMat_C15 = fReader->getBranch<float>     ("TimeBasedTrkg::TBCovMat","C15");
         TimeBasedTrkg_TBCovMat_C21 = fReader->getBranch<float>     ("TimeBasedTrkg::TBCovMat","C21");
         TimeBasedTrkg_TBCovMat_C22 = fReader->getBranch<float>     ("TimeBasedTrkg::TBCovMat","C22");
         TimeBasedTrkg_TBCovMat_C23 = fReader->getBranch<float>     ("TimeBasedTrkg::TBCovMat","C23");
         TimeBasedTrkg_TBCovMat_C24 = fReader->getBranch<float>     ("TimeBasedTrkg::TBCovMat","C24");
         TimeBasedTrkg_TBCovMat_C25 = fReader->getBranch<float>     ("TimeBasedTrkg::TBCovMat","C25");
         TimeBasedTrkg_TBCovMat_C31 = fReader->getBranch<float>     ("TimeBasedTrkg::TBCovMat","C31");
         TimeBasedTrkg_TBCovMat_C32 = fReader->getBranch<float>     ("TimeBasedTrkg::TBCovMat","C32");
         TimeBasedTrkg_TBCovMat_C33 = fReader->getBranch<float>     ("TimeBasedTrkg::TBCovMat","C33");
         TimeBasedTrkg_TBCovMat_C34 = fReader->getBranch<float>     ("TimeBasedTrkg::TBCovMat","C34");
         TimeBasedTrkg_TBCovMat_C35 = fReader->getBranch<float>     ("TimeBasedTrkg::TBCovMat","C35");
         TimeBasedTrkg_TBCovMat_C41 = fReader->getBranch<float>     ("TimeBasedTrkg::TBCovMat","C41");
         TimeBasedTrkg_TBCovMat_C42 = fReader->getBranch<float>     ("TimeBasedTrkg::TBCovMat","C42");
         TimeBasedTrkg_TBCovMat_C43 = fReader->getBranch<float>     ("TimeBasedTrkg::TBCovMat","C43");
         TimeBasedTrkg_TBCovMat_C44 = fReader->getBranch<float>     ("TimeBasedTrkg::TBCovMat","C44");
         TimeBasedTrkg_TBCovMat_C45 = fReader->getBranch<float>     ("TimeBasedTrkg::TBCovMat","C45");
         TimeBasedTrkg_TBCovMat_C51 = fReader->getBranch<float>     ("TimeBasedTrkg::TBCovMat","C51");
         TimeBasedTrkg_TBCovMat_C52 = fReader->getBranch<float>     ("TimeBasedTrkg::TBCovMat","C52");
         TimeBasedTrkg_TBCovMat_C53 = fReader->getBranch<float>     ("TimeBasedTrkg::TBCovMat","C53");
         TimeBasedTrkg_TBCovMat_C54 = fReader->getBranch<float>     ("TimeBasedTrkg::TBCovMat","C54");
         TimeBasedTrkg_TBCovMat_C55 = fReader->getBranch<float>     ("TimeBasedTrkg::TBCovMat","C55");
         TimeBasedTrkg_TBCovMat_id = fReader->getBranch<int16_t>   ("TimeBasedTrkg::TBCovMat","id");
         TimeBasedTrkg_TBCrosses_Segment1_ID = fReader->getBranch<int16_t>   ("TimeBasedTrkg::TBCrosses","Segment1_ID");
         TimeBasedTrkg_TBCrosses_Segment2_ID = fReader->getBranch<int16_t>   ("TimeBasedTrkg::TBCrosses","Segment2_ID");
         TimeBasedTrkg_TBCrosses_err_ux = fReader->getBranch<float>     ("TimeBasedTrkg::TBCrosses","err_ux");
         TimeBasedTrkg_TBCrosses_err_uy = fReader->getBranch<float>     ("TimeBasedTrkg::TBCrosses","err_uy");
         TimeBasedTrkg_TBCrosses_err_uz = fReader->getBranch<float>     ("TimeBasedTrkg::TBCrosses","err_uz");
         TimeBasedTrkg_TBCrosses_err_x = fReader->getBranch<float>     ("TimeBasedTrkg::TBCrosses","err_x");
         TimeBasedTrkg_TBCrosses_err_y = fReader->getBranch<float>     ("TimeBasedTrkg::TBCrosses","err_y");
         TimeBasedTrkg_TBCrosses_err_z = fReader->getBranch<float>     ("TimeBasedTrkg::TBCrosses","err_z");
         TimeBasedTrkg_TBCrosses_id = fReader->getBranch<int16_t>   ("TimeBasedTrkg::TBCrosses","id");
         TimeBasedTrkg_TBCrosses_region = fReader->getBranch<int8_t>    ("TimeBasedTrkg::TBCrosses","region");
         TimeBasedTrkg_TBCrosses_sector = fReader->getBranch<int8_t>    ("TimeBasedTrkg::TBCrosses","sector");
         TimeBasedTrkg_TBCrosses_status = fReader->getBranch<int16_t>   ("TimeBasedTrkg::TBCrosses","status");
         TimeBasedTrkg_TBCrosses_ux = fReader->getBranch<float>     ("TimeBasedTrkg::TBCrosses","ux");
         TimeBasedTrkg_TBCrosses_uy = fReader->getBranch<float>     ("TimeBasedTrkg::TBCrosses","uy");
         TimeBasedTrkg_TBCrosses_uz = fReader->getBranch<float>     ("TimeBasedTrkg::TBCrosses","uz");
         TimeBasedTrkg_TBCrosses_x = fReader->getBranch<float>     ("TimeBasedTrkg::TBCrosses","x");
         TimeBasedTrkg_TBCrosses_y = fReader->getBranch<float>     ("TimeBasedTrkg::TBCrosses","y");
         TimeBasedTrkg_TBCrosses_z = fReader->getBranch<float>     ("TimeBasedTrkg::TBCrosses","z");
         TimeBasedTrkg_TBHits_B = fReader->getBranch<float>     ("TimeBasedTrkg::TBHits","B");
         TimeBasedTrkg_TBHits_LR = fReader->getBranch<int8_t>    ("TimeBasedTrkg::TBHits","LR");
         TimeBasedTrkg_TBHits_T0 = fReader->getBranch<float>     ("TimeBasedTrkg::TBHits","T0");
         TimeBasedTrkg_TBHits_TDC = fReader->getBranch<int32_t>   ("TimeBasedTrkg::TBHits","TDC");
         TimeBasedTrkg_TBHits_TFlight = fReader->getBranch<float>     ("TimeBasedTrkg::TBHits","TFlight");
         TimeBasedTrkg_TBHits_TProp = fReader->getBranch<float>     ("TimeBasedTrkg::TBHits","TProp");
         TimeBasedTrkg_TBHits_TStart = fReader->getBranch<float>     ("TimeBasedTrkg::TBHits","TStart");
         TimeBasedTrkg_TBHits_X = fReader->getBranch<float>     ("TimeBasedTrkg::TBHits","X");
         TimeBasedTrkg_TBHits_Z = fReader->getBranch<float>     ("TimeBasedTrkg::TBHits","Z");
         TimeBasedTrkg_TBHits_beta = fReader->getBranch<float>     ("TimeBasedTrkg::TBHits","beta");
         TimeBasedTrkg_TBHits_clusterID = fReader->getBranch<int16_t>   ("TimeBasedTrkg::TBHits","clusterID");
         TimeBasedTrkg_TBHits_doca = fReader->getBranch<float>     ("TimeBasedTrkg::TBHits","doca");
         TimeBasedTrkg_TBHits_docaError = fReader->getBranch<float>     ("TimeBasedTrkg::TBHits","docaError");
         TimeBasedTrkg_TBHits_fitResidual = fReader->getBranch<float>     ("TimeBasedTrkg::TBHits","fitResidual");
         TimeBasedTrkg_TBHits_id = fReader->getBranch<int16_t>   ("TimeBasedTrkg::TBHits","id");
         TimeBasedTrkg_TBHits_layer = fReader->getBranch<int8_t>    ("TimeBasedTrkg::TBHits","layer");
         TimeBasedTrkg_TBHits_sector = fReader->getBranch<int8_t>    ("TimeBasedTrkg::TBHits","sector");
         TimeBasedTrkg_TBHits_status = fReader->getBranch<int16_t>   ("TimeBasedTrkg::TBHits","status");
         TimeBasedTrkg_TBHits_superlayer = fReader->getBranch<int8_t>    ("TimeBasedTrkg::TBHits","superlayer");
         TimeBasedTrkg_TBHits_tBeta = fReader->getBranch<float>     ("TimeBasedTrkg::TBHits","tBeta");
         TimeBasedTrkg_TBHits_time = fReader->getBranch<float>     ("TimeBasedTrkg::TBHits","time");
         TimeBasedTrkg_TBHits_timeResidual = fReader->getBranch<float>     ("TimeBasedTrkg::TBHits","timeResidual");
         TimeBasedTrkg_TBHits_trkDoca = fReader->getBranch<float>     ("TimeBasedTrkg::TBHits","trkDoca");
         TimeBasedTrkg_TBHits_trkID = fReader->getBranch<int8_t>    ("TimeBasedTrkg::TBHits","trkID");
         TimeBasedTrkg_TBHits_wire = fReader->getBranch<int16_t>   ("TimeBasedTrkg::TBHits","wire");
         TimeBasedTrkg_TBSegmentTrajectory_layer = fReader->getBranch<int8_t>    ("TimeBasedTrkg::TBSegmentTrajectory","layer");
         TimeBasedTrkg_TBSegmentTrajectory_matchedHitID = fReader->getBranch<int16_t>   ("TimeBasedTrkg::TBSegmentTrajectory","matchedHitID");
         TimeBasedTrkg_TBSegmentTrajectory_sector = fReader->getBranch<int8_t>    ("TimeBasedTrkg::TBSegmentTrajectory","sector");
         TimeBasedTrkg_TBSegmentTrajectory_segmentID = fReader->getBranch<int16_t>   ("TimeBasedTrkg::TBSegmentTrajectory","segmentID");
         TimeBasedTrkg_TBSegmentTrajectory_superlayer = fReader->getBranch<int8_t>    ("TimeBasedTrkg::TBSegmentTrajectory","superlayer");
         TimeBasedTrkg_TBSegmentTrajectory_trkDoca = fReader->getBranch<float>     ("TimeBasedTrkg::TBSegmentTrajectory","trkDoca");
         TimeBasedTrkg_TBSegments_Cluster_ID = fReader->getBranch<int16_t>   ("TimeBasedTrkg::TBSegments","Cluster_ID");
         TimeBasedTrkg_TBSegments_Hit10_ID = fReader->getBranch<int16_t>   ("TimeBasedTrkg::TBSegments","Hit10_ID");
         TimeBasedTrkg_TBSegments_Hit11_ID = fReader->getBranch<int16_t>   ("TimeBasedTrkg::TBSegments","Hit11_ID");
         TimeBasedTrkg_TBSegments_Hit12_ID = fReader->getBranch<int16_t>   ("TimeBasedTrkg::TBSegments","Hit12_ID");
         TimeBasedTrkg_TBSegments_Hit1_ID = fReader->getBranch<int16_t>   ("TimeBasedTrkg::TBSegments","Hit1_ID");
         TimeBasedTrkg_TBSegments_Hit2_ID = fReader->getBranch<int16_t>   ("TimeBasedTrkg::TBSegments","Hit2_ID");
         TimeBasedTrkg_TBSegments_Hit3_ID = fReader->getBranch<int16_t>   ("TimeBasedTrkg::TBSegments","Hit3_ID");
         TimeBasedTrkg_TBSegments_Hit4_ID = fReader->getBranch<int16_t>   ("TimeBasedTrkg::TBSegments","Hit4_ID");
         TimeBasedTrkg_TBSegments_Hit5_ID = fReader->getBranch<int16_t>   ("TimeBasedTrkg::TBSegments","Hit5_ID");
         TimeBasedTrkg_TBSegments_Hit6_ID = fReader->getBranch<int16_t>   ("TimeBasedTrkg::TBSegments","Hit6_ID");
         TimeBasedTrkg_TBSegments_Hit7_ID = fReader->getBranch<int16_t>   ("TimeBasedTrkg::TBSegments","Hit7_ID");
         TimeBasedTrkg_TBSegments_Hit8_ID = fReader->getBranch<int16_t>   ("TimeBasedTrkg::TBSegments","Hit8_ID");
         TimeBasedTrkg_TBSegments_Hit9_ID = fReader->getBranch<int16_t>   ("TimeBasedTrkg::TBSegments","Hit9_ID");
         TimeBasedTrkg_TBSegments_SegEndPoint1X = fReader->getBranch<float>     ("TimeBasedTrkg::TBSegments","SegEndPoint1X");
         TimeBasedTrkg_TBSegments_SegEndPoint1Z = fReader->getBranch<float>     ("TimeBasedTrkg::TBSegments","SegEndPoint1Z");
         TimeBasedTrkg_TBSegments_SegEndPoint2X = fReader->getBranch<float>     ("TimeBasedTrkg::TBSegments","SegEndPoint2X");
         TimeBasedTrkg_TBSegments_SegEndPoint2Z = fReader->getBranch<float>     ("TimeBasedTrkg::TBSegments","SegEndPoint2Z");
         TimeBasedTrkg_TBSegments_avgWire = fReader->getBranch<float>     ("TimeBasedTrkg::TBSegments","avgWire");
         TimeBasedTrkg_TBSegments_fitChisqProb = fReader->getBranch<float>     ("TimeBasedTrkg::TBSegments","fitChisqProb");
         TimeBasedTrkg_TBSegments_fitInterc = fReader->getBranch<float>     ("TimeBasedTrkg::TBSegments","fitInterc");
         TimeBasedTrkg_TBSegments_fitIntercErr = fReader->getBranch<float>     ("TimeBasedTrkg::TBSegments","fitIntercErr");
         TimeBasedTrkg_TBSegments_fitSlope = fReader->getBranch<float>     ("TimeBasedTrkg::TBSegments","fitSlope");
         TimeBasedTrkg_TBSegments_fitSlopeErr = fReader->getBranch<float>     ("TimeBasedTrkg::TBSegments","fitSlopeErr");
         TimeBasedTrkg_TBSegments_id = fReader->getBranch<int16_t>   ("TimeBasedTrkg::TBSegments","id");
         TimeBasedTrkg_TBSegments_resiSum = fReader->getBranch<float>     ("TimeBasedTrkg::TBSegments","resiSum");
         TimeBasedTrkg_TBSegments_sector = fReader->getBranch<int8_t>    ("TimeBasedTrkg::TBSegments","sector");
         TimeBasedTrkg_TBSegments_size = fReader->getBranch<int8_t>    ("TimeBasedTrkg::TBSegments","size");
         TimeBasedTrkg_TBSegments_status = fReader->getBranch<int16_t>   ("TimeBasedTrkg::TBSegments","status");
         TimeBasedTrkg_TBSegments_superlayer = fReader->getBranch<int8_t>    ("TimeBasedTrkg::TBSegments","superlayer");
         TimeBasedTrkg_TBSegments_timeSum = fReader->getBranch<float>     ("TimeBasedTrkg::TBSegments","timeSum");
         TimeBasedTrkg_TBTracks_Cross1_ID = fReader->getBranch<int16_t>   ("TimeBasedTrkg::TBTracks","Cross1_ID");
         TimeBasedTrkg_TBTracks_Cross2_ID = fReader->getBranch<int16_t>   ("TimeBasedTrkg::TBTracks","Cross2_ID");
         TimeBasedTrkg_TBTracks_Cross3_ID = fReader->getBranch<int16_t>   ("TimeBasedTrkg::TBTracks","Cross3_ID");
         TimeBasedTrkg_TBTracks_Vtx0_x = fReader->getBranch<float>     ("TimeBasedTrkg::TBTracks","Vtx0_x");
         TimeBasedTrkg_TBTracks_Vtx0_y = fReader->getBranch<float>     ("TimeBasedTrkg::TBTracks","Vtx0_y");
         TimeBasedTrkg_TBTracks_Vtx0_z = fReader->getBranch<float>     ("TimeBasedTrkg::TBTracks","Vtx0_z");
         TimeBasedTrkg_TBTracks_c1_ux = fReader->getBranch<float>     ("TimeBasedTrkg::TBTracks","c1_ux");
         TimeBasedTrkg_TBTracks_c1_uy = fReader->getBranch<float>     ("TimeBasedTrkg::TBTracks","c1_uy");
         TimeBasedTrkg_TBTracks_c1_uz = fReader->getBranch<float>     ("TimeBasedTrkg::TBTracks","c1_uz");
         TimeBasedTrkg_TBTracks_c1_x = fReader->getBranch<float>     ("TimeBasedTrkg::TBTracks","c1_x");
         TimeBasedTrkg_TBTracks_c1_y = fReader->getBranch<float>     ("TimeBasedTrkg::TBTracks","c1_y");
         TimeBasedTrkg_TBTracks_c1_z = fReader->getBranch<float>     ("TimeBasedTrkg::TBTracks","c1_z");
         TimeBasedTrkg_TBTracks_c3_ux = fReader->getBranch<float>     ("TimeBasedTrkg::TBTracks","c3_ux");
         TimeBasedTrkg_TBTracks_c3_uy = fReader->getBranch<float>     ("TimeBasedTrkg::TBTracks","c3_uy");
         TimeBasedTrkg_TBTracks_c3_uz = fReader->getBranch<float>     ("TimeBasedTrkg::TBTracks","c3_uz");
         TimeBasedTrkg_TBTracks_c3_x = fReader->getBranch<float>     ("TimeBasedTrkg::TBTracks","c3_x");
         TimeBasedTrkg_TBTracks_c3_y = fReader->getBranch<float>     ("TimeBasedTrkg::TBTracks","c3_y");
         TimeBasedTrkg_TBTracks_c3_z = fReader->getBranch<float>     ("TimeBasedTrkg::TBTracks","c3_z");
         TimeBasedTrkg_TBTracks_chi2 = fReader->getBranch<float>     ("TimeBasedTrkg::TBTracks","chi2");
         TimeBasedTrkg_TBTracks_id = fReader->getBranch<int16_t>   ("TimeBasedTrkg::TBTracks","id");
         TimeBasedTrkg_TBTracks_ndf = fReader->getBranch<int16_t>   ("TimeBasedTrkg::TBTracks","ndf");
         TimeBasedTrkg_TBTracks_p0_x = fReader->getBranch<float>     ("TimeBasedTrkg::TBTracks","p0_x");
         TimeBasedTrkg_TBTracks_p0_y = fReader->getBranch<float>     ("TimeBasedTrkg::TBTracks","p0_y");
         TimeBasedTrkg_TBTracks_p0_z = fReader->getBranch<float>     ("TimeBasedTrkg::TBTracks","p0_z");
         TimeBasedTrkg_TBTracks_pathlength = fReader->getBranch<float>     ("TimeBasedTrkg::TBTracks","pathlength");
         TimeBasedTrkg_TBTracks_q = fReader->getBranch<int8_t>    ("TimeBasedTrkg::TBTracks","q");
         TimeBasedTrkg_TBTracks_sector = fReader->getBranch<int8_t>    ("TimeBasedTrkg::TBTracks","sector");
         TimeBasedTrkg_TBTracks_status = fReader->getBranch<int16_t>   ("TimeBasedTrkg::TBTracks","status");
         TimeBasedTrkg_TBTracks_t1_px = fReader->getBranch<float>     ("TimeBasedTrkg::TBTracks","t1_px");
         TimeBasedTrkg_TBTracks_t1_py = fReader->getBranch<float>     ("TimeBasedTrkg::TBTracks","t1_py");
         TimeBasedTrkg_TBTracks_t1_pz = fReader->getBranch<float>     ("TimeBasedTrkg::TBTracks","t1_pz");
         TimeBasedTrkg_TBTracks_t1_x = fReader->getBranch<float>     ("TimeBasedTrkg::TBTracks","t1_x");
         TimeBasedTrkg_TBTracks_t1_y = fReader->getBranch<float>     ("TimeBasedTrkg::TBTracks","t1_y");
         TimeBasedTrkg_TBTracks_t1_z = fReader->getBranch<float>     ("TimeBasedTrkg::TBTracks","t1_z");
         TimeBasedTrkg_Trajectory_B = fReader->getBranch<float>     ("TimeBasedTrkg::Trajectory","B");
         TimeBasedTrkg_Trajectory_L = fReader->getBranch<float>     ("TimeBasedTrkg::Trajectory","L");
         TimeBasedTrkg_Trajectory_did = fReader->getBranch<int16_t>   ("TimeBasedTrkg::Trajectory","did");
         TimeBasedTrkg_Trajectory_tid = fReader->getBranch<int16_t>   ("TimeBasedTrkg::Trajectory","tid");
         TimeBasedTrkg_Trajectory_tx = fReader->getBranch<float>     ("TimeBasedTrkg::Trajectory","tx");
         TimeBasedTrkg_Trajectory_ty = fReader->getBranch<float>     ("TimeBasedTrkg::Trajectory","ty");
         TimeBasedTrkg_Trajectory_tz = fReader->getBranch<float>     ("TimeBasedTrkg::Trajectory","tz");
         TimeBasedTrkg_Trajectory_x = fReader->getBranch<float>     ("TimeBasedTrkg::Trajectory","x");
         TimeBasedTrkg_Trajectory_y = fReader->getBranch<float>     ("TimeBasedTrkg::Trajectory","y");
         TimeBasedTrkg_Trajectory_z = fReader->getBranch<float>     ("TimeBasedTrkg::Trajectory","z");
}
