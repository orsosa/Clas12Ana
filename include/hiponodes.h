   hipo::node<int32_t>         *BMT__adc_ADC = fReader->getBranch<int32_t>("BMT::adc","ADC");
   hipo::node<int16_t>   *BMT__adc_component = fReader->getBranch<int16_t>("BMT::adc","component");
   hipo::node<int32_t>    *BMT__adc_integral = fReader->getBranch<int32_t>("BMT::adc","integral");
   hipo::node<int8_t>        *BMT__adc_layer = fReader->getBranch<int8_t>("BMT::adc","layer");
   hipo::node<int8_t>        *BMT__adc_order = fReader->getBranch<int8_t>("BMT::adc","order");
   hipo::node<int16_t>         *BMT__adc_ped = fReader->getBranch<int16_t>("BMT::adc","ped");
   hipo::node<int8_t>       *BMT__adc_sector = fReader->getBranch<int8_t>("BMT::adc","sector");
   hipo::node<float>          *BMT__adc_time = fReader->getBranch<float>("BMT::adc","time");
   hipo::node<int64_t>   *BMT__adc_timestamp = fReader->getBranch<int64_t>("BMT::adc","timestamp");
   hipo::node<float>                 *BMTRec__Clusters_ETot = fReader->getBranch<float>("BMTRec::Clusters","ETot");
   hipo::node<int16_t>            *BMTRec__Clusters_Hit1_ID = fReader->getBranch<int16_t>("BMTRec::Clusters","Hit1_ID");
   hipo::node<int16_t>            *BMTRec__Clusters_Hit2_ID = fReader->getBranch<int16_t>("BMTRec::Clusters","Hit2_ID");
   hipo::node<int16_t>            *BMTRec__Clusters_Hit3_ID = fReader->getBranch<int16_t>("BMTRec::Clusters","Hit3_ID");
   hipo::node<int16_t>            *BMTRec__Clusters_Hit4_ID = fReader->getBranch<int16_t>("BMTRec::Clusters","Hit4_ID");
   hipo::node<int16_t>            *BMTRec__Clusters_Hit5_ID = fReader->getBranch<int16_t>("BMTRec::Clusters","Hit5_ID");
   hipo::node<int16_t>                 *BMTRec__Clusters_ID = fReader->getBranch<int16_t>("BMTRec::Clusters","ID");
   hipo::node<float>             *BMTRec__Clusters_centroid = fReader->getBranch<float>("BMTRec::Clusters","centroid");
   hipo::node<float>     *BMTRec__Clusters_centroidResidual = fReader->getBranch<float>("BMTRec::Clusters","centroidResidual");
   hipo::node<int8_t>               *BMTRec__Clusters_layer = fReader->getBranch<int8_t>("BMTRec::Clusters","layer");
   hipo::node<int8_t>              *BMTRec__Clusters_sector = fReader->getBranch<int8_t>("BMTRec::Clusters","sector");
   hipo::node<float>                *BMTRec__Clusters_seedE = fReader->getBranch<float>("BMTRec::Clusters","seedE");
   hipo::node<float>         *BMTRec__Clusters_seedResidual = fReader->getBranch<float>("BMTRec::Clusters","seedResidual");
   hipo::node<int32_t>          *BMTRec__Clusters_seedStrip = fReader->getBranch<int32_t>("BMTRec::Clusters","seedStrip");
   hipo::node<int16_t>               *BMTRec__Clusters_size = fReader->getBranch<int16_t>("BMTRec::Clusters","size");
   hipo::node<int16_t>              *BMTRec__Clusters_trkID = fReader->getBranch<int16_t>("BMTRec::Clusters","trkID");
   hipo::node<int16_t>   *BMTRec__Crosses_Cluster1_ID = fReader->getBranch<int16_t>("BMTRec::Crosses","Cluster1_ID");
   hipo::node<int16_t>   *BMTRec__Crosses_Cluster2_ID = fReader->getBranch<int16_t>("BMTRec::Crosses","Cluster2_ID");
   hipo::node<int16_t>            *BMTRec__Crosses_ID = fReader->getBranch<int16_t>("BMTRec::Crosses","ID");
   hipo::node<float>           *BMTRec__Crosses_err_x = fReader->getBranch<float>("BMTRec::Crosses","err_x");
   hipo::node<float>           *BMTRec__Crosses_err_y = fReader->getBranch<float>("BMTRec::Crosses","err_y");
   hipo::node<float>           *BMTRec__Crosses_err_z = fReader->getBranch<float>("BMTRec::Crosses","err_z");
   hipo::node<int8_t>         *BMTRec__Crosses_region = fReader->getBranch<int8_t>("BMTRec::Crosses","region");
   hipo::node<int8_t>         *BMTRec__Crosses_sector = fReader->getBranch<int8_t>("BMTRec::Crosses","sector");
   hipo::node<int16_t>         *BMTRec__Crosses_trkID = fReader->getBranch<int16_t>("BMTRec::Crosses","trkID");
   hipo::node<float>              *BMTRec__Crosses_ux = fReader->getBranch<float>("BMTRec::Crosses","ux");
   hipo::node<float>              *BMTRec__Crosses_uy = fReader->getBranch<float>("BMTRec::Crosses","uy");
   hipo::node<float>              *BMTRec__Crosses_uz = fReader->getBranch<float>("BMTRec::Crosses","uz");
   hipo::node<float>               *BMTRec__Crosses_x = fReader->getBranch<float>("BMTRec::Crosses","x");
   hipo::node<float>               *BMTRec__Crosses_y = fReader->getBranch<float>("BMTRec::Crosses","y");
   hipo::node<float>               *BMTRec__Crosses_z = fReader->getBranch<float>("BMTRec::Crosses","z");
   hipo::node<int16_t>            *BMTRec__Hits_ID = fReader->getBranch<int16_t>("BMTRec::Hits","ID");
   hipo::node<int16_t>     *BMTRec__Hits_clusterID = fReader->getBranch<int16_t>("BMTRec::Hits","clusterID");
   hipo::node<float>     *BMTRec__Hits_fitResidual = fReader->getBranch<float>("BMTRec::Hits","fitResidual");
   hipo::node<int8_t>          *BMTRec__Hits_layer = fReader->getBranch<int8_t>("BMTRec::Hits","layer");
   hipo::node<int8_t>         *BMTRec__Hits_sector = fReader->getBranch<int8_t>("BMTRec::Hits","sector");
   hipo::node<int32_t>         *BMTRec__Hits_strip = fReader->getBranch<int32_t>("BMTRec::Hits","strip");
   hipo::node<int16_t>         *BMTRec__Hits_trkID = fReader->getBranch<int16_t>("BMTRec::Hits","trkID");
   hipo::node<int32_t>    *BMTRec__Hits_trkingStat = fReader->getBranch<int32_t>("BMTRec::Hits","trkingStat");
   hipo::node<int8_t>       *BMTRec__LayerEffs_layer = fReader->getBranch<int8_t>("BMTRec::LayerEffs","layer");
   hipo::node<float>     *BMTRec__LayerEffs_residual = fReader->getBranch<float>("BMTRec::LayerEffs","residual");
   hipo::node<int8_t>      *BMTRec__LayerEffs_sector = fReader->getBranch<int8_t>("BMTRec::LayerEffs","sector");
   hipo::node<int8_t>      *BMTRec__LayerEffs_status = fReader->getBranch<int8_t>("BMTRec::LayerEffs","status");
   hipo::node<int32_t>         *BST__adc_ADC = fReader->getBranch<int32_t>("BST::adc","ADC");
   hipo::node<int16_t>   *BST__adc_component = fReader->getBranch<int16_t>("BST::adc","component");
   hipo::node<int8_t>        *BST__adc_layer = fReader->getBranch<int8_t>("BST::adc","layer");
   hipo::node<int8_t>        *BST__adc_order = fReader->getBranch<int8_t>("BST::adc","order");
   hipo::node<int16_t>         *BST__adc_ped = fReader->getBranch<int16_t>("BST::adc","ped");
   hipo::node<int8_t>       *BST__adc_sector = fReader->getBranch<int8_t>("BST::adc","sector");
   hipo::node<float>          *BST__adc_time = fReader->getBranch<float>("BST::adc","time");
   hipo::node<int64_t>   *BST__adc_timestamp = fReader->getBranch<int64_t>("BST::adc","timestamp");
   hipo::node<float>                 *BSTRec__Clusters_ETot = fReader->getBranch<float>("BSTRec::Clusters","ETot");
   hipo::node<int16_t>            *BSTRec__Clusters_Hit1_ID = fReader->getBranch<int16_t>("BSTRec::Clusters","Hit1_ID");
   hipo::node<int16_t>            *BSTRec__Clusters_Hit2_ID = fReader->getBranch<int16_t>("BSTRec::Clusters","Hit2_ID");
   hipo::node<int16_t>            *BSTRec__Clusters_Hit3_ID = fReader->getBranch<int16_t>("BSTRec::Clusters","Hit3_ID");
   hipo::node<int16_t>            *BSTRec__Clusters_Hit4_ID = fReader->getBranch<int16_t>("BSTRec::Clusters","Hit4_ID");
   hipo::node<int16_t>            *BSTRec__Clusters_Hit5_ID = fReader->getBranch<int16_t>("BSTRec::Clusters","Hit5_ID");
   hipo::node<int16_t>                 *BSTRec__Clusters_ID = fReader->getBranch<int16_t>("BSTRec::Clusters","ID");
   hipo::node<float>             *BSTRec__Clusters_centroid = fReader->getBranch<float>("BSTRec::Clusters","centroid");
   hipo::node<float>     *BSTRec__Clusters_centroidResidual = fReader->getBranch<float>("BSTRec::Clusters","centroidResidual");
   hipo::node<int8_t>               *BSTRec__Clusters_layer = fReader->getBranch<int8_t>("BSTRec::Clusters","layer");
   hipo::node<int8_t>              *BSTRec__Clusters_sector = fReader->getBranch<int8_t>("BSTRec::Clusters","sector");
   hipo::node<float>                *BSTRec__Clusters_seedE = fReader->getBranch<float>("BSTRec::Clusters","seedE");
   hipo::node<float>         *BSTRec__Clusters_seedResidual = fReader->getBranch<float>("BSTRec::Clusters","seedResidual");
   hipo::node<int32_t>          *BSTRec__Clusters_seedStrip = fReader->getBranch<int32_t>("BSTRec::Clusters","seedStrip");
   hipo::node<int16_t>               *BSTRec__Clusters_size = fReader->getBranch<int16_t>("BSTRec::Clusters","size");
   hipo::node<int16_t>              *BSTRec__Clusters_trkID = fReader->getBranch<int16_t>("BSTRec::Clusters","trkID");
   hipo::node<int16_t>   *BSTRec__Crosses_Cluster1_ID = fReader->getBranch<int16_t>("BSTRec::Crosses","Cluster1_ID");
   hipo::node<int16_t>   *BSTRec__Crosses_Cluster2_ID = fReader->getBranch<int16_t>("BSTRec::Crosses","Cluster2_ID");
   hipo::node<int16_t>            *BSTRec__Crosses_ID = fReader->getBranch<int16_t>("BSTRec::Crosses","ID");
   hipo::node<float>           *BSTRec__Crosses_err_x = fReader->getBranch<float>("BSTRec::Crosses","err_x");
   hipo::node<float>           *BSTRec__Crosses_err_y = fReader->getBranch<float>("BSTRec::Crosses","err_y");
   hipo::node<float>           *BSTRec__Crosses_err_z = fReader->getBranch<float>("BSTRec::Crosses","err_z");
   hipo::node<int8_t>         *BSTRec__Crosses_region = fReader->getBranch<int8_t>("BSTRec::Crosses","region");
   hipo::node<int8_t>         *BSTRec__Crosses_sector = fReader->getBranch<int8_t>("BSTRec::Crosses","sector");
   hipo::node<int16_t>         *BSTRec__Crosses_trkID = fReader->getBranch<int16_t>("BSTRec::Crosses","trkID");
   hipo::node<float>              *BSTRec__Crosses_ux = fReader->getBranch<float>("BSTRec::Crosses","ux");
   hipo::node<float>              *BSTRec__Crosses_uy = fReader->getBranch<float>("BSTRec::Crosses","uy");
   hipo::node<float>              *BSTRec__Crosses_uz = fReader->getBranch<float>("BSTRec::Crosses","uz");
   hipo::node<float>               *BSTRec__Crosses_x = fReader->getBranch<float>("BSTRec::Crosses","x");
   hipo::node<float>               *BSTRec__Crosses_y = fReader->getBranch<float>("BSTRec::Crosses","y");
   hipo::node<float>               *BSTRec__Crosses_z = fReader->getBranch<float>("BSTRec::Crosses","z");
   hipo::node<int16_t>            *BSTRec__Hits_ID = fReader->getBranch<int16_t>("BSTRec::Hits","ID");
   hipo::node<int16_t>     *BSTRec__Hits_clusterID = fReader->getBranch<int16_t>("BSTRec::Hits","clusterID");
   hipo::node<float>     *BSTRec__Hits_fitResidual = fReader->getBranch<float>("BSTRec::Hits","fitResidual");
   hipo::node<int8_t>          *BSTRec__Hits_layer = fReader->getBranch<int8_t>("BSTRec::Hits","layer");
   hipo::node<int8_t>         *BSTRec__Hits_sector = fReader->getBranch<int8_t>("BSTRec::Hits","sector");
   hipo::node<int32_t>         *BSTRec__Hits_strip = fReader->getBranch<int32_t>("BSTRec::Hits","strip");
   hipo::node<int16_t>         *BSTRec__Hits_trkID = fReader->getBranch<int16_t>("BSTRec::Hits","trkID");
   hipo::node<int32_t>    *BSTRec__Hits_trkingStat = fReader->getBranch<int32_t>("BSTRec::Hits","trkingStat");
   hipo::node<int8_t>       *BSTRec__LayerEffs_layer = fReader->getBranch<int8_t>("BSTRec::LayerEffs","layer");
   hipo::node<float>     *BSTRec__LayerEffs_residual = fReader->getBranch<float>("BSTRec::LayerEffs","residual");
   hipo::node<int8_t>      *BSTRec__LayerEffs_sector = fReader->getBranch<int8_t>("BSTRec::LayerEffs","sector");
   hipo::node<int8_t>      *BSTRec__LayerEffs_status = fReader->getBranch<int8_t>("BSTRec::LayerEffs","status");
   hipo::node<int32_t>         *CND__adc_ADC = fReader->getBranch<int32_t>("CND::adc","ADC");
   hipo::node<int16_t>   *CND__adc_component = fReader->getBranch<int16_t>("CND::adc","component");
   hipo::node<int8_t>        *CND__adc_layer = fReader->getBranch<int8_t>("CND::adc","layer");
   hipo::node<int8_t>        *CND__adc_order = fReader->getBranch<int8_t>("CND::adc","order");
   hipo::node<int16_t>         *CND__adc_ped = fReader->getBranch<int16_t>("CND::adc","ped");
   hipo::node<int8_t>       *CND__adc_sector = fReader->getBranch<int8_t>("CND::adc","sector");
   hipo::node<float>          *CND__adc_time = fReader->getBranch<float>("CND::adc","time");
   hipo::node<int16_t>   *CND__clusters_component = fReader->getBranch<int16_t>("CND::clusters","component");
   hipo::node<float>        *CND__clusters_energy = fReader->getBranch<float>("CND::clusters","energy");
   hipo::node<int16_t>          *CND__clusters_id = fReader->getBranch<int16_t>("CND::clusters","id");
   hipo::node<int8_t>        *CND__clusters_layer = fReader->getBranch<int8_t>("CND::clusters","layer");
   hipo::node<int16_t>       *CND__clusters_nhits = fReader->getBranch<int16_t>("CND::clusters","nhits");
   hipo::node<int8_t>       *CND__clusters_sector = fReader->getBranch<int8_t>("CND::clusters","sector");
   hipo::node<int16_t>      *CND__clusters_status = fReader->getBranch<int16_t>("CND::clusters","status");
   hipo::node<float>          *CND__clusters_time = fReader->getBranch<float>("CND::clusters","time");
   hipo::node<float>             *CND__clusters_x = fReader->getBranch<float>("CND::clusters","x");
   hipo::node<float>             *CND__clusters_y = fReader->getBranch<float>("CND::clusters","y");
   hipo::node<float>             *CND__clusters_z = fReader->getBranch<float>("CND::clusters","z");
   hipo::node<int16_t>    *CND__hits_component = fReader->getBranch<int16_t>("CND::hits","component");
   hipo::node<float>         *CND__hits_energy = fReader->getBranch<float>("CND::hits","energy");
   hipo::node<float>     *CND__hits_energy_unc = fReader->getBranch<float>("CND::hits","energy_unc");
   hipo::node<int16_t>           *CND__hits_id = fReader->getBranch<int16_t>("CND::hits","id");
   hipo::node<int16_t>    *CND__hits_indexLadc = fReader->getBranch<int16_t>("CND::hits","indexLadc");
   hipo::node<int16_t>    *CND__hits_indexLtdc = fReader->getBranch<int16_t>("CND::hits","indexLtdc");
   hipo::node<int16_t>    *CND__hits_indexRadc = fReader->getBranch<int16_t>("CND::hits","indexRadc");
   hipo::node<int16_t>    *CND__hits_indexRtdc = fReader->getBranch<int16_t>("CND::hits","indexRtdc");
   hipo::node<int8_t>         *CND__hits_layer = fReader->getBranch<int8_t>("CND::hits","layer");
   hipo::node<float>     *CND__hits_pathlength = fReader->getBranch<float>("CND::hits","pathlength");
   hipo::node<int8_t>        *CND__hits_sector = fReader->getBranch<int8_t>("CND::hits","sector");
   hipo::node<int16_t>       *CND__hits_status = fReader->getBranch<int16_t>("CND::hits","status");
   hipo::node<float>           *CND__hits_time = fReader->getBranch<float>("CND::hits","time");
   hipo::node<float>       *CND__hits_time_unc = fReader->getBranch<float>("CND::hits","time_unc");
   hipo::node<float>        *CND__hits_tlength = fReader->getBranch<float>("CND::hits","tlength");
   hipo::node<int16_t>        *CND__hits_trkID = fReader->getBranch<int16_t>("CND::hits","trkID");
   hipo::node<float>             *CND__hits_tx = fReader->getBranch<float>("CND::hits","tx");
   hipo::node<float>             *CND__hits_ty = fReader->getBranch<float>("CND::hits","ty");
   hipo::node<float>             *CND__hits_tz = fReader->getBranch<float>("CND::hits","tz");
   hipo::node<float>              *CND__hits_x = fReader->getBranch<float>("CND::hits","x");
   hipo::node<float>          *CND__hits_x_unc = fReader->getBranch<float>("CND::hits","x_unc");
   hipo::node<float>              *CND__hits_y = fReader->getBranch<float>("CND::hits","y");
   hipo::node<float>          *CND__hits_y_unc = fReader->getBranch<float>("CND::hits","y_unc");
   hipo::node<float>              *CND__hits_z = fReader->getBranch<float>("CND::hits","z");
   hipo::node<float>          *CND__hits_z_unc = fReader->getBranch<float>("CND::hits","z_unc");
   hipo::node<int32_t>         *CND__tdc_TDC = fReader->getBranch<int32_t>("CND::tdc","TDC");
   hipo::node<int16_t>   *CND__tdc_component = fReader->getBranch<int16_t>("CND::tdc","component");
   hipo::node<int8_t>        *CND__tdc_layer = fReader->getBranch<int8_t>("CND::tdc","layer");
   hipo::node<int8_t>        *CND__tdc_order = fReader->getBranch<int8_t>("CND::tdc","order");
   hipo::node<int8_t>       *CND__tdc_sector = fReader->getBranch<int8_t>("CND::tdc","sector");
   hipo::node<int32_t>         *CTOF__adc_ADC = fReader->getBranch<int32_t>("CTOF::adc","ADC");
   hipo::node<int16_t>   *CTOF__adc_component = fReader->getBranch<int16_t>("CTOF::adc","component");
   hipo::node<int8_t>        *CTOF__adc_layer = fReader->getBranch<int8_t>("CTOF::adc","layer");
   hipo::node<int8_t>        *CTOF__adc_order = fReader->getBranch<int8_t>("CTOF::adc","order");
   hipo::node<int16_t>         *CTOF__adc_ped = fReader->getBranch<int16_t>("CTOF::adc","ped");
   hipo::node<int8_t>       *CTOF__adc_sector = fReader->getBranch<int8_t>("CTOF::adc","sector");
   hipo::node<float>          *CTOF__adc_time = fReader->getBranch<float>("CTOF::adc","time");
   hipo::node<int16_t>            *CTOF__hits_adc_idx1 = fReader->getBranch<int16_t>("CTOF::hits","adc_idx1");
   hipo::node<int16_t>            *CTOF__hits_adc_idx2 = fReader->getBranch<int16_t>("CTOF::hits","adc_idx2");
   hipo::node<int16_t>           *CTOF__hits_component = fReader->getBranch<int16_t>("CTOF::hits","component");
   hipo::node<float>                *CTOF__hits_energy = fReader->getBranch<float>("CTOF::hits","energy");
   hipo::node<float>            *CTOF__hits_energy_unc = fReader->getBranch<float>("CTOF::hits","energy_unc");
   hipo::node<int16_t>                  *CTOF__hits_id = fReader->getBranch<int16_t>("CTOF::hits","id");
   hipo::node<int8_t>                *CTOF__hits_layer = fReader->getBranch<int8_t>("CTOF::hits","layer");
   hipo::node<float>            *CTOF__hits_pathLength = fReader->getBranch<float>("CTOF::hits","pathLength");
   hipo::node<float>     *CTOF__hits_pathLengthThruBar = fReader->getBranch<float>("CTOF::hits","pathLengthThruBar");
   hipo::node<int8_t>               *CTOF__hits_sector = fReader->getBranch<int8_t>("CTOF::hits","sector");
   hipo::node<int16_t>              *CTOF__hits_status = fReader->getBranch<int16_t>("CTOF::hits","status");
   hipo::node<int16_t>            *CTOF__hits_tdc_idx1 = fReader->getBranch<int16_t>("CTOF::hits","tdc_idx1");
   hipo::node<int16_t>            *CTOF__hits_tdc_idx2 = fReader->getBranch<int16_t>("CTOF::hits","tdc_idx2");
   hipo::node<float>                  *CTOF__hits_time = fReader->getBranch<float>("CTOF::hits","time");
   hipo::node<float>              *CTOF__hits_time_unc = fReader->getBranch<float>("CTOF::hits","time_unc");
   hipo::node<int16_t>               *CTOF__hits_trkID = fReader->getBranch<int16_t>("CTOF::hits","trkID");
   hipo::node<float>                    *CTOF__hits_tx = fReader->getBranch<float>("CTOF::hits","tx");
   hipo::node<float>                    *CTOF__hits_ty = fReader->getBranch<float>("CTOF::hits","ty");
   hipo::node<float>                    *CTOF__hits_tz = fReader->getBranch<float>("CTOF::hits","tz");
   hipo::node<float>                     *CTOF__hits_x = fReader->getBranch<float>("CTOF::hits","x");
   hipo::node<float>                 *CTOF__hits_x_unc = fReader->getBranch<float>("CTOF::hits","x_unc");
   hipo::node<float>                     *CTOF__hits_y = fReader->getBranch<float>("CTOF::hits","y");
   hipo::node<float>                 *CTOF__hits_y_unc = fReader->getBranch<float>("CTOF::hits","y_unc");
   hipo::node<float>                     *CTOF__hits_z = fReader->getBranch<float>("CTOF::hits","z");
   hipo::node<float>                 *CTOF__hits_z_unc = fReader->getBranch<float>("CTOF::hits","z_unc");
   hipo::node<int16_t>         *CTOF__rawhits_component = fReader->getBranch<int16_t>("CTOF::rawhits","component");
   hipo::node<float>         *CTOF__rawhits_energy_down = fReader->getBranch<float>("CTOF::rawhits","energy_down");
   hipo::node<float>     *CTOF__rawhits_energy_down_unc = fReader->getBranch<float>("CTOF::rawhits","energy_down_unc");
   hipo::node<float>           *CTOF__rawhits_energy_up = fReader->getBranch<float>("CTOF::rawhits","energy_up");
   hipo::node<float>       *CTOF__rawhits_energy_up_unc = fReader->getBranch<float>("CTOF::rawhits","energy_up_unc");
   hipo::node<int16_t>                *CTOF__rawhits_id = fReader->getBranch<int16_t>("CTOF::rawhits","id");
   hipo::node<int16_t>            *CTOF__rawhits_status = fReader->getBranch<int16_t>("CTOF::rawhits","status");
   hipo::node<float>           *CTOF__rawhits_time_down = fReader->getBranch<float>("CTOF::rawhits","time_down");
   hipo::node<float>       *CTOF__rawhits_time_down_unc = fReader->getBranch<float>("CTOF::rawhits","time_down_unc");
   hipo::node<float>             *CTOF__rawhits_time_up = fReader->getBranch<float>("CTOF::rawhits","time_up");
   hipo::node<float>         *CTOF__rawhits_time_up_unc = fReader->getBranch<float>("CTOF::rawhits","time_up_unc");
   hipo::node<int32_t>         *CTOF__tdc_TDC = fReader->getBranch<int32_t>("CTOF::tdc","TDC");
   hipo::node<int16_t>   *CTOF__tdc_component = fReader->getBranch<int16_t>("CTOF::tdc","component");
   hipo::node<int8_t>        *CTOF__tdc_layer = fReader->getBranch<int8_t>("CTOF::tdc","layer");
   hipo::node<int8_t>        *CTOF__tdc_order = fReader->getBranch<int8_t>("CTOF::tdc","order");
   hipo::node<int8_t>       *CTOF__tdc_sector = fReader->getBranch<int8_t>("CTOF::tdc","sector");
   hipo::node<int16_t>          *CVTRec__Cosmics_Cross10_ID = fReader->getBranch<int16_t>("CVTRec::Cosmics","Cross10_ID");
   hipo::node<int16_t>          *CVTRec__Cosmics_Cross11_ID = fReader->getBranch<int16_t>("CVTRec::Cosmics","Cross11_ID");
   hipo::node<int16_t>          *CVTRec__Cosmics_Cross12_ID = fReader->getBranch<int16_t>("CVTRec::Cosmics","Cross12_ID");
   hipo::node<int16_t>          *CVTRec__Cosmics_Cross13_ID = fReader->getBranch<int16_t>("CVTRec::Cosmics","Cross13_ID");
   hipo::node<int16_t>          *CVTRec__Cosmics_Cross14_ID = fReader->getBranch<int16_t>("CVTRec::Cosmics","Cross14_ID");
   hipo::node<int16_t>          *CVTRec__Cosmics_Cross15_ID = fReader->getBranch<int16_t>("CVTRec::Cosmics","Cross15_ID");
   hipo::node<int16_t>          *CVTRec__Cosmics_Cross16_ID = fReader->getBranch<int16_t>("CVTRec::Cosmics","Cross16_ID");
   hipo::node<int16_t>          *CVTRec__Cosmics_Cross17_ID = fReader->getBranch<int16_t>("CVTRec::Cosmics","Cross17_ID");
   hipo::node<int16_t>          *CVTRec__Cosmics_Cross18_ID = fReader->getBranch<int16_t>("CVTRec::Cosmics","Cross18_ID");
   hipo::node<int16_t>           *CVTRec__Cosmics_Cross1_ID = fReader->getBranch<int16_t>("CVTRec::Cosmics","Cross1_ID");
   hipo::node<int16_t>           *CVTRec__Cosmics_Cross2_ID = fReader->getBranch<int16_t>("CVTRec::Cosmics","Cross2_ID");
   hipo::node<int16_t>           *CVTRec__Cosmics_Cross3_ID = fReader->getBranch<int16_t>("CVTRec::Cosmics","Cross3_ID");
   hipo::node<int16_t>           *CVTRec__Cosmics_Cross4_ID = fReader->getBranch<int16_t>("CVTRec::Cosmics","Cross4_ID");
   hipo::node<int16_t>           *CVTRec__Cosmics_Cross5_ID = fReader->getBranch<int16_t>("CVTRec::Cosmics","Cross5_ID");
   hipo::node<int16_t>           *CVTRec__Cosmics_Cross6_ID = fReader->getBranch<int16_t>("CVTRec::Cosmics","Cross6_ID");
   hipo::node<int16_t>           *CVTRec__Cosmics_Cross7_ID = fReader->getBranch<int16_t>("CVTRec::Cosmics","Cross7_ID");
   hipo::node<int16_t>           *CVTRec__Cosmics_Cross8_ID = fReader->getBranch<int16_t>("CVTRec::Cosmics","Cross8_ID");
   hipo::node<int16_t>           *CVTRec__Cosmics_Cross9_ID = fReader->getBranch<int16_t>("CVTRec::Cosmics","Cross9_ID");
   hipo::node<int16_t>                  *CVTRec__Cosmics_ID = fReader->getBranch<int16_t>("CVTRec::Cosmics","ID");
   hipo::node<float>                  *CVTRec__Cosmics_chi2 = fReader->getBranch<float>("CVTRec::Cosmics","chi2");
   hipo::node<int16_t>                 *CVTRec__Cosmics_ndf = fReader->getBranch<int16_t>("CVTRec::Cosmics","ndf");
   hipo::node<float>                   *CVTRec__Cosmics_phi = fReader->getBranch<float>("CVTRec::Cosmics","phi");
   hipo::node<float>                 *CVTRec__Cosmics_theta = fReader->getBranch<float>("CVTRec::Cosmics","theta");
   hipo::node<float>     *CVTRec__Cosmics_trkline_yx_interc = fReader->getBranch<float>("CVTRec::Cosmics","trkline_yx_interc");
   hipo::node<float>      *CVTRec__Cosmics_trkline_yx_slope = fReader->getBranch<float>("CVTRec::Cosmics","trkline_yx_slope");
   hipo::node<float>     *CVTRec__Cosmics_trkline_yz_interc = fReader->getBranch<float>("CVTRec::Cosmics","trkline_yz_interc");
   hipo::node<float>      *CVTRec__Cosmics_trkline_yz_slope = fReader->getBranch<float>("CVTRec::Cosmics","trkline_yz_slope");
   hipo::node<int16_t>                *CVTRec__Tracks_Cross1_ID = fReader->getBranch<int16_t>("CVTRec::Tracks","Cross1_ID");
   hipo::node<int16_t>                *CVTRec__Tracks_Cross2_ID = fReader->getBranch<int16_t>("CVTRec::Tracks","Cross2_ID");
   hipo::node<int16_t>                *CVTRec__Tracks_Cross3_ID = fReader->getBranch<int16_t>("CVTRec::Tracks","Cross3_ID");
   hipo::node<int16_t>                *CVTRec__Tracks_Cross4_ID = fReader->getBranch<int16_t>("CVTRec::Tracks","Cross4_ID");
   hipo::node<int16_t>                *CVTRec__Tracks_Cross5_ID = fReader->getBranch<int16_t>("CVTRec::Tracks","Cross5_ID");
   hipo::node<int16_t>                *CVTRec__Tracks_Cross6_ID = fReader->getBranch<int16_t>("CVTRec::Tracks","Cross6_ID");
   hipo::node<int16_t>                *CVTRec__Tracks_Cross7_ID = fReader->getBranch<int16_t>("CVTRec::Tracks","Cross7_ID");
   hipo::node<int16_t>                *CVTRec__Tracks_Cross8_ID = fReader->getBranch<int16_t>("CVTRec::Tracks","Cross8_ID");
   hipo::node<int16_t>                *CVTRec__Tracks_Cross9_ID = fReader->getBranch<int16_t>("CVTRec::Tracks","Cross9_ID");
   hipo::node<int16_t>                       *CVTRec__Tracks_ID = fReader->getBranch<int16_t>("CVTRec::Tracks","ID");
   hipo::node<float>                       *CVTRec__Tracks_c_ux = fReader->getBranch<float>("CVTRec::Tracks","c_ux");
   hipo::node<float>                       *CVTRec__Tracks_c_uy = fReader->getBranch<float>("CVTRec::Tracks","c_uy");
   hipo::node<float>                       *CVTRec__Tracks_c_uz = fReader->getBranch<float>("CVTRec::Tracks","c_uz");
   hipo::node<float>                        *CVTRec__Tracks_c_x = fReader->getBranch<float>("CVTRec::Tracks","c_x");
   hipo::node<float>                        *CVTRec__Tracks_c_y = fReader->getBranch<float>("CVTRec::Tracks","c_y");
   hipo::node<float>                        *CVTRec__Tracks_c_z = fReader->getBranch<float>("CVTRec::Tracks","c_z");
   hipo::node<float>                       *CVTRec__Tracks_chi2 = fReader->getBranch<float>("CVTRec::Tracks","chi2");
   hipo::node<float>     *CVTRec__Tracks_circlefit_chi2_per_ndf = fReader->getBranch<float>("CVTRec::Tracks","circlefit_chi2_per_ndf");
   hipo::node<float>                    *CVTRec__Tracks_cov_d02 = fReader->getBranch<float>("CVTRec::Tracks","cov_d02");
   hipo::node<float>                 *CVTRec__Tracks_cov_d0phi0 = fReader->getBranch<float>("CVTRec::Tracks","cov_d0phi0");
   hipo::node<float>                  *CVTRec__Tracks_cov_d0rho = fReader->getBranch<float>("CVTRec::Tracks","cov_d0rho");
   hipo::node<float>                  *CVTRec__Tracks_cov_phi02 = fReader->getBranch<float>("CVTRec::Tracks","cov_phi02");
   hipo::node<float>                *CVTRec__Tracks_cov_phi0rho = fReader->getBranch<float>("CVTRec::Tracks","cov_phi0rho");
   hipo::node<float>                   *CVTRec__Tracks_cov_rho2 = fReader->getBranch<float>("CVTRec::Tracks","cov_rho2");
   hipo::node<float>                *CVTRec__Tracks_cov_tandip2 = fReader->getBranch<float>("CVTRec::Tracks","cov_tandip2");
   hipo::node<float>                    *CVTRec__Tracks_cov_z02 = fReader->getBranch<float>("CVTRec::Tracks","cov_z02");
   hipo::node<float>                         *CVTRec__Tracks_d0 = fReader->getBranch<float>("CVTRec::Tracks","d0");
   hipo::node<int8_t>             *CVTRec__Tracks_fittingMethod = fReader->getBranch<int8_t>("CVTRec::Tracks","fittingMethod");
   hipo::node<float>       *CVTRec__Tracks_linefit_chi2_per_ndf = fReader->getBranch<float>("CVTRec::Tracks","linefit_chi2_per_ndf");
   hipo::node<int16_t>                      *CVTRec__Tracks_ndf = fReader->getBranch<int16_t>("CVTRec::Tracks","ndf");
   hipo::node<float>                          *CVTRec__Tracks_p = fReader->getBranch<float>("CVTRec::Tracks","p");
   hipo::node<float>                 *CVTRec__Tracks_pathlength = fReader->getBranch<float>("CVTRec::Tracks","pathlength");
   hipo::node<float>                       *CVTRec__Tracks_phi0 = fReader->getBranch<float>("CVTRec::Tracks","phi0");
   hipo::node<float>                         *CVTRec__Tracks_pt = fReader->getBranch<float>("CVTRec::Tracks","pt");
   hipo::node<int8_t>                         *CVTRec__Tracks_q = fReader->getBranch<int8_t>("CVTRec::Tracks","q");
   hipo::node<float>                     *CVTRec__Tracks_tandip = fReader->getBranch<float>("CVTRec::Tracks","tandip");
   hipo::node<float>                         *CVTRec__Tracks_z0 = fReader->getBranch<float>("CVTRec::Tracks","z0");
   hipo::node<float>          *CVTRec__Trajectory_CalcCentroidStrip = fReader->getBranch<float>("CVTRec::Trajectory","CalcCentroidStrip");
   hipo::node<int16_t>                       *CVTRec__Trajectory_ID = fReader->getBranch<int16_t>("CVTRec::Trajectory","ID");
   hipo::node<int8_t>     *CVTRec__Trajectory_LayerTrackIntersPlane = fReader->getBranch<int8_t>("CVTRec::Trajectory","LayerTrackIntersPlane");
   hipo::node<float>        *CVTRec__Trajectory_PhiTrackIntersPlane = fReader->getBranch<float>("CVTRec::Trajectory","PhiTrackIntersPlane");
   hipo::node<int8_t>    *CVTRec__Trajectory_SectorTrackIntersPlane = fReader->getBranch<int8_t>("CVTRec::Trajectory","SectorTrackIntersPlane");
   hipo::node<float>      *CVTRec__Trajectory_ThetaTrackIntersPlane = fReader->getBranch<float>("CVTRec::Trajectory","ThetaTrackIntersPlane");
   hipo::node<float>          *CVTRec__Trajectory_XtrackIntersPlane = fReader->getBranch<float>("CVTRec::Trajectory","XtrackIntersPlane");
   hipo::node<float>          *CVTRec__Trajectory_YtrackIntersPlane = fReader->getBranch<float>("CVTRec::Trajectory","YtrackIntersPlane");
   hipo::node<float>          *CVTRec__Trajectory_ZtrackIntersPlane = fReader->getBranch<float>("CVTRec::Trajectory","ZtrackIntersPlane");
   hipo::node<float>              *CVTRec__Trajectory_trkToMPlnAngl = fReader->getBranch<float>("CVTRec::Trajectory","trkToMPlnAngl");
   hipo::node<int8_t>       *DC__doca_LR = fReader->getBranch<int8_t>("DC::doca","LR");
   hipo::node<float>      *DC__doca_doca = fReader->getBranch<float>("DC::doca","doca");
   hipo::node<float>     *DC__doca_sdoca = fReader->getBranch<float>("DC::doca","sdoca");
   hipo::node<float>     *DC__doca_stime = fReader->getBranch<float>("DC::doca","stime");
   hipo::node<float>      *DC__doca_time = fReader->getBranch<float>("DC::doca","time");
   hipo::node<int32_t>         *DC__tdc_TDC = fReader->getBranch<int32_t>("DC::tdc","TDC");
   hipo::node<int16_t>   *DC__tdc_component = fReader->getBranch<int16_t>("DC::tdc","component");
   hipo::node<int8_t>        *DC__tdc_layer = fReader->getBranch<int8_t>("DC::tdc","layer");
   hipo::node<int8_t>        *DC__tdc_order = fReader->getBranch<int8_t>("DC::tdc","order");
   hipo::node<int8_t>       *DC__tdc_sector = fReader->getBranch<int8_t>("DC::tdc","sector");
   hipo::node<int16_t>   *DETECTOR__Hits_component = fReader->getBranch<int16_t>("DETECTOR::Hits","component");
   hipo::node<int16_t>    *DETECTOR__Hits_detector = fReader->getBranch<int16_t>("DETECTOR::Hits","detector");
   hipo::node<float>        *DETECTOR__Hits_energy = fReader->getBranch<float>("DETECTOR::Hits","energy");
   hipo::node<int16_t>       *DETECTOR__Hits_layer = fReader->getBranch<int16_t>("DETECTOR::Hits","layer");
   hipo::node<float>          *DETECTOR__Hits_path = fReader->getBranch<float>("DETECTOR::Hits","path");
   hipo::node<int16_t>      *DETECTOR__Hits_sector = fReader->getBranch<int16_t>("DETECTOR::Hits","sector");
   hipo::node<float>          *DETECTOR__Hits_time = fReader->getBranch<float>("DETECTOR::Hits","time");
   hipo::node<float>       *DETECTOR__ccpb_nphe = fReader->getBranch<float>("DETECTOR::ccpb","nphe");
   hipo::node<float>       *DETECTOR__ccpb_path = fReader->getBranch<float>("DETECTOR::ccpb","path");
   hipo::node<int8_t>    *DETECTOR__ccpb_sector = fReader->getBranch<int8_t>("DETECTOR::ccpb","sector");
   hipo::node<float>       *DETECTOR__ccpb_time = fReader->getBranch<float>("DETECTOR::ccpb","time");
   hipo::node<float>        *DETECTOR__ecpb_ein = fReader->getBranch<float>("DETECTOR::ecpb","ein");
   hipo::node<float>       *DETECTOR__ecpb_eout = fReader->getBranch<float>("DETECTOR::ecpb","eout");
   hipo::node<float>       *DETECTOR__ecpb_etot = fReader->getBranch<float>("DETECTOR::ecpb","etot");
   hipo::node<float>       *DETECTOR__ecpb_path = fReader->getBranch<float>("DETECTOR::ecpb","path");
   hipo::node<int8_t>    *DETECTOR__ecpb_sector = fReader->getBranch<int8_t>("DETECTOR::ecpb","sector");
   hipo::node<float>       *DETECTOR__ecpb_time = fReader->getBranch<float>("DETECTOR::ecpb","time");
   hipo::node<float>          *DETECTOR__ecpb_x = fReader->getBranch<float>("DETECTOR::ecpb","x");
   hipo::node<float>          *DETECTOR__ecpb_y = fReader->getBranch<float>("DETECTOR::ecpb","y");
   hipo::node<float>          *DETECTOR__ecpb_z = fReader->getBranch<float>("DETECTOR::ecpb","z");
   hipo::node<float>     *DETECTOR__icpb_ecc = fReader->getBranch<float>("DETECTOR::icpb","ecc");
   hipo::node<float>     *DETECTOR__icpb_etc = fReader->getBranch<float>("DETECTOR::icpb","etc");
   hipo::node<float>      *DETECTOR__icpb_tc = fReader->getBranch<float>("DETECTOR::icpb","tc");
   hipo::node<float>      *DETECTOR__icpb_xc = fReader->getBranch<float>("DETECTOR::icpb","xc");
   hipo::node<float>      *DETECTOR__icpb_yc = fReader->getBranch<float>("DETECTOR::icpb","yc");
   hipo::node<float>        *DETECTOR__lcpb_ein = fReader->getBranch<float>("DETECTOR::lcpb","ein");
   hipo::node<float>       *DETECTOR__lcpb_etot = fReader->getBranch<float>("DETECTOR::lcpb","etot");
   hipo::node<float>       *DETECTOR__lcpb_path = fReader->getBranch<float>("DETECTOR::lcpb","path");
   hipo::node<int8_t>    *DETECTOR__lcpb_sector = fReader->getBranch<int8_t>("DETECTOR::lcpb","sector");
   hipo::node<float>       *DETECTOR__lcpb_time = fReader->getBranch<float>("DETECTOR::lcpb","time");
   hipo::node<float>          *DETECTOR__lcpb_x = fReader->getBranch<float>("DETECTOR::lcpb","x");
   hipo::node<float>          *DETECTOR__lcpb_y = fReader->getBranch<float>("DETECTOR::lcpb","y");
   hipo::node<float>          *DETECTOR__lcpb_z = fReader->getBranch<float>("DETECTOR::lcpb","z");
   hipo::node<float>       *DETECTOR__scpb_edep = fReader->getBranch<float>("DETECTOR::scpb","edep");
   hipo::node<int8_t>    *DETECTOR__scpb_paddle = fReader->getBranch<int8_t>("DETECTOR::scpb","paddle");
   hipo::node<float>       *DETECTOR__scpb_path = fReader->getBranch<float>("DETECTOR::scpb","path");
   hipo::node<int8_t>    *DETECTOR__scpb_sector = fReader->getBranch<int8_t>("DETECTOR::scpb","sector");
   hipo::node<float>       *DETECTOR__scpb_time = fReader->getBranch<float>("DETECTOR::scpb","time");
   hipo::node<int32_t>         *ECAL__adc_ADC = fReader->getBranch<int32_t>("ECAL::adc","ADC");
   hipo::node<int16_t>   *ECAL__adc_component = fReader->getBranch<int16_t>("ECAL::adc","component");
   hipo::node<int8_t>        *ECAL__adc_layer = fReader->getBranch<int8_t>("ECAL::adc","layer");
   hipo::node<int8_t>        *ECAL__adc_order = fReader->getBranch<int8_t>("ECAL::adc","order");
   hipo::node<int16_t>         *ECAL__adc_ped = fReader->getBranch<int16_t>("ECAL::adc","ped");
   hipo::node<int8_t>       *ECAL__adc_sector = fReader->getBranch<int8_t>("ECAL::adc","sector");
   hipo::node<float>          *ECAL__adc_time = fReader->getBranch<float>("ECAL::adc","time");
   hipo::node<float>     *ECAL__calib_energy = fReader->getBranch<float>("ECAL::calib","energy");
   hipo::node<int8_t>     *ECAL__calib_layer = fReader->getBranch<int8_t>("ECAL::calib","layer");
   hipo::node<float>      *ECAL__calib_rawEU = fReader->getBranch<float>("ECAL::calib","rawEU");
   hipo::node<float>      *ECAL__calib_rawEV = fReader->getBranch<float>("ECAL::calib","rawEV");
   hipo::node<float>      *ECAL__calib_rawEW = fReader->getBranch<float>("ECAL::calib","rawEW");
   hipo::node<float>      *ECAL__calib_recEU = fReader->getBranch<float>("ECAL::calib","recEU");
   hipo::node<float>      *ECAL__calib_recEV = fReader->getBranch<float>("ECAL::calib","recEV");
   hipo::node<float>      *ECAL__calib_recEW = fReader->getBranch<float>("ECAL::calib","recEW");
   hipo::node<int8_t>    *ECAL__calib_sector = fReader->getBranch<int8_t>("ECAL::calib","sector");
   hipo::node<int32_t>   *ECAL__clusters_coordU = fReader->getBranch<int32_t>("ECAL::clusters","coordU");
   hipo::node<int32_t>   *ECAL__clusters_coordV = fReader->getBranch<int32_t>("ECAL::clusters","coordV");
   hipo::node<int32_t>   *ECAL__clusters_coordW = fReader->getBranch<int32_t>("ECAL::clusters","coordW");
   hipo::node<float>     *ECAL__clusters_energy = fReader->getBranch<float>("ECAL::clusters","energy");
   hipo::node<int16_t>       *ECAL__clusters_id = fReader->getBranch<int16_t>("ECAL::clusters","id");
   hipo::node<int8_t>       *ECAL__clusters_idU = fReader->getBranch<int8_t>("ECAL::clusters","idU");
   hipo::node<int8_t>       *ECAL__clusters_idV = fReader->getBranch<int8_t>("ECAL::clusters","idV");
   hipo::node<int8_t>       *ECAL__clusters_idW = fReader->getBranch<int8_t>("ECAL::clusters","idW");
   hipo::node<int8_t>     *ECAL__clusters_layer = fReader->getBranch<int8_t>("ECAL::clusters","layer");
   hipo::node<int8_t>    *ECAL__clusters_sector = fReader->getBranch<int8_t>("ECAL::clusters","sector");
   hipo::node<int16_t>   *ECAL__clusters_status = fReader->getBranch<int16_t>("ECAL::clusters","status");
   hipo::node<float>       *ECAL__clusters_time = fReader->getBranch<float>("ECAL::clusters","time");
   hipo::node<float>     *ECAL__clusters_widthU = fReader->getBranch<float>("ECAL::clusters","widthU");
   hipo::node<float>     *ECAL__clusters_widthV = fReader->getBranch<float>("ECAL::clusters","widthV");
   hipo::node<float>     *ECAL__clusters_widthW = fReader->getBranch<float>("ECAL::clusters","widthW");
   hipo::node<float>          *ECAL__clusters_x = fReader->getBranch<float>("ECAL::clusters","x");
   hipo::node<float>          *ECAL__clusters_y = fReader->getBranch<float>("ECAL::clusters","y");
   hipo::node<float>          *ECAL__clusters_z = fReader->getBranch<float>("ECAL::clusters","z");
   hipo::node<float>     *ECAL__hits_energy = fReader->getBranch<float>("ECAL::hits","energy");
   hipo::node<int16_t>       *ECAL__hits_id = fReader->getBranch<int16_t>("ECAL::hits","id");
   hipo::node<int8_t>     *ECAL__hits_layer = fReader->getBranch<int8_t>("ECAL::hits","layer");
   hipo::node<int8_t>    *ECAL__hits_peakid = fReader->getBranch<int8_t>("ECAL::hits","peakid");
   hipo::node<int8_t>    *ECAL__hits_sector = fReader->getBranch<int8_t>("ECAL::hits","sector");
   hipo::node<int16_t>   *ECAL__hits_status = fReader->getBranch<int16_t>("ECAL::hits","status");
   hipo::node<int8_t>     *ECAL__hits_strip = fReader->getBranch<int8_t>("ECAL::hits","strip");
   hipo::node<float>       *ECAL__hits_time = fReader->getBranch<float>("ECAL::hits","time");
   hipo::node<float>     *ECAL__moments_distU = fReader->getBranch<float>("ECAL::moments","distU");
   hipo::node<float>     *ECAL__moments_distV = fReader->getBranch<float>("ECAL::moments","distV");
   hipo::node<float>     *ECAL__moments_distW = fReader->getBranch<float>("ECAL::moments","distW");
   hipo::node<float>       *ECAL__moments_m1u = fReader->getBranch<float>("ECAL::moments","m1u");
   hipo::node<float>       *ECAL__moments_m1v = fReader->getBranch<float>("ECAL::moments","m1v");
   hipo::node<float>       *ECAL__moments_m1w = fReader->getBranch<float>("ECAL::moments","m1w");
   hipo::node<float>       *ECAL__moments_m2u = fReader->getBranch<float>("ECAL::moments","m2u");
   hipo::node<float>       *ECAL__moments_m2v = fReader->getBranch<float>("ECAL::moments","m2v");
   hipo::node<float>       *ECAL__moments_m2w = fReader->getBranch<float>("ECAL::moments","m2w");
   hipo::node<float>       *ECAL__moments_m3u = fReader->getBranch<float>("ECAL::moments","m3u");
   hipo::node<float>       *ECAL__moments_m3v = fReader->getBranch<float>("ECAL::moments","m3v");
   hipo::node<float>       *ECAL__moments_m3w = fReader->getBranch<float>("ECAL::moments","m3w");
   hipo::node<float>     *ECAL__peaks_energy = fReader->getBranch<float>("ECAL::peaks","energy");
   hipo::node<int16_t>       *ECAL__peaks_id = fReader->getBranch<int16_t>("ECAL::peaks","id");
   hipo::node<int8_t>     *ECAL__peaks_layer = fReader->getBranch<int8_t>("ECAL::peaks","layer");
   hipo::node<int8_t>    *ECAL__peaks_sector = fReader->getBranch<int8_t>("ECAL::peaks","sector");
   hipo::node<int16_t>   *ECAL__peaks_status = fReader->getBranch<int16_t>("ECAL::peaks","status");
   hipo::node<float>       *ECAL__peaks_time = fReader->getBranch<float>("ECAL::peaks","time");
   hipo::node<float>      *ECAL__peaks_width = fReader->getBranch<float>("ECAL::peaks","width");
   hipo::node<float>         *ECAL__peaks_xe = fReader->getBranch<float>("ECAL::peaks","xe");
   hipo::node<float>         *ECAL__peaks_xo = fReader->getBranch<float>("ECAL::peaks","xo");
   hipo::node<float>         *ECAL__peaks_ye = fReader->getBranch<float>("ECAL::peaks","ye");
   hipo::node<float>         *ECAL__peaks_yo = fReader->getBranch<float>("ECAL::peaks","yo");
   hipo::node<float>         *ECAL__peaks_ze = fReader->getBranch<float>("ECAL::peaks","ze");
   hipo::node<float>         *ECAL__peaks_zo = fReader->getBranch<float>("ECAL::peaks","zo");
   hipo::node<int32_t>         *ECAL__tdc_TDC = fReader->getBranch<int32_t>("ECAL::tdc","TDC");
   hipo::node<int16_t>   *ECAL__tdc_component = fReader->getBranch<int16_t>("ECAL::tdc","component");
   hipo::node<int8_t>        *ECAL__tdc_layer = fReader->getBranch<int8_t>("ECAL::tdc","layer");
   hipo::node<int8_t>        *ECAL__tdc_order = fReader->getBranch<int8_t>("ECAL::tdc","order");
   hipo::node<int8_t>       *ECAL__tdc_sector = fReader->getBranch<int8_t>("ECAL::tdc","sector");
   hipo::node<float>       *EVENT__detector_ccnphe = fReader->getBranch<float>("EVENT::detector","ccnphe");
   hipo::node<float>         *EVENT__detector_ecin = fReader->getBranch<float>("EVENT::detector","ecin");
   hipo::node<float>        *EVENT__detector_ecout = fReader->getBranch<float>("EVENT::detector","ecout");
   hipo::node<float>       *EVENT__detector_ecpath = fReader->getBranch<float>("EVENT::detector","ecpath");
   hipo::node<int32_t>   *EVENT__detector_ecsector = fReader->getBranch<int32_t>("EVENT::detector","ecsector");
   hipo::node<float>       *EVENT__detector_ectime = fReader->getBranch<float>("EVENT::detector","ectime");
   hipo::node<float>        *EVENT__detector_ectot = fReader->getBranch<float>("EVENT::detector","ectot");
   hipo::node<float>          *EVENT__detector_ecu = fReader->getBranch<float>("EVENT::detector","ecu");
   hipo::node<float>          *EVENT__detector_ecv = fReader->getBranch<float>("EVENT::detector","ecv");
   hipo::node<float>          *EVENT__detector_ecw = fReader->getBranch<float>("EVENT::detector","ecw");
   hipo::node<int32_t>   *EVENT__detector_scpaddle = fReader->getBranch<int32_t>("EVENT::detector","scpaddle");
   hipo::node<float>       *EVENT__detector_scpath = fReader->getBranch<float>("EVENT::detector","scpath");
   hipo::node<int32_t>   *EVENT__detector_scsector = fReader->getBranch<int32_t>("EVENT::detector","scsector");
   hipo::node<float>       *EVENT__detector_sctime = fReader->getBranch<float>("EVENT::detector","sctime");
   hipo::node<int8_t>    *EVENT__particle_ccstat = fReader->getBranch<int8_t>("EVENT::particle","ccstat");
   hipo::node<int8_t>    *EVENT__particle_charge = fReader->getBranch<int8_t>("EVENT::particle","charge");
   hipo::node<int8_t>    *EVENT__particle_dcstat = fReader->getBranch<int8_t>("EVENT::particle","dcstat");
   hipo::node<int8_t>    *EVENT__particle_ecstat = fReader->getBranch<int8_t>("EVENT::particle","ecstat");
   hipo::node<int8_t>    *EVENT__particle_lcstat = fReader->getBranch<int8_t>("EVENT::particle","lcstat");
   hipo::node<float>       *EVENT__particle_mass = fReader->getBranch<float>("EVENT::particle","mass");
   hipo::node<int32_t>      *EVENT__particle_pid = fReader->getBranch<int32_t>("EVENT::particle","pid");
   hipo::node<float>         *EVENT__particle_px = fReader->getBranch<float>("EVENT::particle","px");
   hipo::node<float>         *EVENT__particle_py = fReader->getBranch<float>("EVENT::particle","py");
   hipo::node<float>         *EVENT__particle_pz = fReader->getBranch<float>("EVENT::particle","pz");
   hipo::node<int8_t>    *EVENT__particle_scstat = fReader->getBranch<int8_t>("EVENT::particle","scstat");
   hipo::node<int8_t>    *EVENT__particle_status = fReader->getBranch<int8_t>("EVENT::particle","status");
   hipo::node<float>         *EVENT__particle_vx = fReader->getBranch<float>("EVENT::particle","vx");
   hipo::node<float>         *EVENT__particle_vy = fReader->getBranch<float>("EVENT::particle","vy");
   hipo::node<float>         *EVENT__particle_vz = fReader->getBranch<float>("EVENT::particle","vz");
   hipo::node<int32_t>         *FMT__adc_ADC = fReader->getBranch<int32_t>("FMT::adc","ADC");
   hipo::node<int16_t>   *FMT__adc_component = fReader->getBranch<int16_t>("FMT::adc","component");
   hipo::node<int32_t>    *FMT__adc_integral = fReader->getBranch<int32_t>("FMT::adc","integral");
   hipo::node<int8_t>        *FMT__adc_layer = fReader->getBranch<int8_t>("FMT::adc","layer");
   hipo::node<int8_t>        *FMT__adc_order = fReader->getBranch<int8_t>("FMT::adc","order");
   hipo::node<int16_t>         *FMT__adc_ped = fReader->getBranch<int16_t>("FMT::adc","ped");
   hipo::node<int8_t>       *FMT__adc_sector = fReader->getBranch<int8_t>("FMT::adc","sector");
   hipo::node<float>          *FMT__adc_time = fReader->getBranch<float>("FMT::adc","time");
   hipo::node<int64_t>   *FMT__adc_timestamp = fReader->getBranch<int64_t>("FMT::adc","timestamp");
   hipo::node<float>                 *FMTRec__Clusters_ETot = fReader->getBranch<float>("FMTRec::Clusters","ETot");
   hipo::node<int16_t>            *FMTRec__Clusters_Hit1_ID = fReader->getBranch<int16_t>("FMTRec::Clusters","Hit1_ID");
   hipo::node<int16_t>            *FMTRec__Clusters_Hit2_ID = fReader->getBranch<int16_t>("FMTRec::Clusters","Hit2_ID");
   hipo::node<int16_t>            *FMTRec__Clusters_Hit3_ID = fReader->getBranch<int16_t>("FMTRec::Clusters","Hit3_ID");
   hipo::node<int16_t>            *FMTRec__Clusters_Hit4_ID = fReader->getBranch<int16_t>("FMTRec::Clusters","Hit4_ID");
   hipo::node<int16_t>            *FMTRec__Clusters_Hit5_ID = fReader->getBranch<int16_t>("FMTRec::Clusters","Hit5_ID");
   hipo::node<int16_t>                 *FMTRec__Clusters_ID = fReader->getBranch<int16_t>("FMTRec::Clusters","ID");
   hipo::node<float>             *FMTRec__Clusters_centroid = fReader->getBranch<float>("FMTRec::Clusters","centroid");
   hipo::node<float>     *FMTRec__Clusters_centroidResidual = fReader->getBranch<float>("FMTRec::Clusters","centroidResidual");
   hipo::node<int8_t>               *FMTRec__Clusters_layer = fReader->getBranch<int8_t>("FMTRec::Clusters","layer");
   hipo::node<int8_t>              *FMTRec__Clusters_sector = fReader->getBranch<int8_t>("FMTRec::Clusters","sector");
   hipo::node<float>                *FMTRec__Clusters_seedE = fReader->getBranch<float>("FMTRec::Clusters","seedE");
   hipo::node<float>         *FMTRec__Clusters_seedResidual = fReader->getBranch<float>("FMTRec::Clusters","seedResidual");
   hipo::node<int32_t>          *FMTRec__Clusters_seedStrip = fReader->getBranch<int32_t>("FMTRec::Clusters","seedStrip");
   hipo::node<int16_t>               *FMTRec__Clusters_size = fReader->getBranch<int16_t>("FMTRec::Clusters","size");
   hipo::node<int16_t>              *FMTRec__Clusters_trkID = fReader->getBranch<int16_t>("FMTRec::Clusters","trkID");
   hipo::node<int16_t>   *FMTRec__Crosses_Cluster1_ID = fReader->getBranch<int16_t>("FMTRec::Crosses","Cluster1_ID");
   hipo::node<int16_t>   *FMTRec__Crosses_Cluster2_ID = fReader->getBranch<int16_t>("FMTRec::Crosses","Cluster2_ID");
   hipo::node<int16_t>            *FMTRec__Crosses_ID = fReader->getBranch<int16_t>("FMTRec::Crosses","ID");
   hipo::node<float>           *FMTRec__Crosses_err_x = fReader->getBranch<float>("FMTRec::Crosses","err_x");
   hipo::node<float>           *FMTRec__Crosses_err_y = fReader->getBranch<float>("FMTRec::Crosses","err_y");
   hipo::node<float>           *FMTRec__Crosses_err_z = fReader->getBranch<float>("FMTRec::Crosses","err_z");
   hipo::node<int8_t>         *FMTRec__Crosses_region = fReader->getBranch<int8_t>("FMTRec::Crosses","region");
   hipo::node<int8_t>         *FMTRec__Crosses_sector = fReader->getBranch<int8_t>("FMTRec::Crosses","sector");
   hipo::node<int16_t>         *FMTRec__Crosses_trkID = fReader->getBranch<int16_t>("FMTRec::Crosses","trkID");
   hipo::node<float>              *FMTRec__Crosses_ux = fReader->getBranch<float>("FMTRec::Crosses","ux");
   hipo::node<float>              *FMTRec__Crosses_uy = fReader->getBranch<float>("FMTRec::Crosses","uy");
   hipo::node<float>              *FMTRec__Crosses_uz = fReader->getBranch<float>("FMTRec::Crosses","uz");
   hipo::node<float>               *FMTRec__Crosses_x = fReader->getBranch<float>("FMTRec::Crosses","x");
   hipo::node<float>               *FMTRec__Crosses_y = fReader->getBranch<float>("FMTRec::Crosses","y");
   hipo::node<float>               *FMTRec__Crosses_z = fReader->getBranch<float>("FMTRec::Crosses","z");
   hipo::node<int16_t>            *FMTRec__Hits_ID = fReader->getBranch<int16_t>("FMTRec::Hits","ID");
   hipo::node<int16_t>     *FMTRec__Hits_clusterID = fReader->getBranch<int16_t>("FMTRec::Hits","clusterID");
   hipo::node<float>     *FMTRec__Hits_fitResidual = fReader->getBranch<float>("FMTRec::Hits","fitResidual");
   hipo::node<int8_t>          *FMTRec__Hits_layer = fReader->getBranch<int8_t>("FMTRec::Hits","layer");
   hipo::node<int8_t>         *FMTRec__Hits_sector = fReader->getBranch<int8_t>("FMTRec::Hits","sector");
   hipo::node<int32_t>         *FMTRec__Hits_strip = fReader->getBranch<int32_t>("FMTRec::Hits","strip");
   hipo::node<int16_t>         *FMTRec__Hits_trkID = fReader->getBranch<int16_t>("FMTRec::Hits","trkID");
   hipo::node<int32_t>    *FMTRec__Hits_trkingStat = fReader->getBranch<int32_t>("FMTRec::Hits","trkingStat");
   hipo::node<int16_t>    *FT__particles_calID = fReader->getBranch<int16_t>("FT::particles","calID");
   hipo::node<int8_t>    *FT__particles_charge = fReader->getBranch<int8_t>("FT::particles","charge");
   hipo::node<float>         *FT__particles_cx = fReader->getBranch<float>("FT::particles","cx");
   hipo::node<float>         *FT__particles_cy = fReader->getBranch<float>("FT::particles","cy");
   hipo::node<float>         *FT__particles_cz = fReader->getBranch<float>("FT::particles","cz");
   hipo::node<float>     *FT__particles_energy = fReader->getBranch<float>("FT::particles","energy");
   hipo::node<int16_t>   *FT__particles_hodoID = fReader->getBranch<int16_t>("FT::particles","hodoID");
   hipo::node<int16_t>       *FT__particles_id = fReader->getBranch<int16_t>("FT::particles","id");
   hipo::node<float>       *FT__particles_time = fReader->getBranch<float>("FT::particles","time");
   hipo::node<int16_t>    *FT__particles_trkID = fReader->getBranch<int16_t>("FT::particles","trkID");
   hipo::node<int32_t>         *FTCAL__adc_ADC = fReader->getBranch<int32_t>("FTCAL::adc","ADC");
   hipo::node<int16_t>   *FTCAL__adc_component = fReader->getBranch<int16_t>("FTCAL::adc","component");
   hipo::node<int8_t>        *FTCAL__adc_layer = fReader->getBranch<int8_t>("FTCAL::adc","layer");
   hipo::node<int8_t>        *FTCAL__adc_order = fReader->getBranch<int8_t>("FTCAL::adc","order");
   hipo::node<int16_t>         *FTCAL__adc_ped = fReader->getBranch<int16_t>("FTCAL::adc","ped");
   hipo::node<int8_t>       *FTCAL__adc_sector = fReader->getBranch<int8_t>("FTCAL::adc","sector");
   hipo::node<float>          *FTCAL__adc_time = fReader->getBranch<float>("FTCAL::adc","time");
   hipo::node<float>        *FTCAL__clusters_energy = fReader->getBranch<float>("FTCAL::clusters","energy");
   hipo::node<int16_t>          *FTCAL__clusters_id = fReader->getBranch<int16_t>("FTCAL::clusters","id");
   hipo::node<float>     *FTCAL__clusters_maxEnergy = fReader->getBranch<float>("FTCAL::clusters","maxEnergy");
   hipo::node<float>        *FTCAL__clusters_radius = fReader->getBranch<float>("FTCAL::clusters","radius");
   hipo::node<float>     *FTCAL__clusters_recEnergy = fReader->getBranch<float>("FTCAL::clusters","recEnergy");
   hipo::node<int16_t>        *FTCAL__clusters_size = fReader->getBranch<int16_t>("FTCAL::clusters","size");
   hipo::node<float>          *FTCAL__clusters_time = fReader->getBranch<float>("FTCAL::clusters","time");
   hipo::node<float>        *FTCAL__clusters_widthX = fReader->getBranch<float>("FTCAL::clusters","widthX");
   hipo::node<float>        *FTCAL__clusters_widthY = fReader->getBranch<float>("FTCAL::clusters","widthY");
   hipo::node<float>             *FTCAL__clusters_x = fReader->getBranch<float>("FTCAL::clusters","x");
   hipo::node<float>             *FTCAL__clusters_y = fReader->getBranch<float>("FTCAL::clusters","y");
   hipo::node<float>             *FTCAL__clusters_z = fReader->getBranch<float>("FTCAL::clusters","z");
   hipo::node<int16_t>   *FTCAL__hits_clusterID = fReader->getBranch<int16_t>("FTCAL::hits","clusterID");
   hipo::node<float>        *FTCAL__hits_energy = fReader->getBranch<float>("FTCAL::hits","energy");
   hipo::node<int16_t>       *FTCAL__hits_hitID = fReader->getBranch<int16_t>("FTCAL::hits","hitID");
   hipo::node<int8_t>          *FTCAL__hits_idx = fReader->getBranch<int8_t>("FTCAL::hits","idx");
   hipo::node<int8_t>          *FTCAL__hits_idy = fReader->getBranch<int8_t>("FTCAL::hits","idy");
   hipo::node<float>          *FTCAL__hits_time = fReader->getBranch<float>("FTCAL::hits","time");
   hipo::node<float>             *FTCAL__hits_x = fReader->getBranch<float>("FTCAL::hits","x");
   hipo::node<float>             *FTCAL__hits_y = fReader->getBranch<float>("FTCAL::hits","y");
   hipo::node<float>             *FTCAL__hits_z = fReader->getBranch<float>("FTCAL::hits","z");
   hipo::node<int32_t>         *FTHODO__adc_ADC = fReader->getBranch<int32_t>("FTHODO::adc","ADC");
   hipo::node<int16_t>   *FTHODO__adc_component = fReader->getBranch<int16_t>("FTHODO::adc","component");
   hipo::node<int8_t>        *FTHODO__adc_layer = fReader->getBranch<int8_t>("FTHODO::adc","layer");
   hipo::node<int8_t>        *FTHODO__adc_order = fReader->getBranch<int8_t>("FTHODO::adc","order");
   hipo::node<int16_t>         *FTHODO__adc_ped = fReader->getBranch<int16_t>("FTHODO::adc","ped");
   hipo::node<int8_t>       *FTHODO__adc_sector = fReader->getBranch<int8_t>("FTHODO::adc","sector");
   hipo::node<float>          *FTHODO__adc_time = fReader->getBranch<float>("FTHODO::adc","time");
   hipo::node<float>     *FTHODO__clusters_energy = fReader->getBranch<float>("FTHODO::clusters","energy");
   hipo::node<int16_t>       *FTHODO__clusters_id = fReader->getBranch<int16_t>("FTHODO::clusters","id");
   hipo::node<float>     *FTHODO__clusters_radius = fReader->getBranch<float>("FTHODO::clusters","radius");
   hipo::node<int16_t>     *FTHODO__clusters_size = fReader->getBranch<int16_t>("FTHODO::clusters","size");
   hipo::node<float>       *FTHODO__clusters_time = fReader->getBranch<float>("FTHODO::clusters","time");
   hipo::node<float>     *FTHODO__clusters_widthX = fReader->getBranch<float>("FTHODO::clusters","widthX");
   hipo::node<float>     *FTHODO__clusters_widthY = fReader->getBranch<float>("FTHODO::clusters","widthY");
   hipo::node<float>          *FTHODO__clusters_x = fReader->getBranch<float>("FTHODO::clusters","x");
   hipo::node<float>          *FTHODO__clusters_y = fReader->getBranch<float>("FTHODO::clusters","y");
   hipo::node<float>          *FTHODO__clusters_z = fReader->getBranch<float>("FTHODO::clusters","z");
   hipo::node<int16_t>   *FTHODO__hits_clusterID = fReader->getBranch<int16_t>("FTHODO::hits","clusterID");
   hipo::node<int16_t>   *FTHODO__hits_component = fReader->getBranch<int16_t>("FTHODO::hits","component");
   hipo::node<float>        *FTHODO__hits_energy = fReader->getBranch<float>("FTHODO::hits","energy");
   hipo::node<int16_t>       *FTHODO__hits_hitID = fReader->getBranch<int16_t>("FTHODO::hits","hitID");
   hipo::node<int8_t>        *FTHODO__hits_layer = fReader->getBranch<int8_t>("FTHODO::hits","layer");
   hipo::node<int8_t>       *FTHODO__hits_sector = fReader->getBranch<int8_t>("FTHODO::hits","sector");
   hipo::node<float>          *FTHODO__hits_time = fReader->getBranch<float>("FTHODO::hits","time");
   hipo::node<float>             *FTHODO__hits_x = fReader->getBranch<float>("FTHODO::hits","x");
   hipo::node<float>             *FTHODO__hits_y = fReader->getBranch<float>("FTHODO::hits","y");
   hipo::node<float>             *FTHODO__hits_z = fReader->getBranch<float>("FTHODO::hits","z");
   hipo::node<int32_t>         *FTOF__adc_ADC = fReader->getBranch<int32_t>("FTOF::adc","ADC");
   hipo::node<int16_t>   *FTOF__adc_component = fReader->getBranch<int16_t>("FTOF::adc","component");
   hipo::node<int8_t>        *FTOF__adc_layer = fReader->getBranch<int8_t>("FTOF::adc","layer");
   hipo::node<int8_t>        *FTOF__adc_order = fReader->getBranch<int8_t>("FTOF::adc","order");
   hipo::node<int16_t>         *FTOF__adc_ped = fReader->getBranch<int16_t>("FTOF::adc","ped");
   hipo::node<int8_t>       *FTOF__adc_sector = fReader->getBranch<int8_t>("FTOF::adc","sector");
   hipo::node<float>          *FTOF__adc_time = fReader->getBranch<float>("FTOF::adc","time");
   hipo::node<int16_t>    *FTOF__clusters_component = fReader->getBranch<int16_t>("FTOF::clusters","component");
   hipo::node<float>         *FTOF__clusters_energy = fReader->getBranch<float>("FTOF::clusters","energy");
   hipo::node<float>     *FTOF__clusters_energy_unc = fReader->getBranch<float>("FTOF::clusters","energy_unc");
   hipo::node<int16_t>           *FTOF__clusters_id = fReader->getBranch<int16_t>("FTOF::clusters","id");
   hipo::node<int8_t>         *FTOF__clusters_layer = fReader->getBranch<int8_t>("FTOF::clusters","layer");
   hipo::node<int8_t>        *FTOF__clusters_sector = fReader->getBranch<int8_t>("FTOF::clusters","sector");
   hipo::node<int16_t>       *FTOF__clusters_status = fReader->getBranch<int16_t>("FTOF::clusters","status");
   hipo::node<float>           *FTOF__clusters_time = fReader->getBranch<float>("FTOF::clusters","time");
   hipo::node<float>       *FTOF__clusters_time_unc = fReader->getBranch<float>("FTOF::clusters","time_unc");
   hipo::node<int16_t>      *FTOF__clusters_trackid = fReader->getBranch<int16_t>("FTOF::clusters","trackid");
   hipo::node<float>              *FTOF__clusters_x = fReader->getBranch<float>("FTOF::clusters","x");
   hipo::node<float>          *FTOF__clusters_x_unc = fReader->getBranch<float>("FTOF::clusters","x_unc");
   hipo::node<float>              *FTOF__clusters_y = fReader->getBranch<float>("FTOF::clusters","y");
   hipo::node<float>          *FTOF__clusters_y_unc = fReader->getBranch<float>("FTOF::clusters","y_unc");
   hipo::node<float>              *FTOF__clusters_z = fReader->getBranch<float>("FTOF::clusters","z");
   hipo::node<float>          *FTOF__clusters_z_unc = fReader->getBranch<float>("FTOF::clusters","z_unc");
   hipo::node<int16_t>            *FTOF__hits_adc_idx1 = fReader->getBranch<int16_t>("FTOF::hits","adc_idx1");
   hipo::node<int16_t>            *FTOF__hits_adc_idx2 = fReader->getBranch<int16_t>("FTOF::hits","adc_idx2");
   hipo::node<int16_t>           *FTOF__hits_component = fReader->getBranch<int16_t>("FTOF::hits","component");
   hipo::node<float>                *FTOF__hits_energy = fReader->getBranch<float>("FTOF::hits","energy");
   hipo::node<float>            *FTOF__hits_energy_unc = fReader->getBranch<float>("FTOF::hits","energy_unc");
   hipo::node<int16_t>                  *FTOF__hits_id = fReader->getBranch<int16_t>("FTOF::hits","id");
   hipo::node<int8_t>                *FTOF__hits_layer = fReader->getBranch<int8_t>("FTOF::hits","layer");
   hipo::node<float>            *FTOF__hits_pathLength = fReader->getBranch<float>("FTOF::hits","pathLength");
   hipo::node<float>     *FTOF__hits_pathLengthThruBar = fReader->getBranch<float>("FTOF::hits","pathLengthThruBar");
   hipo::node<int8_t>               *FTOF__hits_sector = fReader->getBranch<int8_t>("FTOF::hits","sector");
   hipo::node<int16_t>              *FTOF__hits_status = fReader->getBranch<int16_t>("FTOF::hits","status");
   hipo::node<int16_t>            *FTOF__hits_tdc_idx1 = fReader->getBranch<int16_t>("FTOF::hits","tdc_idx1");
   hipo::node<int16_t>            *FTOF__hits_tdc_idx2 = fReader->getBranch<int16_t>("FTOF::hits","tdc_idx2");
   hipo::node<float>                  *FTOF__hits_time = fReader->getBranch<float>("FTOF::hits","time");
   hipo::node<float>              *FTOF__hits_time_unc = fReader->getBranch<float>("FTOF::hits","time_unc");
   hipo::node<int16_t>             *FTOF__hits_trackid = fReader->getBranch<int16_t>("FTOF::hits","trackid");
   hipo::node<float>                    *FTOF__hits_tx = fReader->getBranch<float>("FTOF::hits","tx");
   hipo::node<float>                    *FTOF__hits_ty = fReader->getBranch<float>("FTOF::hits","ty");
   hipo::node<float>                    *FTOF__hits_tz = fReader->getBranch<float>("FTOF::hits","tz");
   hipo::node<float>                     *FTOF__hits_x = fReader->getBranch<float>("FTOF::hits","x");
   hipo::node<float>                 *FTOF__hits_x_unc = fReader->getBranch<float>("FTOF::hits","x_unc");
   hipo::node<float>                     *FTOF__hits_y = fReader->getBranch<float>("FTOF::hits","y");
   hipo::node<float>                 *FTOF__hits_y_unc = fReader->getBranch<float>("FTOF::hits","y_unc");
   hipo::node<float>                     *FTOF__hits_z = fReader->getBranch<float>("FTOF::hits","z");
   hipo::node<float>                 *FTOF__hits_z_unc = fReader->getBranch<float>("FTOF::hits","z_unc");
   hipo::node<float>       *FTOF__matchedclusters_EmaxAlgo_1B_tCorr = fReader->getBranch<float>("FTOF::matchedclusters","EmaxAlgo_1B_tCorr");
   hipo::node<int16_t>           *FTOF__matchedclusters_clusSize_1A = fReader->getBranch<int16_t>("FTOF::matchedclusters","clusSize_1A");
   hipo::node<int16_t>           *FTOF__matchedclusters_clusSize_1B = fReader->getBranch<int16_t>("FTOF::matchedclusters","clusSize_1B");
   hipo::node<int16_t>             *FTOF__matchedclusters_clus_1Aid = fReader->getBranch<int16_t>("FTOF::matchedclusters","clus_1Aid");
   hipo::node<int16_t>             *FTOF__matchedclusters_clus_1Bid = fReader->getBranch<int16_t>("FTOF::matchedclusters","clus_1Bid");
   hipo::node<float>     *FTOF__matchedclusters_midbarAlgo_1B_tCorr = fReader->getBranch<float>("FTOF::matchedclusters","midbarAlgo_1B_tCorr");
   hipo::node<int16_t>           *FTOF__matchedclusters_paddle_id1A = fReader->getBranch<int16_t>("FTOF::matchedclusters","paddle_id1A");
   hipo::node<int16_t>           *FTOF__matchedclusters_paddle_id1B = fReader->getBranch<int16_t>("FTOF::matchedclusters","paddle_id1B");
   hipo::node<int8_t>                 *FTOF__matchedclusters_sector = fReader->getBranch<int8_t>("FTOF::matchedclusters","sector");
   hipo::node<float>       *FTOF__matchedclusters_tminAlgo_1B_tCorr = fReader->getBranch<float>("FTOF::matchedclusters","tminAlgo_1B_tCorr");
   hipo::node<int16_t>          *FTOF__rawhits_component = fReader->getBranch<int16_t>("FTOF::rawhits","component");
   hipo::node<float>          *FTOF__rawhits_energy_left = fReader->getBranch<float>("FTOF::rawhits","energy_left");
   hipo::node<float>      *FTOF__rawhits_energy_left_unc = fReader->getBranch<float>("FTOF::rawhits","energy_left_unc");
   hipo::node<float>         *FTOF__rawhits_energy_right = fReader->getBranch<float>("FTOF::rawhits","energy_right");
   hipo::node<float>     *FTOF__rawhits_energy_right_unc = fReader->getBranch<float>("FTOF::rawhits","energy_right_unc");
   hipo::node<int16_t>                 *FTOF__rawhits_id = fReader->getBranch<int16_t>("FTOF::rawhits","id");
   hipo::node<int8_t>               *FTOF__rawhits_layer = fReader->getBranch<int8_t>("FTOF::rawhits","layer");
   hipo::node<int8_t>              *FTOF__rawhits_sector = fReader->getBranch<int8_t>("FTOF::rawhits","sector");
   hipo::node<int16_t>             *FTOF__rawhits_status = fReader->getBranch<int16_t>("FTOF::rawhits","status");
   hipo::node<float>            *FTOF__rawhits_time_left = fReader->getBranch<float>("FTOF::rawhits","time_left");
   hipo::node<float>        *FTOF__rawhits_time_left_unc = fReader->getBranch<float>("FTOF::rawhits","time_left_unc");
   hipo::node<float>           *FTOF__rawhits_time_right = fReader->getBranch<float>("FTOF::rawhits","time_right");
   hipo::node<float>       *FTOF__rawhits_time_right_unc = fReader->getBranch<float>("FTOF::rawhits","time_right_unc");
   hipo::node<int32_t>         *FTOF__tdc_TDC = fReader->getBranch<int32_t>("FTOF::tdc","TDC");
   hipo::node<int16_t>   *FTOF__tdc_component = fReader->getBranch<int16_t>("FTOF::tdc","component");
   hipo::node<int8_t>        *FTOF__tdc_layer = fReader->getBranch<int8_t>("FTOF::tdc","layer");
   hipo::node<int8_t>        *FTOF__tdc_order = fReader->getBranch<int8_t>("FTOF::tdc","order");
   hipo::node<int8_t>       *FTOF__tdc_sector = fReader->getBranch<int8_t>("FTOF::tdc","sector");
   hipo::node<int32_t>         *FTTRK__adc_ADC = fReader->getBranch<int32_t>("FTTRK::adc","ADC");
   hipo::node<int16_t>   *FTTRK__adc_component = fReader->getBranch<int16_t>("FTTRK::adc","component");
   hipo::node<int32_t>    *FTTRK__adc_integral = fReader->getBranch<int32_t>("FTTRK::adc","integral");
   hipo::node<int8_t>        *FTTRK__adc_layer = fReader->getBranch<int8_t>("FTTRK::adc","layer");
   hipo::node<int8_t>        *FTTRK__adc_order = fReader->getBranch<int8_t>("FTTRK::adc","order");
   hipo::node<int16_t>         *FTTRK__adc_ped = fReader->getBranch<int16_t>("FTTRK::adc","ped");
   hipo::node<int8_t>       *FTTRK__adc_sector = fReader->getBranch<int8_t>("FTTRK::adc","sector");
   hipo::node<float>          *FTTRK__adc_time = fReader->getBranch<float>("FTTRK::adc","time");
   hipo::node<int64_t>   *FTTRK__adc_timestamp = fReader->getBranch<int64_t>("FTTRK::adc","timestamp");
   hipo::node<float>           *HEADER__info_fc = fReader->getBranch<float>("HEADER::info","fc");
   hipo::node<float>          *HEADER__info_fcg = fReader->getBranch<float>("HEADER::info","fcg");
   hipo::node<int8_t>    *HEADER__info_helicity = fReader->getBranch<int8_t>("HEADER::info","helicity");
   hipo::node<int32_t>       *HEADER__info_nevt = fReader->getBranch<int32_t>("HEADER::info","nevt");
   hipo::node<int32_t>       *HEADER__info_nrun = fReader->getBranch<int32_t>("HEADER::info","nrun");
   hipo::node<int16_t>     *HEADER__info_rastr1 = fReader->getBranch<int16_t>("HEADER::info","rastr1");
   hipo::node<int16_t>     *HEADER__info_rastr2 = fReader->getBranch<int16_t>("HEADER::info","rastr2");
   hipo::node<float>          *HEADER__info_stt = fReader->getBranch<float>("HEADER::info","stt");
   hipo::node<int32_t>    *HEADER__info_trigger = fReader->getBranch<int32_t>("HEADER::info","trigger");
   hipo::node<int32_t>         *HEL__adc_ADC = fReader->getBranch<int32_t>("HEL::adc","ADC");
   hipo::node<int16_t>   *HEL__adc_component = fReader->getBranch<int16_t>("HEL::adc","component");
   hipo::node<int8_t>        *HEL__adc_layer = fReader->getBranch<int8_t>("HEL::adc","layer");
   hipo::node<int8_t>        *HEL__adc_order = fReader->getBranch<int8_t>("HEL::adc","order");
   hipo::node<int16_t>         *HEL__adc_ped = fReader->getBranch<int16_t>("HEL::adc","ped");
   hipo::node<int8_t>       *HEL__adc_sector = fReader->getBranch<int8_t>("HEL::adc","sector");
   hipo::node<float>          *HEL__adc_time = fReader->getBranch<float>("HEL::adc","time");
   hipo::node<int32_t>         *HTCC__adc_ADC = fReader->getBranch<int32_t>("HTCC::adc","ADC");
   hipo::node<int16_t>   *HTCC__adc_component = fReader->getBranch<int16_t>("HTCC::adc","component");
   hipo::node<int8_t>        *HTCC__adc_layer = fReader->getBranch<int8_t>("HTCC::adc","layer");
   hipo::node<int8_t>        *HTCC__adc_order = fReader->getBranch<int8_t>("HTCC::adc","order");
   hipo::node<int16_t>         *HTCC__adc_ped = fReader->getBranch<int16_t>("HTCC::adc","ped");
   hipo::node<int8_t>       *HTCC__adc_sector = fReader->getBranch<int8_t>("HTCC::adc","sector");
   hipo::node<float>          *HTCC__adc_time = fReader->getBranch<float>("HTCC::adc","time");
   hipo::node<float>         *HTCC__rec_dphi = fReader->getBranch<float>("HTCC::rec","dphi");
   hipo::node<float>       *HTCC__rec_dtheta = fReader->getBranch<float>("HTCC::rec","dtheta");
   hipo::node<int16_t>         *HTCC__rec_id = fReader->getBranch<int16_t>("HTCC::rec","id");
   hipo::node<int16_t>     *HTCC__rec_maxphi = fReader->getBranch<int16_t>("HTCC::rec","maxphi");
   hipo::node<int16_t>   *HTCC__rec_maxtheta = fReader->getBranch<int16_t>("HTCC::rec","maxtheta");
   hipo::node<int16_t>     *HTCC__rec_minphi = fReader->getBranch<int16_t>("HTCC::rec","minphi");
   hipo::node<int16_t>   *HTCC__rec_mintheta = fReader->getBranch<int16_t>("HTCC::rec","mintheta");
   hipo::node<int16_t>      *HTCC__rec_nhits = fReader->getBranch<int16_t>("HTCC::rec","nhits");
   hipo::node<float>         *HTCC__rec_nphe = fReader->getBranch<float>("HTCC::rec","nphe");
   hipo::node<int16_t>       *HTCC__rec_nphi = fReader->getBranch<int16_t>("HTCC::rec","nphi");
   hipo::node<int16_t>     *HTCC__rec_ntheta = fReader->getBranch<int16_t>("HTCC::rec","ntheta");
   hipo::node<float>          *HTCC__rec_phi = fReader->getBranch<float>("HTCC::rec","phi");
   hipo::node<float>        *HTCC__rec_theta = fReader->getBranch<float>("HTCC::rec","theta");
   hipo::node<float>         *HTCC__rec_time = fReader->getBranch<float>("HTCC::rec","time");
   hipo::node<float>            *HTCC__rec_x = fReader->getBranch<float>("HTCC::rec","x");
   hipo::node<float>            *HTCC__rec_y = fReader->getBranch<float>("HTCC::rec","y");
   hipo::node<float>            *HTCC__rec_z = fReader->getBranch<float>("HTCC::rec","z");
   hipo::node<int32_t>         *HTCC__tdc_TDC = fReader->getBranch<int32_t>("HTCC::tdc","TDC");
   hipo::node<int16_t>   *HTCC__tdc_component = fReader->getBranch<int16_t>("HTCC::tdc","component");
   hipo::node<int8_t>        *HTCC__tdc_layer = fReader->getBranch<int8_t>("HTCC::tdc","layer");
   hipo::node<int8_t>        *HTCC__tdc_order = fReader->getBranch<int8_t>("HTCC::tdc","order");
   hipo::node<int8_t>       *HTCC__tdc_sector = fReader->getBranch<int8_t>("HTCC::tdc","sector");
   hipo::node<int16_t>       *HitBasedTrkg__HBClusters_Hit10_ID = fReader->getBranch<int16_t>("HitBasedTrkg::HBClusters","Hit10_ID");
   hipo::node<int16_t>       *HitBasedTrkg__HBClusters_Hit11_ID = fReader->getBranch<int16_t>("HitBasedTrkg::HBClusters","Hit11_ID");
   hipo::node<int16_t>       *HitBasedTrkg__HBClusters_Hit12_ID = fReader->getBranch<int16_t>("HitBasedTrkg::HBClusters","Hit12_ID");
   hipo::node<int16_t>        *HitBasedTrkg__HBClusters_Hit1_ID = fReader->getBranch<int16_t>("HitBasedTrkg::HBClusters","Hit1_ID");
   hipo::node<int16_t>        *HitBasedTrkg__HBClusters_Hit2_ID = fReader->getBranch<int16_t>("HitBasedTrkg::HBClusters","Hit2_ID");
   hipo::node<int16_t>        *HitBasedTrkg__HBClusters_Hit3_ID = fReader->getBranch<int16_t>("HitBasedTrkg::HBClusters","Hit3_ID");
   hipo::node<int16_t>        *HitBasedTrkg__HBClusters_Hit4_ID = fReader->getBranch<int16_t>("HitBasedTrkg::HBClusters","Hit4_ID");
   hipo::node<int16_t>        *HitBasedTrkg__HBClusters_Hit5_ID = fReader->getBranch<int16_t>("HitBasedTrkg::HBClusters","Hit5_ID");
   hipo::node<int16_t>        *HitBasedTrkg__HBClusters_Hit6_ID = fReader->getBranch<int16_t>("HitBasedTrkg::HBClusters","Hit6_ID");
   hipo::node<int16_t>        *HitBasedTrkg__HBClusters_Hit7_ID = fReader->getBranch<int16_t>("HitBasedTrkg::HBClusters","Hit7_ID");
   hipo::node<int16_t>        *HitBasedTrkg__HBClusters_Hit8_ID = fReader->getBranch<int16_t>("HitBasedTrkg::HBClusters","Hit8_ID");
   hipo::node<int16_t>        *HitBasedTrkg__HBClusters_Hit9_ID = fReader->getBranch<int16_t>("HitBasedTrkg::HBClusters","Hit9_ID");
   hipo::node<float>          *HitBasedTrkg__HBClusters_avgWire = fReader->getBranch<float>("HitBasedTrkg::HBClusters","avgWire");
   hipo::node<float>     *HitBasedTrkg__HBClusters_fitChisqProb = fReader->getBranch<float>("HitBasedTrkg::HBClusters","fitChisqProb");
   hipo::node<float>        *HitBasedTrkg__HBClusters_fitInterc = fReader->getBranch<float>("HitBasedTrkg::HBClusters","fitInterc");
   hipo::node<float>     *HitBasedTrkg__HBClusters_fitIntercErr = fReader->getBranch<float>("HitBasedTrkg::HBClusters","fitIntercErr");
   hipo::node<float>         *HitBasedTrkg__HBClusters_fitSlope = fReader->getBranch<float>("HitBasedTrkg::HBClusters","fitSlope");
   hipo::node<float>      *HitBasedTrkg__HBClusters_fitSlopeErr = fReader->getBranch<float>("HitBasedTrkg::HBClusters","fitSlopeErr");
   hipo::node<int16_t>             *HitBasedTrkg__HBClusters_id = fReader->getBranch<int16_t>("HitBasedTrkg::HBClusters","id");
   hipo::node<int8_t>          *HitBasedTrkg__HBClusters_sector = fReader->getBranch<int8_t>("HitBasedTrkg::HBClusters","sector");
   hipo::node<int8_t>            *HitBasedTrkg__HBClusters_size = fReader->getBranch<int8_t>("HitBasedTrkg::HBClusters","size");
   hipo::node<int16_t>         *HitBasedTrkg__HBClusters_status = fReader->getBranch<int16_t>("HitBasedTrkg::HBClusters","status");
   hipo::node<int8_t>      *HitBasedTrkg__HBClusters_superlayer = fReader->getBranch<int8_t>("HitBasedTrkg::HBClusters","superlayer");
   hipo::node<int16_t>   *HitBasedTrkg__HBCrosses_Segment1_ID = fReader->getBranch<int16_t>("HitBasedTrkg::HBCrosses","Segment1_ID");
   hipo::node<int16_t>   *HitBasedTrkg__HBCrosses_Segment2_ID = fReader->getBranch<int16_t>("HitBasedTrkg::HBCrosses","Segment2_ID");
   hipo::node<float>          *HitBasedTrkg__HBCrosses_err_ux = fReader->getBranch<float>("HitBasedTrkg::HBCrosses","err_ux");
   hipo::node<float>          *HitBasedTrkg__HBCrosses_err_uy = fReader->getBranch<float>("HitBasedTrkg::HBCrosses","err_uy");
   hipo::node<float>          *HitBasedTrkg__HBCrosses_err_uz = fReader->getBranch<float>("HitBasedTrkg::HBCrosses","err_uz");
   hipo::node<float>           *HitBasedTrkg__HBCrosses_err_x = fReader->getBranch<float>("HitBasedTrkg::HBCrosses","err_x");
   hipo::node<float>           *HitBasedTrkg__HBCrosses_err_y = fReader->getBranch<float>("HitBasedTrkg::HBCrosses","err_y");
   hipo::node<float>           *HitBasedTrkg__HBCrosses_err_z = fReader->getBranch<float>("HitBasedTrkg::HBCrosses","err_z");
   hipo::node<int16_t>            *HitBasedTrkg__HBCrosses_id = fReader->getBranch<int16_t>("HitBasedTrkg::HBCrosses","id");
   hipo::node<int8_t>         *HitBasedTrkg__HBCrosses_region = fReader->getBranch<int8_t>("HitBasedTrkg::HBCrosses","region");
   hipo::node<int8_t>         *HitBasedTrkg__HBCrosses_sector = fReader->getBranch<int8_t>("HitBasedTrkg::HBCrosses","sector");
   hipo::node<int16_t>        *HitBasedTrkg__HBCrosses_status = fReader->getBranch<int16_t>("HitBasedTrkg::HBCrosses","status");
   hipo::node<float>              *HitBasedTrkg__HBCrosses_ux = fReader->getBranch<float>("HitBasedTrkg::HBCrosses","ux");
   hipo::node<float>              *HitBasedTrkg__HBCrosses_uy = fReader->getBranch<float>("HitBasedTrkg::HBCrosses","uy");
   hipo::node<float>              *HitBasedTrkg__HBCrosses_uz = fReader->getBranch<float>("HitBasedTrkg::HBCrosses","uz");
   hipo::node<float>               *HitBasedTrkg__HBCrosses_x = fReader->getBranch<float>("HitBasedTrkg::HBCrosses","x");
   hipo::node<float>               *HitBasedTrkg__HBCrosses_y = fReader->getBranch<float>("HitBasedTrkg::HBCrosses","y");
   hipo::node<float>               *HitBasedTrkg__HBCrosses_z = fReader->getBranch<float>("HitBasedTrkg::HBCrosses","z");
   hipo::node<float>              *HitBasedTrkg__HBHits_B = fReader->getBranch<float>("HitBasedTrkg::HBHits","B");
   hipo::node<int8_t>            *HitBasedTrkg__HBHits_LR = fReader->getBranch<int8_t>("HitBasedTrkg::HBHits","LR");
   hipo::node<float>           *HitBasedTrkg__HBHits_LocX = fReader->getBranch<float>("HitBasedTrkg::HBHits","LocX");
   hipo::node<float>           *HitBasedTrkg__HBHits_LocY = fReader->getBranch<float>("HitBasedTrkg::HBHits","LocY");
   hipo::node<int32_t>          *HitBasedTrkg__HBHits_TDC = fReader->getBranch<int32_t>("HitBasedTrkg::HBHits","TDC");
   hipo::node<float>        *HitBasedTrkg__HBHits_TFlight = fReader->getBranch<float>("HitBasedTrkg::HBHits","TFlight");
   hipo::node<float>          *HitBasedTrkg__HBHits_TProp = fReader->getBranch<float>("HitBasedTrkg::HBHits","TProp");
   hipo::node<float>              *HitBasedTrkg__HBHits_X = fReader->getBranch<float>("HitBasedTrkg::HBHits","X");
   hipo::node<float>              *HitBasedTrkg__HBHits_Z = fReader->getBranch<float>("HitBasedTrkg::HBHits","Z");
   hipo::node<int16_t>    *HitBasedTrkg__HBHits_clusterID = fReader->getBranch<int16_t>("HitBasedTrkg::HBHits","clusterID");
   hipo::node<float>      *HitBasedTrkg__HBHits_docaError = fReader->getBranch<float>("HitBasedTrkg::HBHits","docaError");
   hipo::node<int16_t>           *HitBasedTrkg__HBHits_id = fReader->getBranch<int16_t>("HitBasedTrkg::HBHits","id");
   hipo::node<int8_t>         *HitBasedTrkg__HBHits_layer = fReader->getBranch<int8_t>("HitBasedTrkg::HBHits","layer");
   hipo::node<int8_t>        *HitBasedTrkg__HBHits_sector = fReader->getBranch<int8_t>("HitBasedTrkg::HBHits","sector");
   hipo::node<int16_t>       *HitBasedTrkg__HBHits_status = fReader->getBranch<int16_t>("HitBasedTrkg::HBHits","status");
   hipo::node<int8_t>    *HitBasedTrkg__HBHits_superlayer = fReader->getBranch<int8_t>("HitBasedTrkg::HBHits","superlayer");
   hipo::node<float>        *HitBasedTrkg__HBHits_trkDoca = fReader->getBranch<float>("HitBasedTrkg::HBHits","trkDoca");
   hipo::node<int8_t>         *HitBasedTrkg__HBHits_trkID = fReader->getBranch<int8_t>("HitBasedTrkg::HBHits","trkID");
   hipo::node<int16_t>         *HitBasedTrkg__HBHits_wire = fReader->getBranch<int16_t>("HitBasedTrkg::HBHits","wire");
   hipo::node<int8_t>           *HitBasedTrkg__HBSegmentTrajectory_layer = fReader->getBranch<int8_t>("HitBasedTrkg::HBSegmentTrajectory","layer");
   hipo::node<int16_t>   *HitBasedTrkg__HBSegmentTrajectory_matchedHitID = fReader->getBranch<int16_t>("HitBasedTrkg::HBSegmentTrajectory","matchedHitID");
   hipo::node<int8_t>          *HitBasedTrkg__HBSegmentTrajectory_sector = fReader->getBranch<int8_t>("HitBasedTrkg::HBSegmentTrajectory","sector");
   hipo::node<int16_t>      *HitBasedTrkg__HBSegmentTrajectory_segmentID = fReader->getBranch<int16_t>("HitBasedTrkg::HBSegmentTrajectory","segmentID");
   hipo::node<int8_t>      *HitBasedTrkg__HBSegmentTrajectory_superlayer = fReader->getBranch<int8_t>("HitBasedTrkg::HBSegmentTrajectory","superlayer");
   hipo::node<float>          *HitBasedTrkg__HBSegmentTrajectory_trkDoca = fReader->getBranch<float>("HitBasedTrkg::HBSegmentTrajectory","trkDoca");
   hipo::node<int16_t>      *HitBasedTrkg__HBSegments_Cluster_ID = fReader->getBranch<int16_t>("HitBasedTrkg::HBSegments","Cluster_ID");
   hipo::node<int16_t>        *HitBasedTrkg__HBSegments_Hit10_ID = fReader->getBranch<int16_t>("HitBasedTrkg::HBSegments","Hit10_ID");
   hipo::node<int16_t>        *HitBasedTrkg__HBSegments_Hit11_ID = fReader->getBranch<int16_t>("HitBasedTrkg::HBSegments","Hit11_ID");
   hipo::node<int16_t>        *HitBasedTrkg__HBSegments_Hit12_ID = fReader->getBranch<int16_t>("HitBasedTrkg::HBSegments","Hit12_ID");
   hipo::node<int16_t>         *HitBasedTrkg__HBSegments_Hit1_ID = fReader->getBranch<int16_t>("HitBasedTrkg::HBSegments","Hit1_ID");
   hipo::node<int16_t>         *HitBasedTrkg__HBSegments_Hit2_ID = fReader->getBranch<int16_t>("HitBasedTrkg::HBSegments","Hit2_ID");
   hipo::node<int16_t>         *HitBasedTrkg__HBSegments_Hit3_ID = fReader->getBranch<int16_t>("HitBasedTrkg::HBSegments","Hit3_ID");
   hipo::node<int16_t>         *HitBasedTrkg__HBSegments_Hit4_ID = fReader->getBranch<int16_t>("HitBasedTrkg::HBSegments","Hit4_ID");
   hipo::node<int16_t>         *HitBasedTrkg__HBSegments_Hit5_ID = fReader->getBranch<int16_t>("HitBasedTrkg::HBSegments","Hit5_ID");
   hipo::node<int16_t>         *HitBasedTrkg__HBSegments_Hit6_ID = fReader->getBranch<int16_t>("HitBasedTrkg::HBSegments","Hit6_ID");
   hipo::node<int16_t>         *HitBasedTrkg__HBSegments_Hit7_ID = fReader->getBranch<int16_t>("HitBasedTrkg::HBSegments","Hit7_ID");
   hipo::node<int16_t>         *HitBasedTrkg__HBSegments_Hit8_ID = fReader->getBranch<int16_t>("HitBasedTrkg::HBSegments","Hit8_ID");
   hipo::node<int16_t>         *HitBasedTrkg__HBSegments_Hit9_ID = fReader->getBranch<int16_t>("HitBasedTrkg::HBSegments","Hit9_ID");
   hipo::node<float>     *HitBasedTrkg__HBSegments_SegEndPoint1X = fReader->getBranch<float>("HitBasedTrkg::HBSegments","SegEndPoint1X");
   hipo::node<float>     *HitBasedTrkg__HBSegments_SegEndPoint1Z = fReader->getBranch<float>("HitBasedTrkg::HBSegments","SegEndPoint1Z");
   hipo::node<float>     *HitBasedTrkg__HBSegments_SegEndPoint2X = fReader->getBranch<float>("HitBasedTrkg::HBSegments","SegEndPoint2X");
   hipo::node<float>     *HitBasedTrkg__HBSegments_SegEndPoint2Z = fReader->getBranch<float>("HitBasedTrkg::HBSegments","SegEndPoint2Z");
   hipo::node<float>           *HitBasedTrkg__HBSegments_avgWire = fReader->getBranch<float>("HitBasedTrkg::HBSegments","avgWire");
   hipo::node<float>      *HitBasedTrkg__HBSegments_fitChisqProb = fReader->getBranch<float>("HitBasedTrkg::HBSegments","fitChisqProb");
   hipo::node<float>         *HitBasedTrkg__HBSegments_fitInterc = fReader->getBranch<float>("HitBasedTrkg::HBSegments","fitInterc");
   hipo::node<float>      *HitBasedTrkg__HBSegments_fitIntercErr = fReader->getBranch<float>("HitBasedTrkg::HBSegments","fitIntercErr");
   hipo::node<float>          *HitBasedTrkg__HBSegments_fitSlope = fReader->getBranch<float>("HitBasedTrkg::HBSegments","fitSlope");
   hipo::node<float>       *HitBasedTrkg__HBSegments_fitSlopeErr = fReader->getBranch<float>("HitBasedTrkg::HBSegments","fitSlopeErr");
   hipo::node<int16_t>              *HitBasedTrkg__HBSegments_id = fReader->getBranch<int16_t>("HitBasedTrkg::HBSegments","id");
   hipo::node<int8_t>           *HitBasedTrkg__HBSegments_sector = fReader->getBranch<int8_t>("HitBasedTrkg::HBSegments","sector");
   hipo::node<int8_t>             *HitBasedTrkg__HBSegments_size = fReader->getBranch<int8_t>("HitBasedTrkg::HBSegments","size");
   hipo::node<int16_t>          *HitBasedTrkg__HBSegments_status = fReader->getBranch<int16_t>("HitBasedTrkg::HBSegments","status");
   hipo::node<int8_t>       *HitBasedTrkg__HBSegments_superlayer = fReader->getBranch<int8_t>("HitBasedTrkg::HBSegments","superlayer");
   hipo::node<int16_t>    *HitBasedTrkg__HBTracks_Cross1_ID = fReader->getBranch<int16_t>("HitBasedTrkg::HBTracks","Cross1_ID");
   hipo::node<int16_t>    *HitBasedTrkg__HBTracks_Cross2_ID = fReader->getBranch<int16_t>("HitBasedTrkg::HBTracks","Cross2_ID");
   hipo::node<int16_t>    *HitBasedTrkg__HBTracks_Cross3_ID = fReader->getBranch<int16_t>("HitBasedTrkg::HBTracks","Cross3_ID");
   hipo::node<float>         *HitBasedTrkg__HBTracks_Vtx0_x = fReader->getBranch<float>("HitBasedTrkg::HBTracks","Vtx0_x");
   hipo::node<float>         *HitBasedTrkg__HBTracks_Vtx0_y = fReader->getBranch<float>("HitBasedTrkg::HBTracks","Vtx0_y");
   hipo::node<float>         *HitBasedTrkg__HBTracks_Vtx0_z = fReader->getBranch<float>("HitBasedTrkg::HBTracks","Vtx0_z");
   hipo::node<float>          *HitBasedTrkg__HBTracks_c1_ux = fReader->getBranch<float>("HitBasedTrkg::HBTracks","c1_ux");
   hipo::node<float>          *HitBasedTrkg__HBTracks_c1_uy = fReader->getBranch<float>("HitBasedTrkg::HBTracks","c1_uy");
   hipo::node<float>          *HitBasedTrkg__HBTracks_c1_uz = fReader->getBranch<float>("HitBasedTrkg::HBTracks","c1_uz");
   hipo::node<float>           *HitBasedTrkg__HBTracks_c1_x = fReader->getBranch<float>("HitBasedTrkg::HBTracks","c1_x");
   hipo::node<float>           *HitBasedTrkg__HBTracks_c1_y = fReader->getBranch<float>("HitBasedTrkg::HBTracks","c1_y");
   hipo::node<float>           *HitBasedTrkg__HBTracks_c1_z = fReader->getBranch<float>("HitBasedTrkg::HBTracks","c1_z");
   hipo::node<float>          *HitBasedTrkg__HBTracks_c3_ux = fReader->getBranch<float>("HitBasedTrkg::HBTracks","c3_ux");
   hipo::node<float>          *HitBasedTrkg__HBTracks_c3_uy = fReader->getBranch<float>("HitBasedTrkg::HBTracks","c3_uy");
   hipo::node<float>          *HitBasedTrkg__HBTracks_c3_uz = fReader->getBranch<float>("HitBasedTrkg::HBTracks","c3_uz");
   hipo::node<float>           *HitBasedTrkg__HBTracks_c3_x = fReader->getBranch<float>("HitBasedTrkg::HBTracks","c3_x");
   hipo::node<float>           *HitBasedTrkg__HBTracks_c3_y = fReader->getBranch<float>("HitBasedTrkg::HBTracks","c3_y");
   hipo::node<float>           *HitBasedTrkg__HBTracks_c3_z = fReader->getBranch<float>("HitBasedTrkg::HBTracks","c3_z");
   hipo::node<float>           *HitBasedTrkg__HBTracks_chi2 = fReader->getBranch<float>("HitBasedTrkg::HBTracks","chi2");
   hipo::node<int16_t>           *HitBasedTrkg__HBTracks_id = fReader->getBranch<int16_t>("HitBasedTrkg::HBTracks","id");
   hipo::node<int16_t>          *HitBasedTrkg__HBTracks_ndf = fReader->getBranch<int16_t>("HitBasedTrkg::HBTracks","ndf");
   hipo::node<float>           *HitBasedTrkg__HBTracks_p0_x = fReader->getBranch<float>("HitBasedTrkg::HBTracks","p0_x");
   hipo::node<float>           *HitBasedTrkg__HBTracks_p0_y = fReader->getBranch<float>("HitBasedTrkg::HBTracks","p0_y");
   hipo::node<float>           *HitBasedTrkg__HBTracks_p0_z = fReader->getBranch<float>("HitBasedTrkg::HBTracks","p0_z");
   hipo::node<float>     *HitBasedTrkg__HBTracks_pathlength = fReader->getBranch<float>("HitBasedTrkg::HBTracks","pathlength");
   hipo::node<int8_t>             *HitBasedTrkg__HBTracks_q = fReader->getBranch<int8_t>("HitBasedTrkg::HBTracks","q");
   hipo::node<int8_t>        *HitBasedTrkg__HBTracks_sector = fReader->getBranch<int8_t>("HitBasedTrkg::HBTracks","sector");
   hipo::node<int16_t>       *HitBasedTrkg__HBTracks_status = fReader->getBranch<int16_t>("HitBasedTrkg::HBTracks","status");
   hipo::node<float>          *HitBasedTrkg__HBTracks_t1_px = fReader->getBranch<float>("HitBasedTrkg::HBTracks","t1_px");
   hipo::node<float>          *HitBasedTrkg__HBTracks_t1_py = fReader->getBranch<float>("HitBasedTrkg::HBTracks","t1_py");
   hipo::node<float>          *HitBasedTrkg__HBTracks_t1_pz = fReader->getBranch<float>("HitBasedTrkg::HBTracks","t1_pz");
   hipo::node<float>           *HitBasedTrkg__HBTracks_t1_x = fReader->getBranch<float>("HitBasedTrkg::HBTracks","t1_x");
   hipo::node<float>           *HitBasedTrkg__HBTracks_t1_y = fReader->getBranch<float>("HitBasedTrkg::HBTracks","t1_y");
   hipo::node<float>           *HitBasedTrkg__HBTracks_t1_z = fReader->getBranch<float>("HitBasedTrkg::HBTracks","t1_z");
   hipo::node<int32_t>         *LTCC__adc_ADC = fReader->getBranch<int32_t>("LTCC::adc","ADC");
   hipo::node<int16_t>   *LTCC__adc_component = fReader->getBranch<int16_t>("LTCC::adc","component");
   hipo::node<int8_t>        *LTCC__adc_layer = fReader->getBranch<int8_t>("LTCC::adc","layer");
   hipo::node<int8_t>        *LTCC__adc_order = fReader->getBranch<int8_t>("LTCC::adc","order");
   hipo::node<int16_t>         *LTCC__adc_ped = fReader->getBranch<int16_t>("LTCC::adc","ped");
   hipo::node<int8_t>       *LTCC__adc_sector = fReader->getBranch<int8_t>("LTCC::adc","sector");
   hipo::node<float>          *LTCC__adc_time = fReader->getBranch<float>("LTCC::adc","time");
   hipo::node<int16_t>         *LTCC__clusters_id = fReader->getBranch<int16_t>("LTCC::clusters","id");
   hipo::node<float>       *LTCC__clusters_maxPhi = fReader->getBranch<float>("LTCC::clusters","maxPhi");
   hipo::node<float>     *LTCC__clusters_maxTheta = fReader->getBranch<float>("LTCC::clusters","maxTheta");
   hipo::node<float>       *LTCC__clusters_minPhi = fReader->getBranch<float>("LTCC::clusters","minPhi");
   hipo::node<float>     *LTCC__clusters_minTheta = fReader->getBranch<float>("LTCC::clusters","minTheta");
   hipo::node<int16_t>      *LTCC__clusters_nHits = fReader->getBranch<int16_t>("LTCC::clusters","nHits");
   hipo::node<float>         *LTCC__clusters_nphe = fReader->getBranch<float>("LTCC::clusters","nphe");
   hipo::node<int8_t>      *LTCC__clusters_sector = fReader->getBranch<int8_t>("LTCC::clusters","sector");
   hipo::node<int16_t>    *LTCC__clusters_segment = fReader->getBranch<int16_t>("LTCC::clusters","segment");
   hipo::node<int8_t>      *LTCC__clusters_status = fReader->getBranch<int8_t>("LTCC::clusters","status");
   hipo::node<float>         *LTCC__clusters_time = fReader->getBranch<float>("LTCC::clusters","time");
   hipo::node<float>            *LTCC__clusters_x = fReader->getBranch<float>("LTCC::clusters","x");
   hipo::node<float>            *LTCC__clusters_y = fReader->getBranch<float>("LTCC::clusters","y");
   hipo::node<float>            *LTCC__clusters_z = fReader->getBranch<float>("LTCC::clusters","z");
   hipo::node<int32_t>         *LTCC__tdc_TDC = fReader->getBranch<int32_t>("LTCC::tdc","TDC");
   hipo::node<int16_t>   *LTCC__tdc_component = fReader->getBranch<int16_t>("LTCC::tdc","component");
   hipo::node<int8_t>        *LTCC__tdc_layer = fReader->getBranch<int8_t>("LTCC::tdc","layer");
   hipo::node<int8_t>        *LTCC__tdc_order = fReader->getBranch<int8_t>("LTCC::tdc","order");
   hipo::node<int8_t>       *LTCC__tdc_sector = fReader->getBranch<int8_t>("LTCC::tdc","sector");
   hipo::node<int16_t>     *MC__Event_atarget = fReader->getBranch<int16_t>("MC::Event","atarget");
   hipo::node<int16_t>       *MC__Event_btype = fReader->getBranch<int16_t>("MC::Event","btype");
   hipo::node<float>         *MC__Event_ebeam = fReader->getBranch<float>("MC::Event","ebeam");
   hipo::node<int16_t>       *MC__Event_npart = fReader->getBranch<int16_t>("MC::Event","npart");
   hipo::node<float>         *MC__Event_pbeam = fReader->getBranch<float>("MC::Event","pbeam");
   hipo::node<int16_t>   *MC__Event_processid = fReader->getBranch<int16_t>("MC::Event","processid");
   hipo::node<float>       *MC__Event_ptarget = fReader->getBranch<float>("MC::Event","ptarget");
   hipo::node<int16_t>    *MC__Event_targetid = fReader->getBranch<int16_t>("MC::Event","targetid");
   hipo::node<float>        *MC__Event_weight = fReader->getBranch<float>("MC::Event","weight");
   hipo::node<int16_t>     *MC__Event_ztarget = fReader->getBranch<int16_t>("MC::Event","ztarget");
   hipo::node<int32_t>      *MC__Header_event = fReader->getBranch<int32_t>("MC::Header","event");
   hipo::node<float>     *MC__Header_helicity = fReader->getBranch<float>("MC::Header","helicity");
   hipo::node<int32_t>        *MC__Header_run = fReader->getBranch<int32_t>("MC::Header","run");
   hipo::node<int8_t>        *MC__Header_type = fReader->getBranch<int8_t>("MC::Header","type");
   hipo::node<float>            *MC__Lund_energy = fReader->getBranch<float>("MC::Lund","energy");
   hipo::node<int8_t>    *MC__Lund_daughter = fReader->getBranch<int8_t>("MC::Lund","daughter");
   hipo::node<int8_t>       *MC__Lund_index = fReader->getBranch<int8_t>("MC::Lund","index");
   hipo::node<float>        *MC__Lund_lifetime = fReader->getBranch<float>("MC::Lund","lifetime");
   hipo::node<float>         *MC__Lund_mass = fReader->getBranch<float>("MC::Lund","mass");
   hipo::node<int8_t>      *MC__Lund_parent = fReader->getBranch<int8_t>("MC::Lund","parent");
   hipo::node<int32_t>        *MC__Lund_pid = fReader->getBranch<int32_t>("MC::Lund","pid");
   hipo::node<float>           *MC__Lund_px = fReader->getBranch<float>("MC::Lund","px");
   hipo::node<float>           *MC__Lund_py = fReader->getBranch<float>("MC::Lund","py");
   hipo::node<float>           *MC__Lund_pz = fReader->getBranch<float>("MC::Lund","pz");
   hipo::node<int8_t>        *MC__Lund_type = fReader->getBranch<int8_t>("MC::Lund","type");
   hipo::node<float>           *MC__Lund_vx = fReader->getBranch<float>("MC::Lund","vx");
   hipo::node<float>           *MC__Lund_vy = fReader->getBranch<float>("MC::Lund","vy");
   hipo::node<float>           *MC__Lund_vz = fReader->getBranch<float>("MC::Lund","vz");
   hipo::node<int32_t>   *MC__Particle_pid = fReader->getBranch<int32_t>("MC::Particle","pid");
   hipo::node<float>      *MC__Particle_px = fReader->getBranch<float>("MC::Particle","px");
   hipo::node<float>      *MC__Particle_py = fReader->getBranch<float>("MC::Particle","py");
   hipo::node<float>      *MC__Particle_pz = fReader->getBranch<float>("MC::Particle","pz");
   hipo::node<float>      *MC__Particle_vt = fReader->getBranch<float>("MC::Particle","vt");
   hipo::node<float>      *MC__Particle_vx = fReader->getBranch<float>("MC::Particle","vx");
   hipo::node<float>      *MC__Particle_vy = fReader->getBranch<float>("MC::Particle","vy");
   hipo::node<float>      *MC__Particle_vz = fReader->getBranch<float>("MC::Particle","vz");
   hipo::node<float>        *MC__True_avgLx = fReader->getBranch<float>("MC::True","avgLx");
   hipo::node<float>        *MC__True_avgLy = fReader->getBranch<float>("MC::True","avgLy");
   hipo::node<float>        *MC__True_avgLz = fReader->getBranch<float>("MC::True","avgLz");
   hipo::node<float>         *MC__True_avgT = fReader->getBranch<float>("MC::True","avgT");
   hipo::node<float>         *MC__True_avgX = fReader->getBranch<float>("MC::True","avgX");
   hipo::node<float>         *MC__True_avgY = fReader->getBranch<float>("MC::True","avgY");
   hipo::node<float>         *MC__True_avgZ = fReader->getBranch<float>("MC::True","avgZ");
   hipo::node<int8_t>    *MC__True_detector = fReader->getBranch<int8_t>("MC::True","detector");
   hipo::node<int32_t>       *MC__True_hitn = fReader->getBranch<int32_t>("MC::True","hitn");
   hipo::node<int32_t>       *MC__True_mpid = fReader->getBranch<int32_t>("MC::True","mpid");
   hipo::node<int32_t>       *MC__True_mtid = fReader->getBranch<int32_t>("MC::True","mtid");
   hipo::node<float>          *MC__True_mvx = fReader->getBranch<float>("MC::True","mvx");
   hipo::node<float>          *MC__True_mvy = fReader->getBranch<float>("MC::True","mvy");
   hipo::node<float>          *MC__True_mvz = fReader->getBranch<float>("MC::True","mvz");
   hipo::node<int32_t>     *MC__True_nsteps = fReader->getBranch<int32_t>("MC::True","nsteps");
   hipo::node<int32_t>       *MC__True_otid = fReader->getBranch<int32_t>("MC::True","otid");
   hipo::node<int32_t>        *MC__True_pid = fReader->getBranch<int32_t>("MC::True","pid");
   hipo::node<int32_t>     *MC__True_procID = fReader->getBranch<int32_t>("MC::True","procID");
   hipo::node<float>           *MC__True_px = fReader->getBranch<float>("MC::True","px");
   hipo::node<float>           *MC__True_py = fReader->getBranch<float>("MC::True","py");
   hipo::node<float>           *MC__True_pz = fReader->getBranch<float>("MC::True","pz");
   hipo::node<int32_t>        *MC__True_tid = fReader->getBranch<int32_t>("MC::True","tid");
   hipo::node<float>      *MC__True_totEdep = fReader->getBranch<float>("MC::True","totEdep");
   hipo::node<float>       *MC__True_trackE = fReader->getBranch<float>("MC::True","trackE");
   hipo::node<float>           *MC__True_vx = fReader->getBranch<float>("MC::True","vx");
   hipo::node<float>           *MC__True_vy = fReader->getBranch<float>("MC::True","vy");
   hipo::node<float>           *MC__True_vz = fReader->getBranch<float>("MC::True","vz");
   hipo::node<int32_t>       *RAW__adc_ADC = fReader->getBranch<int32_t>("RAW::adc","ADC");
   hipo::node<int16_t>   *RAW__adc_channel = fReader->getBranch<int16_t>("RAW::adc","channel");
   hipo::node<int8_t>      *RAW__adc_crate = fReader->getBranch<int8_t>("RAW::adc","crate");
   hipo::node<int16_t>       *RAW__adc_ped = fReader->getBranch<int16_t>("RAW::adc","ped");
   hipo::node<int8_t>       *RAW__adc_slot = fReader->getBranch<int8_t>("RAW::adc","slot");
   hipo::node<float>        *RAW__adc_time = fReader->getBranch<float>("RAW::adc","time");
   hipo::node<int16_t>    *RAW__scaler_channel = fReader->getBranch<int16_t>("RAW::scaler","channel");
   hipo::node<int8_t>       *RAW__scaler_crate = fReader->getBranch<int8_t>("RAW::scaler","crate");
   hipo::node<int8_t>    *RAW__scaler_helicity = fReader->getBranch<int8_t>("RAW::scaler","helicity");
   hipo::node<int8_t>     *RAW__scaler_quartet = fReader->getBranch<int8_t>("RAW::scaler","quartet");
   hipo::node<int8_t>        *RAW__scaler_slot = fReader->getBranch<int8_t>("RAW::scaler","slot");
   hipo::node<int32_t>      *RAW__scaler_value = fReader->getBranch<int32_t>("RAW::scaler","value");
   hipo::node<int32_t>       *RAW__tdc_TDC = fReader->getBranch<int32_t>("RAW::tdc","TDC");
   hipo::node<int16_t>   *RAW__tdc_channel = fReader->getBranch<int16_t>("RAW::tdc","channel");
   hipo::node<int8_t>      *RAW__tdc_crate = fReader->getBranch<int8_t>("RAW::tdc","crate");
   hipo::node<int8_t>       *RAW__tdc_slot = fReader->getBranch<int8_t>("RAW::tdc","slot");
   hipo::node<int16_t>   *RAW__vtp_channel = fReader->getBranch<int16_t>("RAW::vtp","channel");
   hipo::node<int8_t>      *RAW__vtp_crate = fReader->getBranch<int8_t>("RAW::vtp","crate");
   hipo::node<int8_t>       *RAW__vtp_slot = fReader->getBranch<int8_t>("RAW::vtp","slot");
   hipo::node<int32_t>      *RAW__vtp_word = fReader->getBranch<int32_t>("RAW::vtp","word");
   hipo::node<float>         *REC__Calorimeter_chi2 = fReader->getBranch<float>("REC::Calorimeter","chi2");
   hipo::node<int8_t>    *REC__Calorimeter_detector = fReader->getBranch<int8_t>("REC::Calorimeter","detector");
   hipo::node<float>           *REC__Calorimeter_du = fReader->getBranch<float>("REC::Calorimeter","du");
   hipo::node<float>           *REC__Calorimeter_dv = fReader->getBranch<float>("REC::Calorimeter","dv");
   hipo::node<float>           *REC__Calorimeter_dw = fReader->getBranch<float>("REC::Calorimeter","dw");
   hipo::node<float>       *REC__Calorimeter_energy = fReader->getBranch<float>("REC::Calorimeter","energy");
   hipo::node<float>           *REC__Calorimeter_hx = fReader->getBranch<float>("REC::Calorimeter","hx");
   hipo::node<float>           *REC__Calorimeter_hy = fReader->getBranch<float>("REC::Calorimeter","hy");
   hipo::node<float>           *REC__Calorimeter_hz = fReader->getBranch<float>("REC::Calorimeter","hz");
   hipo::node<int16_t>      *REC__Calorimeter_index = fReader->getBranch<int16_t>("REC::Calorimeter","index");
   hipo::node<int8_t>       *REC__Calorimeter_layer = fReader->getBranch<int8_t>("REC::Calorimeter","layer");
   hipo::node<float>           *REC__Calorimeter_lu = fReader->getBranch<float>("REC::Calorimeter","lu");
   hipo::node<float>           *REC__Calorimeter_lv = fReader->getBranch<float>("REC::Calorimeter","lv");
   hipo::node<float>           *REC__Calorimeter_lw = fReader->getBranch<float>("REC::Calorimeter","lw");
   hipo::node<float>          *REC__Calorimeter_m2u = fReader->getBranch<float>("REC::Calorimeter","m2u");
   hipo::node<float>          *REC__Calorimeter_m2v = fReader->getBranch<float>("REC::Calorimeter","m2v");
   hipo::node<float>          *REC__Calorimeter_m2w = fReader->getBranch<float>("REC::Calorimeter","m2w");
   hipo::node<float>          *REC__Calorimeter_m3u = fReader->getBranch<float>("REC::Calorimeter","m3u");
   hipo::node<float>          *REC__Calorimeter_m3v = fReader->getBranch<float>("REC::Calorimeter","m3v");
   hipo::node<float>          *REC__Calorimeter_m3w = fReader->getBranch<float>("REC::Calorimeter","m3w");
   hipo::node<float>         *REC__Calorimeter_path = fReader->getBranch<float>("REC::Calorimeter","path");
   hipo::node<int16_t>     *REC__Calorimeter_pindex = fReader->getBranch<int16_t>("REC::Calorimeter","pindex");
   hipo::node<int8_t>      *REC__Calorimeter_sector = fReader->getBranch<int8_t>("REC::Calorimeter","sector");
   hipo::node<int16_t>     *REC__Calorimeter_status = fReader->getBranch<int16_t>("REC::Calorimeter","status");
   hipo::node<float>         *REC__Calorimeter_time = fReader->getBranch<float>("REC::Calorimeter","time");
   hipo::node<float>            *REC__Calorimeter_x = fReader->getBranch<float>("REC::Calorimeter","x");
   hipo::node<float>            *REC__Calorimeter_y = fReader->getBranch<float>("REC::Calorimeter","y");
   hipo::node<float>            *REC__Calorimeter_z = fReader->getBranch<float>("REC::Calorimeter","z");
   hipo::node<float>         *REC__Cherenkov_chi2 = fReader->getBranch<float>("REC::Cherenkov","chi2");
   hipo::node<int8_t>    *REC__Cherenkov_detector = fReader->getBranch<int8_t>("REC::Cherenkov","detector");
   hipo::node<float>         *REC__Cherenkov_dphi = fReader->getBranch<float>("REC::Cherenkov","dphi");
   hipo::node<float>       *REC__Cherenkov_dtheta = fReader->getBranch<float>("REC::Cherenkov","dtheta");
   hipo::node<int16_t>      *REC__Cherenkov_index = fReader->getBranch<int16_t>("REC::Cherenkov","index");
   hipo::node<float>         *REC__Cherenkov_nphe = fReader->getBranch<float>("REC::Cherenkov","nphe");
   hipo::node<float>         *REC__Cherenkov_path = fReader->getBranch<float>("REC::Cherenkov","path");
   hipo::node<float>          *REC__Cherenkov_phi = fReader->getBranch<float>("REC::Cherenkov","phi");
   hipo::node<int16_t>     *REC__Cherenkov_pindex = fReader->getBranch<int16_t>("REC::Cherenkov","pindex");
   hipo::node<int8_t>      *REC__Cherenkov_sector = fReader->getBranch<int8_t>("REC::Cherenkov","sector");
   hipo::node<int16_t>     *REC__Cherenkov_status = fReader->getBranch<int16_t>("REC::Cherenkov","status");
   hipo::node<float>        *REC__Cherenkov_theta = fReader->getBranch<float>("REC::Cherenkov","theta");
   hipo::node<float>         *REC__Cherenkov_time = fReader->getBranch<float>("REC::Cherenkov","time");
   hipo::node<float>            *REC__Cherenkov_x = fReader->getBranch<float>("REC::Cherenkov","x");
   hipo::node<float>            *REC__Cherenkov_y = fReader->getBranch<float>("REC::Cherenkov","y");
   hipo::node<float>            *REC__Cherenkov_z = fReader->getBranch<float>("REC::Cherenkov","z");
   hipo::node<float>        *REC__CovMat_C11 = fReader->getBranch<float>("REC::CovMat","C11");
   hipo::node<float>        *REC__CovMat_C12 = fReader->getBranch<float>("REC::CovMat","C12");
   hipo::node<float>        *REC__CovMat_C13 = fReader->getBranch<float>("REC::CovMat","C13");
   hipo::node<float>        *REC__CovMat_C14 = fReader->getBranch<float>("REC::CovMat","C14");
   hipo::node<float>        *REC__CovMat_C15 = fReader->getBranch<float>("REC::CovMat","C15");
   hipo::node<float>        *REC__CovMat_C22 = fReader->getBranch<float>("REC::CovMat","C22");
   hipo::node<float>        *REC__CovMat_C23 = fReader->getBranch<float>("REC::CovMat","C23");
   hipo::node<float>        *REC__CovMat_C24 = fReader->getBranch<float>("REC::CovMat","C24");
   hipo::node<float>        *REC__CovMat_C25 = fReader->getBranch<float>("REC::CovMat","C25");
   hipo::node<float>        *REC__CovMat_C33 = fReader->getBranch<float>("REC::CovMat","C33");
   hipo::node<float>        *REC__CovMat_C34 = fReader->getBranch<float>("REC::CovMat","C34");
   hipo::node<float>        *REC__CovMat_C35 = fReader->getBranch<float>("REC::CovMat","C35");
   hipo::node<float>        *REC__CovMat_C44 = fReader->getBranch<float>("REC::CovMat","C44");
   hipo::node<float>        *REC__CovMat_C45 = fReader->getBranch<float>("REC::CovMat","C45");
   hipo::node<float>        *REC__CovMat_C55 = fReader->getBranch<float>("REC::CovMat","C55");
   hipo::node<int16_t>    *REC__CovMat_index = fReader->getBranch<int16_t>("REC::CovMat","index");
   hipo::node<int16_t>   *REC__CovMat_pindex = fReader->getBranch<int16_t>("REC::CovMat","pindex");
   hipo::node<float>         *REC__Event_BCG = fReader->getBranch<float>("REC::Event","BCG");
   hipo::node<float>     *REC__Event_EVNTime = fReader->getBranch<float>("REC::Event","EVNTime");
   hipo::node<int16_t>     *REC__Event_EvCAT = fReader->getBranch<int16_t>("REC::Event","EvCAT");
   hipo::node<int8_t>      *REC__Event_Helic = fReader->getBranch<int8_t>("REC::Event","Helic");
   hipo::node<double>         *REC__Event_LT = fReader->getBranch<double>("REC::Event","LT");
   hipo::node<int32_t>    *REC__Event_NEVENT = fReader->getBranch<int32_t>("REC::Event","NEVENT");
   hipo::node<int16_t>      *REC__Event_NPGP = fReader->getBranch<int16_t>("REC::Event","NPGP");
   hipo::node<int32_t>      *REC__Event_NRUN = fReader->getBranch<int32_t>("REC::Event","NRUN");
   hipo::node<float>       *REC__Event_PTIME = fReader->getBranch<float>("REC::Event","PTIME");
   hipo::node<float>      *REC__Event_RFTime = fReader->getBranch<float>("REC::Event","RFTime");
   hipo::node<float>      *REC__Event_STTime = fReader->getBranch<float>("REC::Event","STTime");
   hipo::node<int64_t>       *REC__Event_TRG = fReader->getBranch<int64_t>("REC::Event","TRG");
   hipo::node<int8_t>       *REC__Event_TYPE = fReader->getBranch<int8_t>("REC::Event","TYPE");
   hipo::node<float>         *REC__ForwardTagger_chi2 = fReader->getBranch<float>("REC::ForwardTagger","chi2");
   hipo::node<int8_t>    *REC__ForwardTagger_detector = fReader->getBranch<int8_t>("REC::ForwardTagger","detector");
   hipo::node<float>           *REC__ForwardTagger_dx = fReader->getBranch<float>("REC::ForwardTagger","dx");
   hipo::node<float>           *REC__ForwardTagger_dy = fReader->getBranch<float>("REC::ForwardTagger","dy");
   hipo::node<float>       *REC__ForwardTagger_energy = fReader->getBranch<float>("REC::ForwardTagger","energy");
   hipo::node<int16_t>      *REC__ForwardTagger_index = fReader->getBranch<int16_t>("REC::ForwardTagger","index");
   hipo::node<float>         *REC__ForwardTagger_path = fReader->getBranch<float>("REC::ForwardTagger","path");
   hipo::node<int16_t>     *REC__ForwardTagger_pindex = fReader->getBranch<int16_t>("REC::ForwardTagger","pindex");
   hipo::node<float>       *REC__ForwardTagger_radius = fReader->getBranch<float>("REC::ForwardTagger","radius");
   hipo::node<int16_t>       *REC__ForwardTagger_size = fReader->getBranch<int16_t>("REC::ForwardTagger","size");
   hipo::node<int16_t>     *REC__ForwardTagger_status = fReader->getBranch<int16_t>("REC::ForwardTagger","status");
   hipo::node<float>         *REC__ForwardTagger_time = fReader->getBranch<float>("REC::ForwardTagger","time");
   hipo::node<float>            *REC__ForwardTagger_x = fReader->getBranch<float>("REC::ForwardTagger","x");
   hipo::node<float>            *REC__ForwardTagger_y = fReader->getBranch<float>("REC::ForwardTagger","y");
   hipo::node<float>            *REC__ForwardTagger_z = fReader->getBranch<float>("REC::ForwardTagger","z");
   hipo::node<float>        *REC__Particle_beta = fReader->getBranch<float>("REC::Particle","beta");
   hipo::node<int8_t>     *REC__Particle_charge = fReader->getBranch<int8_t>("REC::Particle","charge");
   hipo::node<float>     *REC__Particle_chi2pid = fReader->getBranch<float>("REC::Particle","chi2pid");
   hipo::node<int32_t>       *REC__Particle_pid = fReader->getBranch<int32_t>("REC::Particle","pid");
   hipo::node<float>          *REC__Particle_px = fReader->getBranch<float>("REC::Particle","px");
   hipo::node<float>          *REC__Particle_py = fReader->getBranch<float>("REC::Particle","py");
   hipo::node<float>          *REC__Particle_pz = fReader->getBranch<float>("REC::Particle","pz");
   hipo::node<int16_t>    *REC__Particle_status = fReader->getBranch<int16_t>("REC::Particle","status");
   hipo::node<float>          *REC__Particle_vx = fReader->getBranch<float>("REC::Particle","vx");
   hipo::node<float>          *REC__Particle_vy = fReader->getBranch<float>("REC::Particle","vy");
   hipo::node<float>          *REC__Particle_vz = fReader->getBranch<float>("REC::Particle","vz");

   hipo::node<float>         *REC__RICH_chi2 = fReader->getBranch<float>("REC::RICH","chi2");
   hipo::node<int8_t>    *REC__RICH_detector = fReader->getBranch<int8_t>("REC::RICH","detector");
   hipo::node<float>       *REC__RICH_energy = fReader->getBranch<float>("REC::RICH","energy");
   hipo::node<float>           *REC__RICH_hx = fReader->getBranch<float>("REC::RICH","hx");
   hipo::node<float>           *REC__RICH_hy = fReader->getBranch<float>("REC::RICH","hy");
   hipo::node<float>           *REC__RICH_hz = fReader->getBranch<float>("REC::RICH","hz");
   hipo::node<int16_t>      *REC__RICH_index = fReader->getBranch<int16_t>("REC::RICH","index");
   hipo::node<int8_t>       *REC__RICH_layer = fReader->getBranch<int8_t>("REC::RICH","layer");
   hipo::node<float>         *REC__RICH_path = fReader->getBranch<float>("REC::RICH","path");
   hipo::node<int16_t>     *REC__RICH_pindex = fReader->getBranch<int16_t>("REC::RICH","pindex");
   hipo::node<int8_t>      *REC__RICH_sector = fReader->getBranch<int8_t>("REC::RICH","sector");
   hipo::node<int16_t>     *REC__RICH_status = fReader->getBranch<int16_t>("REC::RICH","status");
   hipo::node<float>         *REC__RICH_time = fReader->getBranch<float>("REC::RICH","time");
   hipo::node<float>            *REC__RICH_x = fReader->getBranch<float>("REC::RICH","x");
   hipo::node<float>            *REC__RICH_y = fReader->getBranch<float>("REC::RICH","y");
   hipo::node<float>            *REC__RICH_z = fReader->getBranch<float>("REC::RICH","z");

   hipo::node<float>          *REC__Scintillator_chi2 = fReader->getBranch<float>("REC::Scintillator","chi2");
   hipo::node<int16_t>   *REC__Scintillator_component = fReader->getBranch<int16_t>("REC::Scintillator","component");
   hipo::node<int8_t>     *REC__Scintillator_detector = fReader->getBranch<int8_t>("REC::Scintillator","detector");
   hipo::node<float>        *REC__Scintillator_energy = fReader->getBranch<float>("REC::Scintillator","energy");
   hipo::node<float>            *REC__Scintillator_hx = fReader->getBranch<float>("REC::Scintillator","hx");
   hipo::node<float>            *REC__Scintillator_hy = fReader->getBranch<float>("REC::Scintillator","hy");
   hipo::node<float>            *REC__Scintillator_hz = fReader->getBranch<float>("REC::Scintillator","hz");
   hipo::node<int16_t>       *REC__Scintillator_index = fReader->getBranch<int16_t>("REC::Scintillator","index");
   hipo::node<int8_t>        *REC__Scintillator_layer = fReader->getBranch<int8_t>("REC::Scintillator","layer");
   hipo::node<float>          *REC__Scintillator_path = fReader->getBranch<float>("REC::Scintillator","path");
   hipo::node<int16_t>      *REC__Scintillator_pindex = fReader->getBranch<int16_t>("REC::Scintillator","pindex");
   hipo::node<int8_t>       *REC__Scintillator_sector = fReader->getBranch<int8_t>("REC::Scintillator","sector");
   hipo::node<int16_t>      *REC__Scintillator_status = fReader->getBranch<int16_t>("REC::Scintillator","status");
   hipo::node<float>          *REC__Scintillator_time = fReader->getBranch<float>("REC::Scintillator","time");
   hipo::node<float>             *REC__Scintillator_x = fReader->getBranch<float>("REC::Scintillator","x");
   hipo::node<float>             *REC__Scintillator_y = fReader->getBranch<float>("REC::Scintillator","y");
   hipo::node<float>             *REC__Scintillator_z = fReader->getBranch<float>("REC::Scintillator","z");
   hipo::node<int16_t>         *REC__Track_NDF = fReader->getBranch<int16_t>("REC::Track","NDF");
   hipo::node<int16_t>    *REC__Track_NDF_nomm = fReader->getBranch<int16_t>("REC::Track","NDF_nomm");
   hipo::node<float>          *REC__Track_chi2 = fReader->getBranch<float>("REC::Track","chi2");
   hipo::node<float>     *REC__Track_chi2_nomm = fReader->getBranch<float>("REC::Track","chi2_nomm");
   hipo::node<int8_t>     *REC__Track_detector = fReader->getBranch<int8_t>("REC::Track","detector");
   hipo::node<int16_t>       *REC__Track_index = fReader->getBranch<int16_t>("REC::Track","index");
   hipo::node<int16_t>      *REC__Track_pindex = fReader->getBranch<int16_t>("REC::Track","pindex");
   hipo::node<float>       *REC__Track_px_nomm = fReader->getBranch<float>("REC::Track","px_nomm");
   hipo::node<float>       *REC__Track_py_nomm = fReader->getBranch<float>("REC::Track","py_nomm");
   hipo::node<float>       *REC__Track_pz_nomm = fReader->getBranch<float>("REC::Track","pz_nomm");
   hipo::node<int8_t>            *REC__Track_q = fReader->getBranch<int8_t>("REC::Track","q");
   hipo::node<int8_t>       *REC__Track_sector = fReader->getBranch<int8_t>("REC::Track","sector");
   hipo::node<int16_t>      *REC__Track_status = fReader->getBranch<int16_t>("REC::Track","status");
   hipo::node<float>       *REC__Track_vx_nomm = fReader->getBranch<float>("REC::Track","vx_nomm");
   hipo::node<float>       *REC__Track_vy_nomm = fReader->getBranch<float>("REC::Track","vy_nomm");
   hipo::node<float>       *REC__Track_vz_nomm = fReader->getBranch<float>("REC::Track","vz_nomm");
   hipo::node<float>         *REC__TrackCross_c_ux = fReader->getBranch<float>("REC::TrackCross","c_ux");
   hipo::node<float>         *REC__TrackCross_c_uy = fReader->getBranch<float>("REC::TrackCross","c_uy");
   hipo::node<float>         *REC__TrackCross_c_uz = fReader->getBranch<float>("REC::TrackCross","c_uz");
   hipo::node<float>          *REC__TrackCross_c_x = fReader->getBranch<float>("REC::TrackCross","c_x");
   hipo::node<float>          *REC__TrackCross_c_y = fReader->getBranch<float>("REC::TrackCross","c_y");
   hipo::node<float>          *REC__TrackCross_c_z = fReader->getBranch<float>("REC::TrackCross","c_z");
   hipo::node<int8_t>    *REC__TrackCross_detector = fReader->getBranch<int8_t>("REC::TrackCross","detector");
   hipo::node<int16_t>      *REC__TrackCross_index = fReader->getBranch<int16_t>("REC::TrackCross","index");
   hipo::node<int8_t>       *REC__TrackCross_layer = fReader->getBranch<int8_t>("REC::TrackCross","layer");
   hipo::node<int16_t>     *REC__TrackCross_pindex = fReader->getBranch<int16_t>("REC::TrackCross","pindex");
   hipo::node<int8_t>      *REC__TrackCross_sector = fReader->getBranch<int8_t>("REC::TrackCross","sector");
   hipo::node<int16_t>     *REC__TrackCross_status = fReader->getBranch<int16_t>("REC::TrackCross","status");
   hipo::node<float>             *REC__Traj_cx = fReader->getBranch<float>("REC::Traj","cx");
   hipo::node<float>             *REC__Traj_cy = fReader->getBranch<float>("REC::Traj","cy");
   hipo::node<float>             *REC__Traj_cz = fReader->getBranch<float>("REC::Traj","cz");
   hipo::node<int16_t>        *REC__Traj_detId = fReader->getBranch<int16_t>("REC::Traj","detId");
   hipo::node<int16_t>        *REC__Traj_index = fReader->getBranch<int16_t>("REC::Traj","index");
   hipo::node<float>     *REC__Traj_pathlength = fReader->getBranch<float>("REC::Traj","pathlength");
   hipo::node<int16_t>       *REC__Traj_pindex = fReader->getBranch<int16_t>("REC::Traj","pindex");
   hipo::node<int8_t>             *REC__Traj_q = fReader->getBranch<int8_t>("REC::Traj","q");
   hipo::node<float>              *REC__Traj_x = fReader->getBranch<float>("REC::Traj","x");
   hipo::node<float>              *REC__Traj_y = fReader->getBranch<float>("REC::Traj","y");
   hipo::node<float>              *REC__Traj_z = fReader->getBranch<float>("REC::Traj","z");
   hipo::node<float>        *REC__VertDoca_cx1 = fReader->getBranch<float>("REC::VertDoca","cx1");
   hipo::node<float>        *REC__VertDoca_cx2 = fReader->getBranch<float>("REC::VertDoca","cx2");
   hipo::node<float>        *REC__VertDoca_cy1 = fReader->getBranch<float>("REC::VertDoca","cy1");
   hipo::node<float>        *REC__VertDoca_cy2 = fReader->getBranch<float>("REC::VertDoca","cy2");
   hipo::node<float>        *REC__VertDoca_cz1 = fReader->getBranch<float>("REC::VertDoca","cz1");
   hipo::node<float>        *REC__VertDoca_cz2 = fReader->getBranch<float>("REC::VertDoca","cz2");
   hipo::node<int16_t>   *REC__VertDoca_index1 = fReader->getBranch<int16_t>("REC::VertDoca","index1");
   hipo::node<int16_t>   *REC__VertDoca_index2 = fReader->getBranch<int16_t>("REC::VertDoca","index2");
   hipo::node<float>          *REC__VertDoca_r = fReader->getBranch<float>("REC::VertDoca","r");
   hipo::node<float>          *REC__VertDoca_x = fReader->getBranch<float>("REC::VertDoca","x");
   hipo::node<float>         *REC__VertDoca_x1 = fReader->getBranch<float>("REC::VertDoca","x1");
   hipo::node<float>         *REC__VertDoca_x2 = fReader->getBranch<float>("REC::VertDoca","x2");
   hipo::node<float>          *REC__VertDoca_y = fReader->getBranch<float>("REC::VertDoca","y");
   hipo::node<float>         *REC__VertDoca_y1 = fReader->getBranch<float>("REC::VertDoca","y1");
   hipo::node<float>         *REC__VertDoca_y2 = fReader->getBranch<float>("REC::VertDoca","y2");
   hipo::node<float>          *REC__VertDoca_z = fReader->getBranch<float>("REC::VertDoca","z");
   hipo::node<float>         *REC__VertDoca_z1 = fReader->getBranch<float>("REC::VertDoca","z1");
   hipo::node<float>         *REC__VertDoca_z2 = fReader->getBranch<float>("REC::VertDoca","z2");
   hipo::node<float>         *RECHB__Calorimeter_chi2 = fReader->getBranch<float>("RECHB::Calorimeter","chi2");
   hipo::node<int8_t>    *RECHB__Calorimeter_detector = fReader->getBranch<int8_t>("RECHB::Calorimeter","detector");
   hipo::node<float>           *RECHB__Calorimeter_du = fReader->getBranch<float>("RECHB::Calorimeter","du");
   hipo::node<float>           *RECHB__Calorimeter_dv = fReader->getBranch<float>("RECHB::Calorimeter","dv");
   hipo::node<float>           *RECHB__Calorimeter_dw = fReader->getBranch<float>("RECHB::Calorimeter","dw");
   hipo::node<float>       *RECHB__Calorimeter_energy = fReader->getBranch<float>("RECHB::Calorimeter","energy");
   hipo::node<float>           *RECHB__Calorimeter_hx = fReader->getBranch<float>("RECHB::Calorimeter","hx");
   hipo::node<float>           *RECHB__Calorimeter_hy = fReader->getBranch<float>("RECHB::Calorimeter","hy");
   hipo::node<float>           *RECHB__Calorimeter_hz = fReader->getBranch<float>("RECHB::Calorimeter","hz");
   hipo::node<int16_t>      *RECHB__Calorimeter_index = fReader->getBranch<int16_t>("RECHB::Calorimeter","index");
   hipo::node<int8_t>       *RECHB__Calorimeter_layer = fReader->getBranch<int8_t>("RECHB::Calorimeter","layer");
   hipo::node<float>           *RECHB__Calorimeter_lu = fReader->getBranch<float>("RECHB::Calorimeter","lu");
   hipo::node<float>           *RECHB__Calorimeter_lv = fReader->getBranch<float>("RECHB::Calorimeter","lv");
   hipo::node<float>           *RECHB__Calorimeter_lw = fReader->getBranch<float>("RECHB::Calorimeter","lw");
   hipo::node<float>          *RECHB__Calorimeter_m2u = fReader->getBranch<float>("RECHB::Calorimeter","m2u");
   hipo::node<float>          *RECHB__Calorimeter_m2v = fReader->getBranch<float>("RECHB::Calorimeter","m2v");
   hipo::node<float>          *RECHB__Calorimeter_m2w = fReader->getBranch<float>("RECHB::Calorimeter","m2w");
   hipo::node<float>          *RECHB__Calorimeter_m3u = fReader->getBranch<float>("RECHB::Calorimeter","m3u");
   hipo::node<float>          *RECHB__Calorimeter_m3v = fReader->getBranch<float>("RECHB::Calorimeter","m3v");
   hipo::node<float>          *RECHB__Calorimeter_m3w = fReader->getBranch<float>("RECHB::Calorimeter","m3w");
   hipo::node<float>         *RECHB__Calorimeter_path = fReader->getBranch<float>("RECHB::Calorimeter","path");
   hipo::node<int16_t>     *RECHB__Calorimeter_pindex = fReader->getBranch<int16_t>("RECHB::Calorimeter","pindex");
   hipo::node<int8_t>      *RECHB__Calorimeter_sector = fReader->getBranch<int8_t>("RECHB::Calorimeter","sector");
   hipo::node<int16_t>     *RECHB__Calorimeter_status = fReader->getBranch<int16_t>("RECHB::Calorimeter","status");
   hipo::node<float>         *RECHB__Calorimeter_time = fReader->getBranch<float>("RECHB::Calorimeter","time");
   hipo::node<float>            *RECHB__Calorimeter_x = fReader->getBranch<float>("RECHB::Calorimeter","x");
   hipo::node<float>            *RECHB__Calorimeter_y = fReader->getBranch<float>("RECHB::Calorimeter","y");
   hipo::node<float>            *RECHB__Calorimeter_z = fReader->getBranch<float>("RECHB::Calorimeter","z");
   hipo::node<float>         *RECHB__Cherenkov_chi2 = fReader->getBranch<float>("RECHB::Cherenkov","chi2");
   hipo::node<int8_t>    *RECHB__Cherenkov_detector = fReader->getBranch<int8_t>("RECHB::Cherenkov","detector");
   hipo::node<float>         *RECHB__Cherenkov_dphi = fReader->getBranch<float>("RECHB::Cherenkov","dphi");
   hipo::node<float>       *RECHB__Cherenkov_dtheta = fReader->getBranch<float>("RECHB::Cherenkov","dtheta");
   hipo::node<int16_t>      *RECHB__Cherenkov_index = fReader->getBranch<int16_t>("RECHB::Cherenkov","index");
   hipo::node<float>         *RECHB__Cherenkov_nphe = fReader->getBranch<float>("RECHB::Cherenkov","nphe");
   hipo::node<float>         *RECHB__Cherenkov_path = fReader->getBranch<float>("RECHB::Cherenkov","path");
   hipo::node<float>          *RECHB__Cherenkov_phi = fReader->getBranch<float>("RECHB::Cherenkov","phi");
   hipo::node<int16_t>     *RECHB__Cherenkov_pindex = fReader->getBranch<int16_t>("RECHB::Cherenkov","pindex");
   hipo::node<int8_t>      *RECHB__Cherenkov_sector = fReader->getBranch<int8_t>("RECHB::Cherenkov","sector");
   hipo::node<int16_t>     *RECHB__Cherenkov_status = fReader->getBranch<int16_t>("RECHB::Cherenkov","status");
   hipo::node<float>        *RECHB__Cherenkov_theta = fReader->getBranch<float>("RECHB::Cherenkov","theta");
   hipo::node<float>         *RECHB__Cherenkov_time = fReader->getBranch<float>("RECHB::Cherenkov","time");
   hipo::node<float>            *RECHB__Cherenkov_x = fReader->getBranch<float>("RECHB::Cherenkov","x");
   hipo::node<float>            *RECHB__Cherenkov_y = fReader->getBranch<float>("RECHB::Cherenkov","y");
   hipo::node<float>            *RECHB__Cherenkov_z = fReader->getBranch<float>("RECHB::Cherenkov","z");
   hipo::node<float>         *RECHB__Event_BCG = fReader->getBranch<float>("RECHB::Event","BCG");
   hipo::node<float>     *RECHB__Event_EVNTime = fReader->getBranch<float>("RECHB::Event","EVNTime");
   hipo::node<int16_t>     *RECHB__Event_EvCAT = fReader->getBranch<int16_t>("RECHB::Event","EvCAT");
   hipo::node<int8_t>      *RECHB__Event_Helic = fReader->getBranch<int8_t>("RECHB::Event","Helic");
   hipo::node<double>         *RECHB__Event_LT = fReader->getBranch<double>("RECHB::Event","LT");
   hipo::node<int32_t>    *RECHB__Event_NEVENT = fReader->getBranch<int32_t>("RECHB::Event","NEVENT");
   hipo::node<int16_t>      *RECHB__Event_NPGP = fReader->getBranch<int16_t>("RECHB::Event","NPGP");
   hipo::node<int32_t>      *RECHB__Event_NRUN = fReader->getBranch<int32_t>("RECHB::Event","NRUN");
   hipo::node<float>       *RECHB__Event_PTIME = fReader->getBranch<float>("RECHB::Event","PTIME");
   hipo::node<float>      *RECHB__Event_RFTime = fReader->getBranch<float>("RECHB::Event","RFTime");
   hipo::node<float>      *RECHB__Event_STTime = fReader->getBranch<float>("RECHB::Event","STTime");
   hipo::node<int64_t>       *RECHB__Event_TRG = fReader->getBranch<int64_t>("RECHB::Event","TRG");
   hipo::node<int8_t>       *RECHB__Event_TYPE = fReader->getBranch<int8_t>("RECHB::Event","TYPE");
   hipo::node<float>         *RECHB__ForwardTagger_chi2 = fReader->getBranch<float>("RECHB::ForwardTagger","chi2");
   hipo::node<int8_t>    *RECHB__ForwardTagger_detector = fReader->getBranch<int8_t>("RECHB::ForwardTagger","detector");
   hipo::node<float>           *RECHB__ForwardTagger_dx = fReader->getBranch<float>("RECHB::ForwardTagger","dx");
   hipo::node<float>           *RECHB__ForwardTagger_dy = fReader->getBranch<float>("RECHB::ForwardTagger","dy");
   hipo::node<float>       *RECHB__ForwardTagger_energy = fReader->getBranch<float>("RECHB::ForwardTagger","energy");
   hipo::node<int16_t>      *RECHB__ForwardTagger_index = fReader->getBranch<int16_t>("RECHB::ForwardTagger","index");
   hipo::node<float>         *RECHB__ForwardTagger_path = fReader->getBranch<float>("RECHB::ForwardTagger","path");
   hipo::node<int16_t>     *RECHB__ForwardTagger_pindex = fReader->getBranch<int16_t>("RECHB::ForwardTagger","pindex");
   hipo::node<float>       *RECHB__ForwardTagger_radius = fReader->getBranch<float>("RECHB::ForwardTagger","radius");
   hipo::node<int16_t>       *RECHB__ForwardTagger_size = fReader->getBranch<int16_t>("RECHB::ForwardTagger","size");
   hipo::node<int16_t>     *RECHB__ForwardTagger_status = fReader->getBranch<int16_t>("RECHB::ForwardTagger","status");
   hipo::node<float>         *RECHB__ForwardTagger_time = fReader->getBranch<float>("RECHB::ForwardTagger","time");
   hipo::node<float>            *RECHB__ForwardTagger_x = fReader->getBranch<float>("RECHB::ForwardTagger","x");
   hipo::node<float>            *RECHB__ForwardTagger_y = fReader->getBranch<float>("RECHB::ForwardTagger","y");
   hipo::node<float>            *RECHB__ForwardTagger_z = fReader->getBranch<float>("RECHB::ForwardTagger","z");
   hipo::node<float>        *RECHB__Particle_beta = fReader->getBranch<float>("RECHB::Particle","beta");
   hipo::node<int8_t>     *RECHB__Particle_charge = fReader->getBranch<int8_t>("RECHB::Particle","charge");
   hipo::node<float>     *RECHB__Particle_chi2pid = fReader->getBranch<float>("RECHB::Particle","chi2pid");
   hipo::node<int32_t>       *RECHB__Particle_pid = fReader->getBranch<int32_t>("RECHB::Particle","pid");
   hipo::node<float>          *RECHB__Particle_px = fReader->getBranch<float>("RECHB::Particle","px");
   hipo::node<float>          *RECHB__Particle_py = fReader->getBranch<float>("RECHB::Particle","py");
   hipo::node<float>          *RECHB__Particle_pz = fReader->getBranch<float>("RECHB::Particle","pz");
   hipo::node<int16_t>    *RECHB__Particle_status = fReader->getBranch<int16_t>("RECHB::Particle","status");
   hipo::node<float>          *RECHB__Particle_vx = fReader->getBranch<float>("RECHB::Particle","vx");
   hipo::node<float>          *RECHB__Particle_vy = fReader->getBranch<float>("RECHB::Particle","vy");
   hipo::node<float>          *RECHB__Particle_vz = fReader->getBranch<float>("RECHB::Particle","vz");
   hipo::node<float>          *RECHB__Scintillator_chi2 = fReader->getBranch<float>("RECHB::Scintillator","chi2");
   hipo::node<int16_t>   *RECHB__Scintillator_component = fReader->getBranch<int16_t>("RECHB::Scintillator","component");
   hipo::node<int8_t>     *RECHB__Scintillator_detector = fReader->getBranch<int8_t>("RECHB::Scintillator","detector");
   hipo::node<float>        *RECHB__Scintillator_energy = fReader->getBranch<float>("RECHB::Scintillator","energy");
   hipo::node<float>            *RECHB__Scintillator_hx = fReader->getBranch<float>("RECHB::Scintillator","hx");
   hipo::node<float>            *RECHB__Scintillator_hy = fReader->getBranch<float>("RECHB::Scintillator","hy");
   hipo::node<float>            *RECHB__Scintillator_hz = fReader->getBranch<float>("RECHB::Scintillator","hz");
   hipo::node<int16_t>       *RECHB__Scintillator_index = fReader->getBranch<int16_t>("RECHB::Scintillator","index");
   hipo::node<int8_t>        *RECHB__Scintillator_layer = fReader->getBranch<int8_t>("RECHB::Scintillator","layer");
   hipo::node<float>          *RECHB__Scintillator_path = fReader->getBranch<float>("RECHB::Scintillator","path");
   hipo::node<int16_t>      *RECHB__Scintillator_pindex = fReader->getBranch<int16_t>("RECHB::Scintillator","pindex");
   hipo::node<int8_t>       *RECHB__Scintillator_sector = fReader->getBranch<int8_t>("RECHB::Scintillator","sector");
   hipo::node<int16_t>      *RECHB__Scintillator_status = fReader->getBranch<int16_t>("RECHB::Scintillator","status");
   hipo::node<float>          *RECHB__Scintillator_time = fReader->getBranch<float>("RECHB::Scintillator","time");
   hipo::node<float>             *RECHB__Scintillator_x = fReader->getBranch<float>("RECHB::Scintillator","x");
   hipo::node<float>             *RECHB__Scintillator_y = fReader->getBranch<float>("RECHB::Scintillator","y");
   hipo::node<float>             *RECHB__Scintillator_z = fReader->getBranch<float>("RECHB::Scintillator","z");
   hipo::node<int16_t>         *RECHB__Track_NDF = fReader->getBranch<int16_t>("RECHB::Track","NDF");
   hipo::node<int16_t>    *RECHB__Track_NDF_nomm = fReader->getBranch<int16_t>("RECHB::Track","NDF_nomm");
   hipo::node<float>          *RECHB__Track_chi2 = fReader->getBranch<float>("RECHB::Track","chi2");
   hipo::node<float>     *RECHB__Track_chi2_nomm = fReader->getBranch<float>("RECHB::Track","chi2_nomm");
   hipo::node<int8_t>     *RECHB__Track_detector = fReader->getBranch<int8_t>("RECHB::Track","detector");
   hipo::node<int16_t>       *RECHB__Track_index = fReader->getBranch<int16_t>("RECHB::Track","index");
   hipo::node<int16_t>      *RECHB__Track_pindex = fReader->getBranch<int16_t>("RECHB::Track","pindex");
   hipo::node<float>       *RECHB__Track_px_nomm = fReader->getBranch<float>("RECHB::Track","px_nomm");
   hipo::node<float>       *RECHB__Track_py_nomm = fReader->getBranch<float>("RECHB::Track","py_nomm");
   hipo::node<float>       *RECHB__Track_pz_nomm = fReader->getBranch<float>("RECHB::Track","pz_nomm");
   hipo::node<int8_t>            *RECHB__Track_q = fReader->getBranch<int8_t>("RECHB::Track","q");
   hipo::node<int8_t>       *RECHB__Track_sector = fReader->getBranch<int8_t>("RECHB::Track","sector");
   hipo::node<int16_t>      *RECHB__Track_status = fReader->getBranch<int16_t>("RECHB::Track","status");
   hipo::node<float>       *RECHB__Track_vx_nomm = fReader->getBranch<float>("RECHB::Track","vx_nomm");
   hipo::node<float>       *RECHB__Track_vy_nomm = fReader->getBranch<float>("RECHB::Track","vy_nomm");
   hipo::node<float>       *RECHB__Track_vz_nomm = fReader->getBranch<float>("RECHB::Track","vz_nomm");
   hipo::node<float>         *RECHB__TrackCross_c_ux = fReader->getBranch<float>("RECHB::TrackCross","c_ux");
   hipo::node<float>         *RECHB__TrackCross_c_uy = fReader->getBranch<float>("RECHB::TrackCross","c_uy");
   hipo::node<float>         *RECHB__TrackCross_c_uz = fReader->getBranch<float>("RECHB::TrackCross","c_uz");
   hipo::node<float>          *RECHB__TrackCross_c_x = fReader->getBranch<float>("RECHB::TrackCross","c_x");
   hipo::node<float>          *RECHB__TrackCross_c_y = fReader->getBranch<float>("RECHB::TrackCross","c_y");
   hipo::node<float>          *RECHB__TrackCross_c_z = fReader->getBranch<float>("RECHB::TrackCross","c_z");
   hipo::node<int8_t>    *RECHB__TrackCross_detector = fReader->getBranch<int8_t>("RECHB::TrackCross","detector");
   hipo::node<int16_t>      *RECHB__TrackCross_index = fReader->getBranch<int16_t>("RECHB::TrackCross","index");
   hipo::node<int8_t>       *RECHB__TrackCross_layer = fReader->getBranch<int8_t>("RECHB::TrackCross","layer");
   hipo::node<int16_t>     *RECHB__TrackCross_pindex = fReader->getBranch<int16_t>("RECHB::TrackCross","pindex");
   hipo::node<int8_t>      *RECHB__TrackCross_sector = fReader->getBranch<int8_t>("RECHB::TrackCross","sector");
   hipo::node<int16_t>     *RECHB__TrackCross_status = fReader->getBranch<int16_t>("RECHB::TrackCross","status");
   hipo::node<int32_t>         *RF__adc_ADC = fReader->getBranch<int32_t>("RF::adc","ADC");
   hipo::node<int16_t>   *RF__adc_component = fReader->getBranch<int16_t>("RF::adc","component");
   hipo::node<int8_t>        *RF__adc_layer = fReader->getBranch<int8_t>("RF::adc","layer");
   hipo::node<int8_t>        *RF__adc_order = fReader->getBranch<int8_t>("RF::adc","order");
   hipo::node<int16_t>         *RF__adc_ped = fReader->getBranch<int16_t>("RF::adc","ped");
   hipo::node<int8_t>       *RF__adc_sector = fReader->getBranch<int8_t>("RF::adc","sector");
   hipo::node<float>          *RF__adc_time = fReader->getBranch<float>("RF::adc","time");
   hipo::node<int32_t>         *RF__tdc_TDC = fReader->getBranch<int32_t>("RF::tdc","TDC");
   hipo::node<int16_t>   *RF__tdc_component = fReader->getBranch<int16_t>("RF::tdc","component");
   hipo::node<int8_t>        *RF__tdc_layer = fReader->getBranch<int8_t>("RF::tdc","layer");
   hipo::node<int8_t>        *RF__tdc_order = fReader->getBranch<int8_t>("RF::tdc","order");
   hipo::node<int8_t>       *RF__tdc_sector = fReader->getBranch<int8_t>("RF::tdc","sector");


   hipo::node<int32_t>         *RICH__adc_ADC = fReader->getBranch<int32_t>("RICH::adc","ADC");
   hipo::node<int16_t>   *RICH__adc_component = fReader->getBranch<int16_t>("RICH::adc","component");
   hipo::node<int8_t>        *RICH__adc_layer = fReader->getBranch<int8_t>("RICH::adc","layer");
   hipo::node<int8_t>        *RICH__adc_order = fReader->getBranch<int8_t>("RICH::adc","order");
   hipo::node<int16_t>         *RICH__adc_ped = fReader->getBranch<int16_t>("RICH::adc","ped");
   hipo::node<int8_t>       *RICH__adc_sector = fReader->getBranch<int8_t>("RICH::adc","sector");
   hipo::node<float>          *RICH__adc_time = fReader->getBranch<float>("RICH::adc","time");
   hipo::node<float>     *RICH__clusters_charge = fReader->getBranch<float>("RICH::clusters","charge");
   hipo::node<int16_t>       *RICH__clusters_id = fReader->getBranch<int16_t>("RICH::clusters","id");
   hipo::node<int16_t>      *RICH__clusters_pmt = fReader->getBranch<int16_t>("RICH::clusters","pmt");
   hipo::node<int16_t>   *RICH__clusters_sector = fReader->getBranch<int16_t>("RICH::clusters","sector");
   hipo::node<int16_t>     *RICH__clusters_size = fReader->getBranch<int16_t>("RICH::clusters","size");
   hipo::node<int16_t>     *RICH__clusters_tile = fReader->getBranch<int16_t>("RICH::clusters","tile");
   hipo::node<float>       *RICH__clusters_time = fReader->getBranch<float>("RICH::clusters","time");
   hipo::node<float>      *RICH__clusters_wtime = fReader->getBranch<float>("RICH::clusters","wtime");
   hipo::node<float>         *RICH__clusters_wx = fReader->getBranch<float>("RICH::clusters","wx");
   hipo::node<float>         *RICH__clusters_wy = fReader->getBranch<float>("RICH::clusters","wy");
   hipo::node<float>         *RICH__clusters_wz = fReader->getBranch<float>("RICH::clusters","wz");
   hipo::node<float>          *RICH__clusters_x = fReader->getBranch<float>("RICH::clusters","x");
   hipo::node<float>          *RICH__clusters_y = fReader->getBranch<float>("RICH::clusters","y");
   hipo::node<float>          *RICH__clusters_z = fReader->getBranch<float>("RICH::clusters","z");

   hipo::node<float>           *RICH__hadrons_EtaC_ele = fReader->getBranch<float>("RICH::hadrons","EtaC_ele");
   hipo::node<float>             *RICH__hadrons_EtaC_k = fReader->getBranch<float>("RICH::hadrons","EtaC_k");
   hipo::node<float>           *RICH__hadrons_EtaC_max = fReader->getBranch<float>("RICH::hadrons","EtaC_max");
   hipo::node<float>           *RICH__hadrons_EtaC_min = fReader->getBranch<float>("RICH::hadrons","EtaC_min");
   hipo::node<float>            *RICH__hadrons_EtaC_pi = fReader->getBranch<float>("RICH::hadrons","EtaC_pi");
   hipo::node<float>            *RICH__hadrons_EtaC_pr = fReader->getBranch<float>("RICH::hadrons","EtaC_pr");
   hipo::node<int16_t>        *RICH__hadrons_hit_index = fReader->getBranch<int16_t>("RICH::hadrons","hit_index");
   hipo::node<int16_t>               *RICH__hadrons_id = fReader->getBranch<int16_t>("RICH::hadrons","id");
   hipo::node<int16_t>   *RICH__hadrons_particle_index = fReader->getBranch<int16_t>("RICH::hadrons","particle_index");
   hipo::node<float>        *RICH__hadrons_traced_emix = fReader->getBranch<float>("RICH::hadrons","traced_emix");
   hipo::node<float>        *RICH__hadrons_traced_emiy = fReader->getBranch<float>("RICH::hadrons","traced_emiy");
   hipo::node<float>        *RICH__hadrons_traced_emiz = fReader->getBranch<float>("RICH::hadrons","traced_emiz");
   hipo::node<float>        *RICH__hadrons_traced_hitx = fReader->getBranch<float>("RICH::hadrons","traced_hitx");
   hipo::node<float>        *RICH__hadrons_traced_hity = fReader->getBranch<float>("RICH::hadrons","traced_hity");
   hipo::node<float>        *RICH__hadrons_traced_hitz = fReader->getBranch<float>("RICH::hadrons","traced_hitz");
   hipo::node<float>        *RICH__hadrons_traced_path = fReader->getBranch<float>("RICH::hadrons","traced_path");
   hipo::node<float>         *RICH__hadrons_traced_phi = fReader->getBranch<float>("RICH::hadrons","traced_phi");
   hipo::node<float>         *RICH__hadrons_traced_the = fReader->getBranch<float>("RICH::hadrons","traced_the");
   hipo::node<float>        *RICH__hadrons_traced_time = fReader->getBranch<float>("RICH::hadrons","traced_time");

   hipo::node<int16_t>      *RICH__hits_anode = fReader->getBranch<int16_t>("RICH::hits","anode");
   hipo::node<int16_t>    *RICH__hits_cluster = fReader->getBranch<int16_t>("RICH::hits","cluster");
   hipo::node<int16_t>   *RICH__hits_duration = fReader->getBranch<int16_t>("RICH::hits","duration");
   hipo::node<int16_t>        *RICH__hits_glx = fReader->getBranch<int16_t>("RICH::hits","glx");
   hipo::node<int16_t>        *RICH__hits_gly = fReader->getBranch<int16_t>("RICH::hits","gly");
   hipo::node<int16_t>         *RICH__hits_id = fReader->getBranch<int16_t>("RICH::hits","id");
   hipo::node<int16_t>        *RICH__hits_idx = fReader->getBranch<int16_t>("RICH::hits","idx");
   hipo::node<int16_t>        *RICH__hits_idy = fReader->getBranch<int16_t>("RICH::hits","idy");
   hipo::node<int16_t>        *RICH__hits_pmt = fReader->getBranch<int16_t>("RICH::hits","pmt");
   hipo::node<int16_t>     *RICH__hits_sector = fReader->getBranch<int16_t>("RICH::hits","sector");
   hipo::node<int16_t>       *RICH__hits_tile = fReader->getBranch<int16_t>("RICH::hits","tile");
   hipo::node<int16_t>       *RICH__hits_time = fReader->getBranch<int16_t>("RICH::hits","time");
   hipo::node<int16_t>      *RICH__hits_xtalk = fReader->getBranch<int16_t>("RICH::hits","xtalk");

   hipo::node<float>      *RICH__newclusters_charge = fReader->getBranch<float>("RICH::newclusters","charge");
   hipo::node<int16_t>        *RICH__newclusters_id = fReader->getBranch<int16_t>("RICH::newclusters","id");
   hipo::node<int16_t>       *RICH__newclusters_pmt = fReader->getBranch<int16_t>("RICH::newclusters","pmt");
   hipo::node<float>     *RICH__newclusters_rawtime = fReader->getBranch<float>("RICH::newclusters","rawtime");
   hipo::node<int16_t>    *RICH__newclusters_sector = fReader->getBranch<int16_t>("RICH::newclusters","sector");
   hipo::node<int16_t>      *RICH__newclusters_size = fReader->getBranch<int16_t>("RICH::newclusters","size");
   hipo::node<int16_t>      *RICH__newclusters_tile = fReader->getBranch<int16_t>("RICH::newclusters","tile");
   hipo::node<float>        *RICH__newclusters_time = fReader->getBranch<float>("RICH::newclusters","time");
   hipo::node<float>       *RICH__newclusters_wtime = fReader->getBranch<float>("RICH::newclusters","wtime");
   hipo::node<float>          *RICH__newclusters_wx = fReader->getBranch<float>("RICH::newclusters","wx");
   hipo::node<float>          *RICH__newclusters_wy = fReader->getBranch<float>("RICH::newclusters","wy");
   hipo::node<float>          *RICH__newclusters_wz = fReader->getBranch<float>("RICH::newclusters","wz");
   hipo::node<float>           *RICH__newclusters_x = fReader->getBranch<float>("RICH::newclusters","x");
   hipo::node<float>           *RICH__newclusters_y = fReader->getBranch<float>("RICH::newclusters","y");
   hipo::node<float>           *RICH__newclusters_z = fReader->getBranch<float>("RICH::newclusters","z");
   hipo::node<int16_t>      *RICH__newhits_anode = fReader->getBranch<int16_t>("RICH::newhits","anode");
   hipo::node<int16_t>    *RICH__newhits_cluster = fReader->getBranch<int16_t>("RICH::newhits","cluster");
   hipo::node<int16_t>   *RICH__newhits_duration = fReader->getBranch<int16_t>("RICH::newhits","duration");
   hipo::node<int16_t>        *RICH__newhits_glx = fReader->getBranch<int16_t>("RICH::newhits","glx");
   hipo::node<int16_t>        *RICH__newhits_gly = fReader->getBranch<int16_t>("RICH::newhits","gly");
   hipo::node<int16_t>         *RICH__newhits_id = fReader->getBranch<int16_t>("RICH::newhits","id");
   hipo::node<int16_t>        *RICH__newhits_idx = fReader->getBranch<int16_t>("RICH::newhits","idx");
   hipo::node<int16_t>        *RICH__newhits_idy = fReader->getBranch<int16_t>("RICH::newhits","idy");
   hipo::node<int16_t>        *RICH__newhits_pmt = fReader->getBranch<int16_t>("RICH::newhits","pmt");
   hipo::node<float>      *RICH__newhits_rawtime = fReader->getBranch<float>("RICH::newhits","rawtime");
   hipo::node<int16_t>     *RICH__newhits_sector = fReader->getBranch<int16_t>("RICH::newhits","sector");
   hipo::node<int16_t>       *RICH__newhits_tile = fReader->getBranch<int16_t>("RICH::newhits","tile");
   hipo::node<float>         *RICH__newhits_time = fReader->getBranch<float>("RICH::newhits","time");
   hipo::node<float>            *RICH__newhits_x = fReader->getBranch<float>("RICH::newhits","x");
   hipo::node<int16_t>      *RICH__newhits_xtalk = fReader->getBranch<int16_t>("RICH::newhits","xtalk");
   hipo::node<float>            *RICH__newhits_y = fReader->getBranch<float>("RICH::newhits","y");
   hipo::node<float>            *RICH__newhits_z = fReader->getBranch<float>("RICH::newhits","z");
   hipo::node<float>      *RICH__photons_analytic_EtaC = fReader->getBranch<float>("RICH::photons","analytic_EtaC");
   hipo::node<float>     *RICH__photons_analytic_aeron = fReader->getBranch<float>("RICH::photons","analytic_aeron");
   hipo::node<float>      *RICH__photons_analytic_bgpr = fReader->getBranch<float>("RICH::photons","analytic_bgpr");
   hipo::node<float>      *RICH__photons_analytic_elpr = fReader->getBranch<float>("RICH::photons","analytic_elpr");
   hipo::node<float>       *RICH__photons_analytic_kpr = fReader->getBranch<float>("RICH::photons","analytic_kpr");
   hipo::node<int16_t>    *RICH__photons_analytic_nrfl = fReader->getBranch<int16_t>("RICH::photons","analytic_nrfl");
   hipo::node<int16_t>    *RICH__photons_analytic_nrfr = fReader->getBranch<int16_t>("RICH::photons","analytic_nrfr");
   hipo::node<float>      *RICH__photons_analytic_path = fReader->getBranch<float>("RICH::photons","analytic_path");
   hipo::node<float>       *RICH__photons_analytic_phi = fReader->getBranch<float>("RICH::photons","analytic_phi");
   hipo::node<float>      *RICH__photons_analytic_pipr = fReader->getBranch<float>("RICH::photons","analytic_pipr");
   hipo::node<float>      *RICH__photons_analytic_prpr = fReader->getBranch<float>("RICH::photons","analytic_prpr");
   hipo::node<float>       *RICH__photons_analytic_the = fReader->getBranch<float>("RICH::photons","analytic_the");
   hipo::node<float>      *RICH__photons_analytic_time = fReader->getBranch<float>("RICH::photons","analytic_time");
   hipo::node<int16_t>     *RICH__photons_hadron_index = fReader->getBranch<int16_t>("RICH::photons","hadron_index");
   hipo::node<int16_t>        *RICH__photons_hit_index = fReader->getBranch<int16_t>("RICH::photons","hit_index");
   hipo::node<int16_t>               *RICH__photons_id = fReader->getBranch<int16_t>("RICH::photons","id");
   hipo::node<float>         *RICH__photons_start_time = fReader->getBranch<float>("RICH::photons","start_time");
   hipo::node<float>        *RICH__photons_traced_EtaC = fReader->getBranch<float>("RICH::photons","traced_EtaC");
   hipo::node<float>       *RICH__photons_traced_aeron = fReader->getBranch<float>("RICH::photons","traced_aeron");
   hipo::node<float>        *RICH__photons_traced_bgpr = fReader->getBranch<float>("RICH::photons","traced_bgpr");
   hipo::node<float>        *RICH__photons_traced_elpr = fReader->getBranch<float>("RICH::photons","traced_elpr");
   hipo::node<float>        *RICH__photons_traced_hitx = fReader->getBranch<float>("RICH::photons","traced_hitx");
   hipo::node<float>        *RICH__photons_traced_hity = fReader->getBranch<float>("RICH::photons","traced_hity");
   hipo::node<float>        *RICH__photons_traced_hitz = fReader->getBranch<float>("RICH::photons","traced_hitz");
   hipo::node<float>         *RICH__photons_traced_kpr = fReader->getBranch<float>("RICH::photons","traced_kpr");
   hipo::node<int16_t>      *RICH__photons_traced_nrfl = fReader->getBranch<int16_t>("RICH::photons","traced_nrfl");
   hipo::node<int16_t>      *RICH__photons_traced_nrfr = fReader->getBranch<int16_t>("RICH::photons","traced_nrfr");
   hipo::node<float>        *RICH__photons_traced_path = fReader->getBranch<float>("RICH::photons","traced_path");
   hipo::node<float>         *RICH__photons_traced_phi = fReader->getBranch<float>("RICH::photons","traced_phi");
   hipo::node<float>        *RICH__photons_traced_pipr = fReader->getBranch<float>("RICH::photons","traced_pipr");
   hipo::node<float>        *RICH__photons_traced_prpr = fReader->getBranch<float>("RICH::photons","traced_prpr");
   hipo::node<float>         *RICH__photons_traced_the = fReader->getBranch<float>("RICH::photons","traced_the");
   hipo::node<float>        *RICH__photons_traced_time = fReader->getBranch<float>("RICH::photons","traced_time");
   hipo::node<int16_t>             *RICH__photons_type = fReader->getBranch<int16_t>("RICH::photons","type");


   hipo::node<int32_t>         *RICH__tdc_TDC = fReader->getBranch<int32_t>("RICH::tdc","TDC");
   hipo::node<int16_t>   *RICH__tdc_component = fReader->getBranch<int16_t>("RICH::tdc","component");
   hipo::node<int8_t>        *RICH__tdc_layer = fReader->getBranch<int8_t>("RICH::tdc","layer");
   hipo::node<int8_t>        *RICH__tdc_order = fReader->getBranch<int8_t>("RICH::tdc","order");
   hipo::node<int8_t>       *RICH__tdc_sector = fReader->getBranch<int8_t>("RICH::tdc","sector");
   hipo::node<int32_t>         *RTPC__adc_ADC = fReader->getBranch<int32_t>("RTPC::adc","ADC");
   hipo::node<int16_t>   *RTPC__adc_component = fReader->getBranch<int16_t>("RTPC::adc","component");
   hipo::node<int8_t>        *RTPC__adc_layer = fReader->getBranch<int8_t>("RTPC::adc","layer");
   hipo::node<int8_t>        *RTPC__adc_order = fReader->getBranch<int8_t>("RTPC::adc","order");
   hipo::node<int16_t>         *RTPC__adc_ped = fReader->getBranch<int16_t>("RTPC::adc","ped");
   hipo::node<int8_t>       *RTPC__adc_sector = fReader->getBranch<int8_t>("RTPC::adc","sector");
   hipo::node<float>          *RTPC__adc_time = fReader->getBranch<float>("RTPC::adc","time");
   hipo::node<float>     *RTPC__pos_energy = fReader->getBranch<float>("RTPC::pos","energy");
   hipo::node<float>        *RTPC__pos_phi = fReader->getBranch<float>("RTPC::pos","phi");
   hipo::node<float>       *RTPC__pos_posx = fReader->getBranch<float>("RTPC::pos","posx");
   hipo::node<float>       *RTPC__pos_posy = fReader->getBranch<float>("RTPC::pos","posy");
   hipo::node<float>       *RTPC__pos_posz = fReader->getBranch<float>("RTPC::pos","posz");
   hipo::node<int32_t>     *RTPC__pos_step = fReader->getBranch<int32_t>("RTPC::pos","step");
   hipo::node<float>       *RTPC__pos_time = fReader->getBranch<float>("RTPC::pos","time");
   hipo::node<int32_t>       *RUN__config_event = fReader->getBranch<int32_t>("RUN::config","event");
   hipo::node<int8_t>         *RUN__config_mode = fReader->getBranch<int8_t>("RUN::config","mode");
   hipo::node<int32_t>         *RUN__config_run = fReader->getBranch<int32_t>("RUN::config","run");
   hipo::node<float>      *RUN__config_solenoid = fReader->getBranch<float>("RUN::config","solenoid");
   hipo::node<int64_t>   *RUN__config_timestamp = fReader->getBranch<int64_t>("RUN::config","timestamp");
   hipo::node<float>         *RUN__config_torus = fReader->getBranch<float>("RUN::config","torus");
   hipo::node<int64_t>     *RUN__config_trigger = fReader->getBranch<int64_t>("RUN::config","trigger");
   hipo::node<int8_t>         *RUN__config_type = fReader->getBranch<int8_t>("RUN::config","type");
   hipo::node<int32_t>    *RUN__config_unixtime = fReader->getBranch<int32_t>("RUN::config","unixtime");
   hipo::node<int16_t>     *RUN__rf_id = fReader->getBranch<int16_t>("RUN::rf","id");
   hipo::node<float>     *RUN__rf_time = fReader->getBranch<float>("RUN::rf","time");
   hipo::node<int32_t>        *RUN__trigger_id = fReader->getBranch<int32_t>("RUN::trigger","id");
   hipo::node<int32_t>   *RUN__trigger_trigger = fReader->getBranch<int32_t>("RUN::trigger","trigger");
   hipo::node<int16_t>      *TAGGER__tgpb_eid = fReader->getBranch<int16_t>("TAGGER::tgpb","eid");
   hipo::node<float>     *TAGGER__tgpb_energy = fReader->getBranch<float>("TAGGER::tgpb","energy");
   hipo::node<int8_t>    *TAGGER__tgpb_status = fReader->getBranch<int8_t>("TAGGER::tgpb","status");
   hipo::node<int16_t>      *TAGGER__tgpb_tid = fReader->getBranch<int16_t>("TAGGER::tgpb","tid");
   hipo::node<float>       *TAGGER__tgpb_time = fReader->getBranch<float>("TAGGER::tgpb","time");
   hipo::node<int16_t>       *TimeBasedTrkg__TBClusters_Hit10_ID = fReader->getBranch<int16_t>("TimeBasedTrkg::TBClusters","Hit10_ID");
   hipo::node<int16_t>       *TimeBasedTrkg__TBClusters_Hit11_ID = fReader->getBranch<int16_t>("TimeBasedTrkg::TBClusters","Hit11_ID");
   hipo::node<int16_t>       *TimeBasedTrkg__TBClusters_Hit12_ID = fReader->getBranch<int16_t>("TimeBasedTrkg::TBClusters","Hit12_ID");
   hipo::node<int16_t>        *TimeBasedTrkg__TBClusters_Hit1_ID = fReader->getBranch<int16_t>("TimeBasedTrkg::TBClusters","Hit1_ID");
   hipo::node<int16_t>        *TimeBasedTrkg__TBClusters_Hit2_ID = fReader->getBranch<int16_t>("TimeBasedTrkg::TBClusters","Hit2_ID");
   hipo::node<int16_t>        *TimeBasedTrkg__TBClusters_Hit3_ID = fReader->getBranch<int16_t>("TimeBasedTrkg::TBClusters","Hit3_ID");
   hipo::node<int16_t>        *TimeBasedTrkg__TBClusters_Hit4_ID = fReader->getBranch<int16_t>("TimeBasedTrkg::TBClusters","Hit4_ID");
   hipo::node<int16_t>        *TimeBasedTrkg__TBClusters_Hit5_ID = fReader->getBranch<int16_t>("TimeBasedTrkg::TBClusters","Hit5_ID");
   hipo::node<int16_t>        *TimeBasedTrkg__TBClusters_Hit6_ID = fReader->getBranch<int16_t>("TimeBasedTrkg::TBClusters","Hit6_ID");
   hipo::node<int16_t>        *TimeBasedTrkg__TBClusters_Hit7_ID = fReader->getBranch<int16_t>("TimeBasedTrkg::TBClusters","Hit7_ID");
   hipo::node<int16_t>        *TimeBasedTrkg__TBClusters_Hit8_ID = fReader->getBranch<int16_t>("TimeBasedTrkg::TBClusters","Hit8_ID");
   hipo::node<int16_t>        *TimeBasedTrkg__TBClusters_Hit9_ID = fReader->getBranch<int16_t>("TimeBasedTrkg::TBClusters","Hit9_ID");
   hipo::node<float>          *TimeBasedTrkg__TBClusters_avgWire = fReader->getBranch<float>("TimeBasedTrkg::TBClusters","avgWire");
   hipo::node<float>     *TimeBasedTrkg__TBClusters_fitChisqProb = fReader->getBranch<float>("TimeBasedTrkg::TBClusters","fitChisqProb");
   hipo::node<float>        *TimeBasedTrkg__TBClusters_fitInterc = fReader->getBranch<float>("TimeBasedTrkg::TBClusters","fitInterc");
   hipo::node<float>     *TimeBasedTrkg__TBClusters_fitIntercErr = fReader->getBranch<float>("TimeBasedTrkg::TBClusters","fitIntercErr");
   hipo::node<float>         *TimeBasedTrkg__TBClusters_fitSlope = fReader->getBranch<float>("TimeBasedTrkg::TBClusters","fitSlope");
   hipo::node<float>      *TimeBasedTrkg__TBClusters_fitSlopeErr = fReader->getBranch<float>("TimeBasedTrkg::TBClusters","fitSlopeErr");
   hipo::node<int16_t>             *TimeBasedTrkg__TBClusters_id = fReader->getBranch<int16_t>("TimeBasedTrkg::TBClusters","id");
   hipo::node<int8_t>          *TimeBasedTrkg__TBClusters_sector = fReader->getBranch<int8_t>("TimeBasedTrkg::TBClusters","sector");
   hipo::node<int8_t>            *TimeBasedTrkg__TBClusters_size = fReader->getBranch<int8_t>("TimeBasedTrkg::TBClusters","size");
   hipo::node<int16_t>         *TimeBasedTrkg__TBClusters_status = fReader->getBranch<int16_t>("TimeBasedTrkg::TBClusters","status");
   hipo::node<int8_t>      *TimeBasedTrkg__TBClusters_superlayer = fReader->getBranch<int8_t>("TimeBasedTrkg::TBClusters","superlayer");
   hipo::node<float>     *TimeBasedTrkg__TBCovMat_C11 = fReader->getBranch<float>("TimeBasedTrkg::TBCovMat","C11");
   hipo::node<float>     *TimeBasedTrkg__TBCovMat_C12 = fReader->getBranch<float>("TimeBasedTrkg::TBCovMat","C12");
   hipo::node<float>     *TimeBasedTrkg__TBCovMat_C13 = fReader->getBranch<float>("TimeBasedTrkg::TBCovMat","C13");
   hipo::node<float>     *TimeBasedTrkg__TBCovMat_C14 = fReader->getBranch<float>("TimeBasedTrkg::TBCovMat","C14");
   hipo::node<float>     *TimeBasedTrkg__TBCovMat_C15 = fReader->getBranch<float>("TimeBasedTrkg::TBCovMat","C15");
   hipo::node<float>     *TimeBasedTrkg__TBCovMat_C21 = fReader->getBranch<float>("TimeBasedTrkg::TBCovMat","C21");
   hipo::node<float>     *TimeBasedTrkg__TBCovMat_C22 = fReader->getBranch<float>("TimeBasedTrkg::TBCovMat","C22");
   hipo::node<float>     *TimeBasedTrkg__TBCovMat_C23 = fReader->getBranch<float>("TimeBasedTrkg::TBCovMat","C23");
   hipo::node<float>     *TimeBasedTrkg__TBCovMat_C24 = fReader->getBranch<float>("TimeBasedTrkg::TBCovMat","C24");
   hipo::node<float>     *TimeBasedTrkg__TBCovMat_C25 = fReader->getBranch<float>("TimeBasedTrkg::TBCovMat","C25");
   hipo::node<float>     *TimeBasedTrkg__TBCovMat_C31 = fReader->getBranch<float>("TimeBasedTrkg::TBCovMat","C31");
   hipo::node<float>     *TimeBasedTrkg__TBCovMat_C32 = fReader->getBranch<float>("TimeBasedTrkg::TBCovMat","C32");
   hipo::node<float>     *TimeBasedTrkg__TBCovMat_C33 = fReader->getBranch<float>("TimeBasedTrkg::TBCovMat","C33");
   hipo::node<float>     *TimeBasedTrkg__TBCovMat_C34 = fReader->getBranch<float>("TimeBasedTrkg::TBCovMat","C34");
   hipo::node<float>     *TimeBasedTrkg__TBCovMat_C35 = fReader->getBranch<float>("TimeBasedTrkg::TBCovMat","C35");
   hipo::node<float>     *TimeBasedTrkg__TBCovMat_C41 = fReader->getBranch<float>("TimeBasedTrkg::TBCovMat","C41");
   hipo::node<float>     *TimeBasedTrkg__TBCovMat_C42 = fReader->getBranch<float>("TimeBasedTrkg::TBCovMat","C42");
   hipo::node<float>     *TimeBasedTrkg__TBCovMat_C43 = fReader->getBranch<float>("TimeBasedTrkg::TBCovMat","C43");
   hipo::node<float>     *TimeBasedTrkg__TBCovMat_C44 = fReader->getBranch<float>("TimeBasedTrkg::TBCovMat","C44");
   hipo::node<float>     *TimeBasedTrkg__TBCovMat_C45 = fReader->getBranch<float>("TimeBasedTrkg::TBCovMat","C45");
   hipo::node<float>     *TimeBasedTrkg__TBCovMat_C51 = fReader->getBranch<float>("TimeBasedTrkg::TBCovMat","C51");
   hipo::node<float>     *TimeBasedTrkg__TBCovMat_C52 = fReader->getBranch<float>("TimeBasedTrkg::TBCovMat","C52");
   hipo::node<float>     *TimeBasedTrkg__TBCovMat_C53 = fReader->getBranch<float>("TimeBasedTrkg::TBCovMat","C53");
   hipo::node<float>     *TimeBasedTrkg__TBCovMat_C54 = fReader->getBranch<float>("TimeBasedTrkg::TBCovMat","C54");
   hipo::node<float>     *TimeBasedTrkg__TBCovMat_C55 = fReader->getBranch<float>("TimeBasedTrkg::TBCovMat","C55");
   hipo::node<int16_t>    *TimeBasedTrkg__TBCovMat_id = fReader->getBranch<int16_t>("TimeBasedTrkg::TBCovMat","id");
   hipo::node<int16_t>   *TimeBasedTrkg__TBCrosses_Segment1_ID = fReader->getBranch<int16_t>("TimeBasedTrkg::TBCrosses","Segment1_ID");
   hipo::node<int16_t>   *TimeBasedTrkg__TBCrosses_Segment2_ID = fReader->getBranch<int16_t>("TimeBasedTrkg::TBCrosses","Segment2_ID");
   hipo::node<float>          *TimeBasedTrkg__TBCrosses_err_ux = fReader->getBranch<float>("TimeBasedTrkg::TBCrosses","err_ux");
   hipo::node<float>          *TimeBasedTrkg__TBCrosses_err_uy = fReader->getBranch<float>("TimeBasedTrkg::TBCrosses","err_uy");
   hipo::node<float>          *TimeBasedTrkg__TBCrosses_err_uz = fReader->getBranch<float>("TimeBasedTrkg::TBCrosses","err_uz");
   hipo::node<float>           *TimeBasedTrkg__TBCrosses_err_x = fReader->getBranch<float>("TimeBasedTrkg::TBCrosses","err_x");
   hipo::node<float>           *TimeBasedTrkg__TBCrosses_err_y = fReader->getBranch<float>("TimeBasedTrkg::TBCrosses","err_y");
   hipo::node<float>           *TimeBasedTrkg__TBCrosses_err_z = fReader->getBranch<float>("TimeBasedTrkg::TBCrosses","err_z");
   hipo::node<int16_t>            *TimeBasedTrkg__TBCrosses_id = fReader->getBranch<int16_t>("TimeBasedTrkg::TBCrosses","id");
   hipo::node<int8_t>         *TimeBasedTrkg__TBCrosses_region = fReader->getBranch<int8_t>("TimeBasedTrkg::TBCrosses","region");
   hipo::node<int8_t>         *TimeBasedTrkg__TBCrosses_sector = fReader->getBranch<int8_t>("TimeBasedTrkg::TBCrosses","sector");
   hipo::node<int16_t>        *TimeBasedTrkg__TBCrosses_status = fReader->getBranch<int16_t>("TimeBasedTrkg::TBCrosses","status");
   hipo::node<float>              *TimeBasedTrkg__TBCrosses_ux = fReader->getBranch<float>("TimeBasedTrkg::TBCrosses","ux");
   hipo::node<float>              *TimeBasedTrkg__TBCrosses_uy = fReader->getBranch<float>("TimeBasedTrkg::TBCrosses","uy");
   hipo::node<float>              *TimeBasedTrkg__TBCrosses_uz = fReader->getBranch<float>("TimeBasedTrkg::TBCrosses","uz");
   hipo::node<float>               *TimeBasedTrkg__TBCrosses_x = fReader->getBranch<float>("TimeBasedTrkg::TBCrosses","x");
   hipo::node<float>               *TimeBasedTrkg__TBCrosses_y = fReader->getBranch<float>("TimeBasedTrkg::TBCrosses","y");
   hipo::node<float>               *TimeBasedTrkg__TBCrosses_z = fReader->getBranch<float>("TimeBasedTrkg::TBCrosses","z");
   hipo::node<float>                *TimeBasedTrkg__TBHits_B = fReader->getBranch<float>("TimeBasedTrkg::TBHits","B");
   hipo::node<int8_t>              *TimeBasedTrkg__TBHits_LR = fReader->getBranch<int8_t>("TimeBasedTrkg::TBHits","LR");
   hipo::node<float>               *TimeBasedTrkg__TBHits_T0 = fReader->getBranch<float>("TimeBasedTrkg::TBHits","T0");
   hipo::node<int32_t>            *TimeBasedTrkg__TBHits_TDC = fReader->getBranch<int32_t>("TimeBasedTrkg::TBHits","TDC");
   hipo::node<float>          *TimeBasedTrkg__TBHits_TFlight = fReader->getBranch<float>("TimeBasedTrkg::TBHits","TFlight");
   hipo::node<float>            *TimeBasedTrkg__TBHits_TProp = fReader->getBranch<float>("TimeBasedTrkg::TBHits","TProp");
   hipo::node<float>           *TimeBasedTrkg__TBHits_TStart = fReader->getBranch<float>("TimeBasedTrkg::TBHits","TStart");
   hipo::node<float>                *TimeBasedTrkg__TBHits_X = fReader->getBranch<float>("TimeBasedTrkg::TBHits","X");
   hipo::node<float>                *TimeBasedTrkg__TBHits_Z = fReader->getBranch<float>("TimeBasedTrkg::TBHits","Z");
   hipo::node<float>             *TimeBasedTrkg__TBHits_beta = fReader->getBranch<float>("TimeBasedTrkg::TBHits","beta");
   hipo::node<int16_t>      *TimeBasedTrkg__TBHits_clusterID = fReader->getBranch<int16_t>("TimeBasedTrkg::TBHits","clusterID");
   hipo::node<float>             *TimeBasedTrkg__TBHits_doca = fReader->getBranch<float>("TimeBasedTrkg::TBHits","doca");
   hipo::node<float>        *TimeBasedTrkg__TBHits_docaError = fReader->getBranch<float>("TimeBasedTrkg::TBHits","docaError");
   hipo::node<float>      *TimeBasedTrkg__TBHits_fitResidual = fReader->getBranch<float>("TimeBasedTrkg::TBHits","fitResidual");
   hipo::node<int16_t>             *TimeBasedTrkg__TBHits_id = fReader->getBranch<int16_t>("TimeBasedTrkg::TBHits","id");
   hipo::node<int8_t>           *TimeBasedTrkg__TBHits_layer = fReader->getBranch<int8_t>("TimeBasedTrkg::TBHits","layer");
   hipo::node<int8_t>          *TimeBasedTrkg__TBHits_sector = fReader->getBranch<int8_t>("TimeBasedTrkg::TBHits","sector");
   hipo::node<int16_t>         *TimeBasedTrkg__TBHits_status = fReader->getBranch<int16_t>("TimeBasedTrkg::TBHits","status");
   hipo::node<int8_t>      *TimeBasedTrkg__TBHits_superlayer = fReader->getBranch<int8_t>("TimeBasedTrkg::TBHits","superlayer");
   hipo::node<float>            *TimeBasedTrkg__TBHits_tBeta = fReader->getBranch<float>("TimeBasedTrkg::TBHits","tBeta");
   hipo::node<float>             *TimeBasedTrkg__TBHits_time = fReader->getBranch<float>("TimeBasedTrkg::TBHits","time");
   hipo::node<float>     *TimeBasedTrkg__TBHits_timeResidual = fReader->getBranch<float>("TimeBasedTrkg::TBHits","timeResidual");
   hipo::node<float>          *TimeBasedTrkg__TBHits_trkDoca = fReader->getBranch<float>("TimeBasedTrkg::TBHits","trkDoca");
   hipo::node<int8_t>           *TimeBasedTrkg__TBHits_trkID = fReader->getBranch<int8_t>("TimeBasedTrkg::TBHits","trkID");
   hipo::node<int16_t>           *TimeBasedTrkg__TBHits_wire = fReader->getBranch<int16_t>("TimeBasedTrkg::TBHits","wire");
   hipo::node<int8_t>           *TimeBasedTrkg__TBSegmentTrajectory_layer = fReader->getBranch<int8_t>("TimeBasedTrkg::TBSegmentTrajectory","layer");
   hipo::node<int16_t>   *TimeBasedTrkg__TBSegmentTrajectory_matchedHitID = fReader->getBranch<int16_t>("TimeBasedTrkg::TBSegmentTrajectory","matchedHitID");
   hipo::node<int8_t>          *TimeBasedTrkg__TBSegmentTrajectory_sector = fReader->getBranch<int8_t>("TimeBasedTrkg::TBSegmentTrajectory","sector");
   hipo::node<int16_t>      *TimeBasedTrkg__TBSegmentTrajectory_segmentID = fReader->getBranch<int16_t>("TimeBasedTrkg::TBSegmentTrajectory","segmentID");
   hipo::node<int8_t>      *TimeBasedTrkg__TBSegmentTrajectory_superlayer = fReader->getBranch<int8_t>("TimeBasedTrkg::TBSegmentTrajectory","superlayer");
   hipo::node<float>          *TimeBasedTrkg__TBSegmentTrajectory_trkDoca = fReader->getBranch<float>("TimeBasedTrkg::TBSegmentTrajectory","trkDoca");
   hipo::node<int16_t>      *TimeBasedTrkg__TBSegments_Cluster_ID = fReader->getBranch<int16_t>("TimeBasedTrkg::TBSegments","Cluster_ID");
   hipo::node<int16_t>        *TimeBasedTrkg__TBSegments_Hit10_ID = fReader->getBranch<int16_t>("TimeBasedTrkg::TBSegments","Hit10_ID");
   hipo::node<int16_t>        *TimeBasedTrkg__TBSegments_Hit11_ID = fReader->getBranch<int16_t>("TimeBasedTrkg::TBSegments","Hit11_ID");
   hipo::node<int16_t>        *TimeBasedTrkg__TBSegments_Hit12_ID = fReader->getBranch<int16_t>("TimeBasedTrkg::TBSegments","Hit12_ID");
   hipo::node<int16_t>         *TimeBasedTrkg__TBSegments_Hit1_ID = fReader->getBranch<int16_t>("TimeBasedTrkg::TBSegments","Hit1_ID");
   hipo::node<int16_t>         *TimeBasedTrkg__TBSegments_Hit2_ID = fReader->getBranch<int16_t>("TimeBasedTrkg::TBSegments","Hit2_ID");
   hipo::node<int16_t>         *TimeBasedTrkg__TBSegments_Hit3_ID = fReader->getBranch<int16_t>("TimeBasedTrkg::TBSegments","Hit3_ID");
   hipo::node<int16_t>         *TimeBasedTrkg__TBSegments_Hit4_ID = fReader->getBranch<int16_t>("TimeBasedTrkg::TBSegments","Hit4_ID");
   hipo::node<int16_t>         *TimeBasedTrkg__TBSegments_Hit5_ID = fReader->getBranch<int16_t>("TimeBasedTrkg::TBSegments","Hit5_ID");
   hipo::node<int16_t>         *TimeBasedTrkg__TBSegments_Hit6_ID = fReader->getBranch<int16_t>("TimeBasedTrkg::TBSegments","Hit6_ID");
   hipo::node<int16_t>         *TimeBasedTrkg__TBSegments_Hit7_ID = fReader->getBranch<int16_t>("TimeBasedTrkg::TBSegments","Hit7_ID");
   hipo::node<int16_t>         *TimeBasedTrkg__TBSegments_Hit8_ID = fReader->getBranch<int16_t>("TimeBasedTrkg::TBSegments","Hit8_ID");
   hipo::node<int16_t>         *TimeBasedTrkg__TBSegments_Hit9_ID = fReader->getBranch<int16_t>("TimeBasedTrkg::TBSegments","Hit9_ID");
   hipo::node<float>     *TimeBasedTrkg__TBSegments_SegEndPoint1X = fReader->getBranch<float>("TimeBasedTrkg::TBSegments","SegEndPoint1X");
   hipo::node<float>     *TimeBasedTrkg__TBSegments_SegEndPoint1Z = fReader->getBranch<float>("TimeBasedTrkg::TBSegments","SegEndPoint1Z");
   hipo::node<float>     *TimeBasedTrkg__TBSegments_SegEndPoint2X = fReader->getBranch<float>("TimeBasedTrkg::TBSegments","SegEndPoint2X");
   hipo::node<float>     *TimeBasedTrkg__TBSegments_SegEndPoint2Z = fReader->getBranch<float>("TimeBasedTrkg::TBSegments","SegEndPoint2Z");
   hipo::node<float>           *TimeBasedTrkg__TBSegments_avgWire = fReader->getBranch<float>("TimeBasedTrkg::TBSegments","avgWire");
   hipo::node<float>      *TimeBasedTrkg__TBSegments_fitChisqProb = fReader->getBranch<float>("TimeBasedTrkg::TBSegments","fitChisqProb");
   hipo::node<float>         *TimeBasedTrkg__TBSegments_fitInterc = fReader->getBranch<float>("TimeBasedTrkg::TBSegments","fitInterc");
   hipo::node<float>      *TimeBasedTrkg__TBSegments_fitIntercErr = fReader->getBranch<float>("TimeBasedTrkg::TBSegments","fitIntercErr");
   hipo::node<float>          *TimeBasedTrkg__TBSegments_fitSlope = fReader->getBranch<float>("TimeBasedTrkg::TBSegments","fitSlope");
   hipo::node<float>       *TimeBasedTrkg__TBSegments_fitSlopeErr = fReader->getBranch<float>("TimeBasedTrkg::TBSegments","fitSlopeErr");
   hipo::node<int16_t>              *TimeBasedTrkg__TBSegments_id = fReader->getBranch<int16_t>("TimeBasedTrkg::TBSegments","id");
   hipo::node<float>           *TimeBasedTrkg__TBSegments_resiSum = fReader->getBranch<float>("TimeBasedTrkg::TBSegments","resiSum");
   hipo::node<int8_t>           *TimeBasedTrkg__TBSegments_sector = fReader->getBranch<int8_t>("TimeBasedTrkg::TBSegments","sector");
   hipo::node<int8_t>             *TimeBasedTrkg__TBSegments_size = fReader->getBranch<int8_t>("TimeBasedTrkg::TBSegments","size");
   hipo::node<int16_t>          *TimeBasedTrkg__TBSegments_status = fReader->getBranch<int16_t>("TimeBasedTrkg::TBSegments","status");
   hipo::node<int8_t>       *TimeBasedTrkg__TBSegments_superlayer = fReader->getBranch<int8_t>("TimeBasedTrkg::TBSegments","superlayer");
   hipo::node<float>           *TimeBasedTrkg__TBSegments_timeSum = fReader->getBranch<float>("TimeBasedTrkg::TBSegments","timeSum");
   hipo::node<int16_t>    *TimeBasedTrkg__TBTracks_Cross1_ID = fReader->getBranch<int16_t>("TimeBasedTrkg::TBTracks","Cross1_ID");
   hipo::node<int16_t>    *TimeBasedTrkg__TBTracks_Cross2_ID = fReader->getBranch<int16_t>("TimeBasedTrkg::TBTracks","Cross2_ID");
   hipo::node<int16_t>    *TimeBasedTrkg__TBTracks_Cross3_ID = fReader->getBranch<int16_t>("TimeBasedTrkg::TBTracks","Cross3_ID");
   hipo::node<float>         *TimeBasedTrkg__TBTracks_Vtx0_x = fReader->getBranch<float>("TimeBasedTrkg::TBTracks","Vtx0_x");
   hipo::node<float>         *TimeBasedTrkg__TBTracks_Vtx0_y = fReader->getBranch<float>("TimeBasedTrkg::TBTracks","Vtx0_y");
   hipo::node<float>         *TimeBasedTrkg__TBTracks_Vtx0_z = fReader->getBranch<float>("TimeBasedTrkg::TBTracks","Vtx0_z");
   hipo::node<float>          *TimeBasedTrkg__TBTracks_c1_ux = fReader->getBranch<float>("TimeBasedTrkg::TBTracks","c1_ux");
   hipo::node<float>          *TimeBasedTrkg__TBTracks_c1_uy = fReader->getBranch<float>("TimeBasedTrkg::TBTracks","c1_uy");
   hipo::node<float>          *TimeBasedTrkg__TBTracks_c1_uz = fReader->getBranch<float>("TimeBasedTrkg::TBTracks","c1_uz");
   hipo::node<float>           *TimeBasedTrkg__TBTracks_c1_x = fReader->getBranch<float>("TimeBasedTrkg::TBTracks","c1_x");
   hipo::node<float>           *TimeBasedTrkg__TBTracks_c1_y = fReader->getBranch<float>("TimeBasedTrkg::TBTracks","c1_y");
   hipo::node<float>           *TimeBasedTrkg__TBTracks_c1_z = fReader->getBranch<float>("TimeBasedTrkg::TBTracks","c1_z");
   hipo::node<float>          *TimeBasedTrkg__TBTracks_c3_ux = fReader->getBranch<float>("TimeBasedTrkg::TBTracks","c3_ux");
   hipo::node<float>          *TimeBasedTrkg__TBTracks_c3_uy = fReader->getBranch<float>("TimeBasedTrkg::TBTracks","c3_uy");
   hipo::node<float>          *TimeBasedTrkg__TBTracks_c3_uz = fReader->getBranch<float>("TimeBasedTrkg::TBTracks","c3_uz");
   hipo::node<float>           *TimeBasedTrkg__TBTracks_c3_x = fReader->getBranch<float>("TimeBasedTrkg::TBTracks","c3_x");
   hipo::node<float>           *TimeBasedTrkg__TBTracks_c3_y = fReader->getBranch<float>("TimeBasedTrkg::TBTracks","c3_y");
   hipo::node<float>           *TimeBasedTrkg__TBTracks_c3_z = fReader->getBranch<float>("TimeBasedTrkg::TBTracks","c3_z");
   hipo::node<float>           *TimeBasedTrkg__TBTracks_chi2 = fReader->getBranch<float>("TimeBasedTrkg::TBTracks","chi2");
   hipo::node<int16_t>           *TimeBasedTrkg__TBTracks_id = fReader->getBranch<int16_t>("TimeBasedTrkg::TBTracks","id");
   hipo::node<int16_t>          *TimeBasedTrkg__TBTracks_ndf = fReader->getBranch<int16_t>("TimeBasedTrkg::TBTracks","ndf");
   hipo::node<float>           *TimeBasedTrkg__TBTracks_p0_x = fReader->getBranch<float>("TimeBasedTrkg::TBTracks","p0_x");
   hipo::node<float>           *TimeBasedTrkg__TBTracks_p0_y = fReader->getBranch<float>("TimeBasedTrkg::TBTracks","p0_y");
   hipo::node<float>           *TimeBasedTrkg__TBTracks_p0_z = fReader->getBranch<float>("TimeBasedTrkg::TBTracks","p0_z");
   hipo::node<float>     *TimeBasedTrkg__TBTracks_pathlength = fReader->getBranch<float>("TimeBasedTrkg::TBTracks","pathlength");
   hipo::node<int8_t>             *TimeBasedTrkg__TBTracks_q = fReader->getBranch<int8_t>("TimeBasedTrkg::TBTracks","q");
   hipo::node<int8_t>        *TimeBasedTrkg__TBTracks_sector = fReader->getBranch<int8_t>("TimeBasedTrkg::TBTracks","sector");
   hipo::node<int16_t>       *TimeBasedTrkg__TBTracks_status = fReader->getBranch<int16_t>("TimeBasedTrkg::TBTracks","status");
   hipo::node<float>          *TimeBasedTrkg__TBTracks_t1_px = fReader->getBranch<float>("TimeBasedTrkg::TBTracks","t1_px");
   hipo::node<float>          *TimeBasedTrkg__TBTracks_t1_py = fReader->getBranch<float>("TimeBasedTrkg::TBTracks","t1_py");
   hipo::node<float>          *TimeBasedTrkg__TBTracks_t1_pz = fReader->getBranch<float>("TimeBasedTrkg::TBTracks","t1_pz");
   hipo::node<float>           *TimeBasedTrkg__TBTracks_t1_x = fReader->getBranch<float>("TimeBasedTrkg::TBTracks","t1_x");
   hipo::node<float>           *TimeBasedTrkg__TBTracks_t1_y = fReader->getBranch<float>("TimeBasedTrkg::TBTracks","t1_y");
   hipo::node<float>           *TimeBasedTrkg__TBTracks_t1_z = fReader->getBranch<float>("TimeBasedTrkg::TBTracks","t1_z");
   hipo::node<float>       *TimeBasedTrkg__Trajectory_B = fReader->getBranch<float>("TimeBasedTrkg::Trajectory","B");
   hipo::node<float>       *TimeBasedTrkg__Trajectory_L = fReader->getBranch<float>("TimeBasedTrkg::Trajectory","L");
   hipo::node<int16_t>   *TimeBasedTrkg__Trajectory_did = fReader->getBranch<int16_t>("TimeBasedTrkg::Trajectory","did");
   hipo::node<int16_t>   *TimeBasedTrkg__Trajectory_tid = fReader->getBranch<int16_t>("TimeBasedTrkg::Trajectory","tid");
   hipo::node<float>      *TimeBasedTrkg__Trajectory_tx = fReader->getBranch<float>("TimeBasedTrkg::Trajectory","tx");
   hipo::node<float>      *TimeBasedTrkg__Trajectory_ty = fReader->getBranch<float>("TimeBasedTrkg::Trajectory","ty");
   hipo::node<float>      *TimeBasedTrkg__Trajectory_tz = fReader->getBranch<float>("TimeBasedTrkg::Trajectory","tz");
   hipo::node<float>       *TimeBasedTrkg__Trajectory_x = fReader->getBranch<float>("TimeBasedTrkg::Trajectory","x");
   hipo::node<float>       *TimeBasedTrkg__Trajectory_y = fReader->getBranch<float>("TimeBasedTrkg::Trajectory","y");
   hipo::node<float>       *TimeBasedTrkg__Trajectory_z = fReader->getBranch<float>("TimeBasedTrkg::Trajectory","z");
